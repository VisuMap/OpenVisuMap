# VsMap.pyn
#
# Train a model to the current map together with its clustering.
#
#------------------------------------------------------------------------
vv.Import('CommonUtil.pyn')
vv.Import('VsModelling.pyn')
InitVmd()
vmd.Clear()

def NewFullModel(layerDims, X, Y, mapDim, dropoutRatio=0.25, cBias=0.9):
	input = keras.Input(shape=(X.shape[1]))
	P = InScaling(X)(input)
	for k, dim in enumerate(layerDims):
		P = DenseLayer(dim, 'leaky_relu')(P)
		if (k == 0) and (dropoutRatio>0): 
			P = keras.layers.Dropout(dropoutRatio)(P)
		if (k == 1):
			Pc = P

	Pm = DenseLayer(mapDim, 'sigmoid')(P)
	Ym = Y[:,:mapDim]
	colMin, colMax = np.min(Ym, axis=0), np.max(Ym, axis=0) 
	colScale = colMax - colMin
	colShift = 0.5*(colMax + colMin - colScale)
	Pm = colScale*Pm + colShift

	clusterDim = Y.shape[1] - mapDim
	Pc = DenseLayer(clusterDim, 'leaky_relu')(Pc)
	Pc = keras.layers.Softmax(name='Softmax')(Pc)

	output = tf.concat([Pm, Pc], axis=1, name='FullMapOut')

	md = keras.Model(input, output, name=f'MapMd_{mapDim}')
	md.modelType = vmd.FULL_MODEL
	md.mapDim = mapDim
	md.lossFct = FullMapLoss(mapDim, cBias=cBias)
	return md

def Logger(epoch, cost):
	vmd.OpenLogMap()
	mD = vmd.model.mapDim		
	P = vmd.model(vmd.ds.X, training=False).numpy()
	vmd.logMap.MoveBodiesTo(mm.ToMatrix32(P[:,:mD].copy()))
	err = np.mean(np.linalg.norm(vmd.ds.Y[:, :mD]-P[:, :mD], axis=1))
	misses = 0
	for k, b in enumerate(vmd.logMap.BodyList):
		maxIdx = mD + np.argmax(P[k, mD:])	
		if vmd.ds.Y[k, maxIdx] != 1.0:
			misses += 1
			b.Highlighted = True
		else:
			b.Highlighted = False
	vmd.logMap.RedrawBodies()
	vmd.logMap.Title = f'{epoch+1}: Cost: {cost:.2f}, L2: {err:.2f}, Mises: {misses}'

#------------------------------------------------------------------------

X = GetDatasetData()
Ym = GetMapData()
Yc = GetClusterData()
Y = np.concatenate([Ym, Yc], axis=1)
vmd.ds = TrainDataset(X, Y)
inDim = X.shape[1]
dimList,DR,LR,epochs = [inDim, 256] + 6*[128], 0.5, 0.0015, 1500
vmd.reportFreq = 50

vmd.model = NewFullModel(dimList, X, Y, Ym.shape[1], DR)
TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)
ShowPred(vmd.model, X, Y)

'''
tMap = 'A1'
tX = GetDatasetData(tMap)
tY = np.concatenate([GetMapData(tMap), GetClusterData(tMap)], axis=1)

for d in [1, 2, 3]:
	del vmd.model
	vmd.model = NewFullModel(dimList, X, Y, Ym.shape[1], DR)
	TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)
	map = ShowPred(vmd.model, tX, tY, refMapName=tMap)
	vv.Echo(map.Title + f', T:{vmd.trainingTime:.1f}s, d: {d}')
	map.Close()
'''
