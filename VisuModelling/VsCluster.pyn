# VsCluster.pyn
#
# Train a classification model to the clustering in the current map.
#
#------------------------------------------------------------------------
vv.Import('CommonUtil.pyn')
vv.Import('VsModelling.pyn')
from tensorflow.keras.layers import BatchNormalization, Dropout
InitVmd()
vmd.Clear()

def NewCluster(layerDims, X, Y, DR=0.25):
	input = keras.Input(shape=(X.shape[1]))
	P = InScaling(X)(input)
	for k, dim in enumerate(layerDims):
		P = DenseLayer(dim, 'leaky_relu')(P)
		if (k in [0]) and (DR>0): P = Dropout(DR)(P)
	P = DenseLayer(Y.shape[1], 'leaky_relu')(P)
	output = keras.layers.Softmax()(P)
	md = keras.Model(input, output, name='ClusterMd')
	md.modelType = vmd.CLUSTERING
	md.lossFct = keras.losses.CategoricalCrossentropy()
	md.trainState = 'Initialized'
	return md

def Logger(epoch, cost):
	vmd.OpenLogMap()
	P = GetClusterPred(vmd.model, vmd.ds.X)
	ShowClusterPred(P, epoch, cost, vmd.logMap, refY=vmd.ds.Y)

vmd.reportFreq = 50
X, Y = GetDatasetData(), GetClusterData()
vmd.ds = TrainDataset(X, Y)
dimList, DR, LR, epochs  = [X.shape[1], 256], 0.5, 0.00025, 1500
vmd.model = NewCluster(dimList, X, Y, DR)
TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)	
ShowPred(vmd.model, X, Y)

'''
tMap = 'A1'
tX, tY = GetDatasetData(tMap), GetClusterData(tMap)
for k in range(3):
	del vmd.model
	vmd.model = NewCluster(dimList, X, Y, DR)
	TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)	
	map = ShowPred(vmd.model, tX, tY, refMapName=tMap)
	vv.Echo(map.Title + f', P: {k}')
	map.Close()
'''