# VsCluster.pyn
#
# Train a classification model to the clustering in the current map.
#
#------------------------------------------------------------------------
vv.Import('CommonUtil.pyn')
vv.Import('VsModelling.pyn')
InitVmd()
vmd.Clear()

def NewCluster(layerDims, X, Y, dropoutRatio=0.25):
	md = keras.Sequential()
	md.add( keras.Input(shape=(X.shape[1])) )
	md.add( InScaling(X) )
	for k, dim in enumerate(layerDims):
		md.add( DenseLayer(dim, 'leaky_relu') )
		if (k == 0) and (dropoutRatio>0): 
			md.add(keras.layers.Dropout(dropoutRatio))
	md.add( DenseLayer(Y.shape[1], 'leaky_relu') )
	md.add( keras.layers.Softmax(name='ClstLayer') )
	md.modelType = vmd.CLUSTERING
	md.lossFct = keras.losses.CategoricalCrossentropy()
	return md

def Logger(epoch, cost):
	vmd.OpenLogMap()
	P = GetClusterPred(vmd.model, vmd.ds.X)
	ShowClusterPred(P, epoch, cost, vmd.logMap)

X, Y = GetDatasetData(), GetClusterData()
vmd.ds = TrainDataset(X, Y)
#dimList, DropR, LR, epochs  = [128, 64, 32], 0.5, 0.001, 1000
dimList, DropR, LR, epochs  = [128, 64, 32], 0.25, 0.001, 2000

vmd.model = NewCluster(dimList, X, Y, DropR)
TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)
ShowPred(vmd.model, X, Y)

'''
orgMapName = vv.Map.Name
vv.Dataset.OpenMap('A1')
tX, tY = GetDatasetData(), GetClusterData()
ShowPred(vmd.model, tX, tY)
vv.Dataset.OpenMap(orgMapName)
'''