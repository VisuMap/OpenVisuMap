# VsTrain.pyn
#
# Train a model to learn the current map in the VisuMap window
#
# -----------------------------------------------------------------
vv.Import('CommonUtil.pyn')
vv.Import('VsModelling.pyn')
InitVmd()
vmd.Clear()

def NewMapModel(layerDims, X, Y, dropoutRatio=0.25):
	md = keras.Sequential(name='RegressionMd')
	md.add( keras.Input(shape=(X.shape[1])) )
	md.add( InScaling(X) )
	for k, dim in enumerate(layerDims):
		md.add( DenseLayer(dim, 'leaky_relu') )
		if (k==0) and (dropoutRatio>0): 
			md.add(keras.layers.Dropout(dropoutRatio))
	md.add( DenseLayer(Y.shape[1], 'sigmoid') )
	md.add( OutScaling(Y, gape=0.0) )
	md.modelType = vmd.REGRESSION
	md.lossFct = keras.losses.MeanSquaredError()
	return md

def Logger(epoch, cost):
	vmd.OpenLogMap()
	P = vmd.model(vmd.ds.X, training=False).numpy()
	vmd.logMap.MoveBodiesTo(mm.ToMatrix32(P))
	err = np.mean(np.linalg.norm(vmd.ds.Y-P, axis=1))
	vmd.logMap.Title = f'Epoch: {epoch+1}, Cost: {cost:.4f},  L2: {err:.2f}'

vmd.reportFreq = 50
X, Y = GetDatasetData(), GetMapData()
inDim, outDim = X.shape[1], Y.shape[1]
vmd.ds = TrainDataset(X, Y, batchSize=25)
dimList, DropR, LR, epochs = [inDim, 256] + 3*[128], 0.30, 0.001, 1500 # 14.05

vmd.model = NewMapModel(dimList, X, Y, DropR)
TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)
ShowPred(vmd.model, X, Y)

'''
tMap = 'A1'
tX, tY = GetDatasetData(tMap), GetMapData(tMap)
for k in [1, 2]:
	vmd.model = NewMapModel(dimList, X, Y, DropR)
	TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)	
	map = ShowPred(vmd.model, tX, tY, refMapName=tMap)
	vv.Echo(map.Title + f', LR: {LR}')
	map.Close()
'''
