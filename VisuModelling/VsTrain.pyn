# VsTrain.pyn
#
# Train a model to learn the current map in the VisuMap window
#
# -----------------------------------------------------------------
vv.Import('CommonUtil.pyn')
vv.Import('VsModelling.pyn')
InitVmd()
vmd.Clear()

def NewMapModel(layerDims, X, Y, dropoutRatio=0.25):
	input = keras.Input(shape=(X.shape[1])) 
	P = InScaling(X) (input)
	for k, dim in enumerate(layerDims):
		P = DenseLayer(dim, 'leaky_relu') (P)
		if (k==0) and (dropoutRatio>0): 
			P = keras.layers.Dropout(dropoutRatio) (P)
	P = DenseLayer(Y.shape[1], 'sigmoid') (P)
	output = OutScaling(Y, gape=0.0) (P)
	md = keras.Model(input, output, name='RegressionMd')
	md.modelType = vmd.REGRESSION
	md.lossFct = keras.losses.MeanSquaredError()
	md.trainState = 'Initialized'
	return md

def Logger(epoch, cost):
	vmd.OpenLogMap()
	P = vmd.model(vmd.ds.X, training=False).numpy()
	vmd.logMap.MoveBodiesTo(mm.ToMatrix32(P))
	err = np.mean(np.linalg.norm(vmd.ds.Y-P, axis=1))
	vmd.logMap.Title = f'Epoch: {epoch+1}, Cost: {cost:.4f},  L2: {err:.2f}'
	vmd.model.trainState = vmd.logMap.Title

vmd.reportFreq = 50
X, Y = GetDatasetData(), GetMapData()
inDim, outDim = X.shape[1], Y.shape[1]
vmd.ds = TrainDataset(X, Y, batchSize=25)
dimList, DR, LR, epochs = [inDim, 256] + 6*[100], 0.5, 0.001, 1500  # 12.94/13.04

vmd.model = NewMapModel(dimList, X, Y, DR)
TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)
ShowPred(vmd.model, X, Y)

'''
tMap = 'A1'
tX, tY = GetDatasetData(tMap), GetMapData(tMap)
for k in [1, 2]:
	del vmd.model
	vmd.model = NewMapModel(dimList, X, Y, DR)
	TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)	
	map = ShowPred(vmd.model, tX, tY, refMapName=tMap)
	vv.Echo(map.Title + f', LR: {LR}')
	map.Close()
'''
