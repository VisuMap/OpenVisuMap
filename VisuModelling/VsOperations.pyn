#MenuLabels Eval Save Load
#
#File: VsOperations.pyn
#
vv.Import('VsModelling.pyn')
vv.Import('CommonUtil.pyn')
InitVmd()

opLabel = vv.EventSource.Item

def CheckModel():
	if vmd.model is None:
		vv.Message('No model has been created!')
		vv.Return()

def GetInputData(md):
	X = GetDatasetData()
	if X.shape[1] != md.input_shape[1]:
		vv.Message("The model input dimension doesn't match that of the current table: %d != %d"%(
			md.input_shape[1], X.shape[1]))
		vv.Return()
	return X

if opLabel == 'Save':
	CheckModel()
	mdPath = PromptOpenDirectory()
	if mdPath != '':
		vmd.model.save(mdPath)
		vv.Message("Saved model!")
elif opLabel == 'Load':
	mdPath = PromptOpenDirectory()
	if mdPath != '':
		md = tf.keras.models.load_model(mdPath)
		if md.name == 'ClusterMd':
			md.modelType = vmd.CLUSTERING
			mdType = 'Clustering'
			md.lossFct = keras.losses.CategoricalCrossentropy()
		elif md.name == 'RegressionMd':
			md.modelType = vmd.REGRESSION
			mdType = 'Regression'
			md.lossFct = keras.losses.MeanSquaredError()
		elif md.name.startswith('MapMd_'):
			md.modelType = vmd.FULL_MODEL
			mdType = 'FullMap'
			md.mapDim = 3 if md.name.endswith('3') else 2
			md.lossFct = FullMapLoss(md.mapDim)
		else:
			md.modelType = 0
			mdType = "Unknown"
		vmd.model = md
		vv.Message(f'Loaded model: {mdType} {vmd.model.input_shape[1]}=>{vmd.model.output_shape[1]}')
		#ShowModel(md)
elif opLabel == 'Eval':
	CheckModel()
	testX = GetDatasetData()
	if testX.shape[1] != vmd.model.input_shape[1]:
		vv.Message("The model input dimension doesn't match that of the current table: %d != %d"%(
			vmd.model.input_shape[1], testX.shape[1]))
		vv.Return()
	if vmd.model.modelType == vmd.REGRESSION:
		testY = GetMapData()
	elif vmd.model.modelType == vmd.CLUSTERING:
		testY = GetClusterData()
	else:   # vmd.model.modelType == vmd.FULL_MODEL
		testY = np.concatenate([GetMapData(), GetClusterData()], axis=1)
	ShowPred(vmd.model, testX, testY)
