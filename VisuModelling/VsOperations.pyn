#MenuLabels Eval Save Load
#
#File: VsOperations.pyn
#
vv.Import('VsModelling.pyn')
vv.Import('CommonUtil.pyn')
InitVmd()

opLabel = vv.EventSource.Item

def CheckModel():
	if vmd.model is None:
		vv.Message('No model has been created!')
		vv.Return()

def GetInputData(md):
	X = GetDatasetData()
	if X.shape[1] != md.input_shape[1]:
		vv.Message("The model input dimension doesn't match that of the current table: %d != %d"%(
			md.input_shape[1], X.shape[1]))
		vv.Return()
	return X

def SaveModel(md, mdPath):
	mdInfo = {'modelType': md.modelType}
	if md.modelType == vmd.FULL_MODEL:
		mdInfo['mapDim'] = md.mapDim
	md.info = tf.Variable(str(mdInfo), trainable=False)
	md.save(mdPath)
	vv.Message(f'Saved model of type: {md.modelType}!')

def AcceptModel(md):
	mdInfo = eval( md.info.numpy().decode('ascii') )
	type = md.modelType = mdInfo['modelType']
	if type == vmd.CLUSTERING:
		mdType = 'Clustering'
		md.lossFct = keras.losses.CategoricalCrossentropy()
	elif type == vmd.REGRESSION:
		mdType = 'Regression'
		md.lossFct = keras.losses.MeanSquaredError()
	elif type == vmd.FULL_MODEL:
		mdType = 'FullMap'
		md.mapDim = mdInfo['mapDim']
		md.lossFct = FullMapLoss(md.mapDim)
	else:
		md.modelType = vmd.REGRESSION
		md.lossFct = keras.losses.MeanSquaredError()
		mdType = "Unknown"
	vv.Message(f'Loaded model: {mdType} {md.input_shape[1]}=>{md.output_shape[1]}')
	#ShowModel(md)
	return md

if opLabel == 'Save':
	CheckModel()
	mdPath = PromptOpenDirectory()
	if mdPath != '':
		SaveModel(vmd.model, mdPath)
elif opLabel == 'Load':
	mdPath = PromptOpenDirectory()
	if mdPath != '':
		vmd.model = AcceptModel( tf.keras.models.load_model(mdPath) )
elif opLabel == 'Eval':
	CheckModel()
	testX = GetDatasetData()
	if testX.shape[1] != vmd.model.input_shape[1]:
		vv.Message("The model input dimension doesn't match that of the current table: %d != %d"%(
			vmd.model.input_shape[1], testX.shape[1]))
		vv.Return()
	if vmd.model.modelType == vmd.REGRESSION:
		testY = GetMapData()
	elif vmd.model.modelType == vmd.CLUSTERING:
		testY = GetClusterData()
	else:   # vmd.model.modelType == vmd.FULL_MODEL
		testY = np.concatenate([GetMapData(), GetClusterData()], axis=1)
	ShowPred(vmd.model, testX, testY)
