# DeepScaling.pyn
#
# Do multidimensional scaling with a neural network. Reduce given table Y to 
# inDim-dimensional table X, a la NN backprobagation: X<-Y
#
#------------------------------------------------------------------------------
import random
vv.Import('CommonUtil.pyn')
vv.Import('VsModelling.pyn')
InitVmd()
vmd.Clear()

#------------------------------------------------------------------------------

def Logger(epoch, cost):
	global inDim
	tm = (time.time() - vmd.startTime)/(epoch+1)
	logTitle = f'Epoch: {epoch+1}, Cost: {cost:_.2f}, E/s: {tm:.3f}'
	if inDim==1:
		#UpdateInMap5(epoch, cost, logTitle)
        #UpdateInMap(epoch, cost, logTitle)
		UpdateOutMap(epoch, cost, logTitle)
	else:
		pX = X.numpy()
		if inDim<=3:
			Update2DMap(4000*pX+[400], title=logTitle)
		else:
			UpdateXyMap(pX, title=logTitle)

def UpdateInMap(epoch, cost, title):
	global spMap
	npSeq = X.numpy().flatten()
	if (spMap == None) or spMap.TheForm.IsDisposed:
		spMap = ShowSpectrum(npSeq)
	else:
		items = spMap.ItemList
		for i in range(items.Count):
			items[i].Value = npSeq[i]
		spMap.ResetScaling()
	spMap.Title = title
	return spMap

def UpdateInMap2(epoch, cost, title):
	global spMap
	npSeq = X.numpy().flatten()
	if (spMap == None) or spMap.TheForm.IsDisposed:
		spMap = New.MapSnapshot(True).Show()
	minV, maxV = np.min(npSeq), np.max(npSeq)
	rangeV = maxV - minV
	N = npSeq.shape[0]
	pos = np.empty([N, 3], dtype=np.float32)
	posY = 200 if (int(epoch/vmd.reportFreq)%2 == 0) else 400
	sz = spMap.MapLayout.Width
	for i in range(N):
		pos[i] = sz*(npSeq[i] - minV)/rangeV, posY, 0
	spMap.MoveBodiesTo(mm.ToMatrix32(pos), 150, 20)  
	spMap.Title = title
	return spMap

def UpdateInMap3(epoch, cost, title):
	global spMap
	npSeq = X.numpy().flatten()
	if (spMap == None) or spMap.TheForm.IsDisposed:
		spMap = ShowBarView(npSeq)
	else:
		spMap.MoveTo(mm.ToArray64(npSeq), 20, 30)
	return spMap

preX = None
def UpdateInMap4(epoch, cost, title):
	global spMap
	global preX
	if (spMap == None) or spMap.TheForm.IsDisposed:
		spMap = New.HistoryView().Show()
	newX = X.numpy()
	if preX is not None:
		varX = float( np.sum(np.abs(newX-preX)) )
		spMap.AddStep(varX)
	preX = newX
	spMap.Title = title
	return spMap

seqHist = None
colIdx = 0
def UpdateInMap5(epoch, cost, tittle):
	global seqHist, colIdx
	if seqHist is None: 
		N = dY.shape[0]
		dim = int(epochs/vmd.reportFreq)
		seqHist = np.zeros([N, dim], dtype=np.float32)
		colIdx = 0
	seqHist[:, colIdx] = X.numpy().flatten()[:]
	colIdx += 1

def UpdateOutMap(epoch, cost, title=None):
	pY =  md(X, training=False).numpy()
	outDim = dY.shape[1]
	outMap = Update2DMap(pY) if outDim <= 3 else	UpdateXyMap(pY)
	if title != None:
		outMap.Title = title
	return outMap

def UpdateXyMap(npTable, title=None):
	global xyMap
	if (xyMap == None) or xyMap.TheForm.IsDisposed:
		xyMap = ShowXyMap(npTable)
	else:
		mm.CopyToTable(npTable, xyMap.GetNumberTable())
		xyMap.Redraw()
	if title is not None: xyMap.Title = title	
	return xyMap

def Update2DMap(npTable, title=None):
	vmd.OpenLogMap()
	vmd.logMap.MoveBodiesTo(mm.ToMatrix32(npTable))
	if title is not None: vmd.logMap.Title = title	
	return vmd.logMap

#-------------------------------------------------------------------------------------------

def DeepScalingModel(X, Y, dimList, DR):
	P = input = keras.Input(shape=(X.shape[1]), dtype=tf.float32)
	for k, dim in enumerate(dimList):
		P = DenseLayer(dim, 'leaky_relu') (P)
		if (k <= 4) and (DR>0): 
			P = keras.layers.Dropout(DR)(P)
		#Jumping connections for better performance
		if k==0: P1 = P  
		if k==4: P += P1
	P = DenseLayer(Y.shape[1], 'sigmoid') (P)
	output = OutScaling(Y, gape=0.0) (P)
	md = keras.Model(input, output, name=f'Scaling')
	md.lossFct = keras.losses.MeanSquaredError()
	md.X = X   # this statment will add X to md.trainable_variables!
	return md

@tf.function(jit_compile=True)
def TrainBatch(md, bIdx):
	with tf.GradientTape() as tape:
		bX, bY = tf.gather(X, bIdx), tf.gather(Y, bIdx)
		pY = md(bX, training=True)
		loss = md.lossFct(bY, pY)
	grads = tape.gradient(loss, md.trainable_variables)
	md.optimizer.apply_gradients(zip(grads, md.trainable_variables))
	return loss

def TrainScalingModel(md, epochs, dsBatchs, LR):
	md.optimizer = AdamOptimizer(epochs*len(dsBatchs), LR)
	vmd.EnableLog()	
	TrainBatch.__init__(TrainBatch.python_function, 'TrainBatch', jit_compile=True)
	vmd.stopTraining = False
	vmd.startTime = time.time()
	for epoch in range(epochs):  
		cost = 0
		for i, bIdx in enumerate(dsBatchs):
			cost += TrainBatch(md, bIdx)
			if i%50==0: vv.DoEvents()
		random.shuffle(dsBatchs)
		if vmd.stopTraining:	break
		ReportTraining(epoch, cost, Logger)
	vmd.trainingTime = time.time() - vmd.startTime

def ToBatchList(dY, inDim, spread, batchSize):
	N = dY.shape[0]
	Y = tf.convert_to_tensor(dY)
	dX = RandomMatrix(spread, N, inDim)
	X = tf.Variable(dX, trainable=True)
	
	#sortKey = [b.Type for b in vv.Dataset.BodyListEnabled()]
	
	keyList = vv.AtlasManager.ReadValueList('Instance1', 'i19')
	if keyList is None or keyList.Count != N:
		vv.Message('Invalid sorting keys')
		vv.Return()
	sortKey = [it.Value for it in keyList]
	
	indexList = np.argsort(sortKey)
	#indexList = np.array(range(N))
	#np.random.shuffle(indexList)
	batchList = []
	for n in range(0, N, batchSize):
		batchList.append( tf.convert_to_tensor(indexList[n:n+batchSize]) )
	return X, Y, dX, batchList

def ClearSession():
	global md, X, Y, dsBatchs
	if md is None:
		return
	del X
	del Y
	for bt in dsBatchs:
		del bt
	del md
	md = None
	keras.backend.clear_session()

def NewModel(X, Y, dimList, DR, epochs, dsBatchs, LR):
	global md
	md = DeepScalingModel(X, Y, dimList, DR)
	TrainScalingModel(md, epochs, dsBatchs, LR)
	return md

#------------------------------------------------------------------------------
# Create model and train it.
#

def Main():
	global md, X, Y, inDim, DR, LR, dsBatchs

	md = NewModel(X, Y, dimList, DR, epochs, dsBatchs, LR)
	pX, pY = X.numpy(), md(X, training=False).numpy()
	meanL1 = np.sum(np.abs(pY-dY))/dY.shape[0]
	sTitle = f'Epochs/DR/LR: {epochs}/{DR:.3f}/{LR:.5f}, Mean-L1: {meanL1:.3f}'
	pX = 5000*pX+[400]
	ShowMap(pX, title = sTitle)
	ShowMap(pY, title = sTitle)
	if seqHist is not None:
		ShowHeatmap(seqHist, 'SeqHist', bodyList)

def Main3x():
	global md, X, Y, inDim, DR, LR, dsBatchs

	pX = []
	vv.Echo('Training dimension 1')
	md = NewModel(X, Y, dimList, DR, epochs, dsBatchs, LR)
	if vmd.stopTraining:	return
	pX.append(X.numpy())
	pY = md(X, training=False).numpy()

	Y =  Y - pY
	X.assign(dX)
	vv.Echo('Training dimension 2')
	md = NewModel(X, Y, dimList, DR, epochs, dsBatchs, LR)
	if vmd.stopTraining:	return
	pX.append(X.numpy())
	outY = md(X, training=False).numpy()
	pY += outY

	Y =  Y - outY
	X.assign(dX)
	vv.Echo('Training dimension 3')
	md = NewModel(X, Y, dimList, DR, epochs, dsBatchs, LR)
	if vmd.stopTraining:	return
	pX.append(X.numpy())
	outY = md(X, training=False).numpy()
	pY += outY
	
	pX = np.concatenate(pX, axis=1)

	meanErr = np.sum(np.abs(pY-dY))/dY.shape[0]
	sTitle = f'Epochs/DR/LR: {epochs}/{DR:.3f}/{LR:.5f}, Mean-L1: {meanErr:.3f}'
	pX = 5000*pX+[400]
	ShowMap(pX, title = sTitle)
	ShowMap(pY, title = sTitle)

def Main2x():
	global md, X, Y, inDim, DR, LR, dsBatchs

	pX = []
	vv.Echo('Training dimension 1')
	md = NewModel(X, Y, dimList, DR, epochs, dsBatchs, LR)
	if vmd.stopTraining:	
		return
	pX.append(X.numpy())
	pY = md(X, training=False).numpy()

	inDim = 2
	X, Y, dX, dsBatchs = ToBatchList(dY, inDim, spread, batchSize)
	Y =  Y - pY
	X.assign(dX)
	vv.Echo('Training dimension 2')
	md = NewModel(X, Y, dimList, DR, epochs, dsBatchs, LR)
	if vmd.stopTraining:	return
	pX.append(X.numpy())
	pY += md(X, training=False).numpy()
	
	pX = np.concatenate(pX, axis=1)
	meanErr = np.sum(np.abs(pY-dY))/dY.shape[0]
	sTitle = f'Epochs/DR/LR: {epochs}/{DR:.3f}/{LR:.5f}, Mean-L1: {meanErr:.3f}'
	pX = 5000*pX+[400]
	ShowMap(pX, title = sTitle)
	ShowMap(pY, title = sTitle)

#------------------------------------------------------------------------------
# Load data and settings
md, xyMap, spMap = None, None, None
vmd.reportFreq = 50
bodyList = vv.Dataset.BodyListEnabled()
dY = GetMapData()
#dY = GetDatasetData()

inDim, dimList = 1, 4*[256]
spread, batchSize, DR, LR, epochs = 0, 25, 0.125, 0.000_1, 500

for repeats in range(3):
	ClearSession()
	X, Y, dX, dsBatchs = ToBatchList(dY, inDim, spread, batchSize)
	Main2x()

'''
X, Y, dX, dsBatchs = ToBatchList(dY, inDim, spread, batchSize)
Main()

for repeats in range(3):
	ClearSession()
	X, Y, dX, dsBatchs = ToBatchList(dY, inDim, spread, batchSize)
	Main3x()

Main2x()
'''