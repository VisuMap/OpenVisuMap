# DeepScaling.pyn
#
# Do multidimensional scaling with a neural network. Reduce given table Y to 
# inDim-dimensional table X, a la NN backprobagation: X<-Y
#
#------------------------------------------------------------------------------
vv.Import('CommonUtil.pyn')
vv.Import('VsModelling.pyn')
InitVmd()
vmd.Clear()
#------------------------------------------------------------------------------

def Logger(epoch, cost):
	global xyMap
	UpdateXyMap(X.numpy())
	tm = (time.time() - vmd.startTime)/epoch
	xyMap.Title = f'Epoch: {epoch+1}, Cost: {cost:_.2f}, E/s: {tm:.3f}'

def Logger1D(epoch, cost):
	global spMap
	npSeq = X.numpy().flatten()
	if (spMap == None) or spMap.TheForm.IsDisposed:
		spMap = ShowSpectrum(npSeq)
	else:
		items = spMap.ItemList
		for i in range(items.Count):
			items[i].Value = npSeq[i]
		spMap.ResetScaling()

	pY =  md(X, training=False).numpy()
	outDim = dY.shape[1]
	outMap = Update2DMap(pY) if outDim == 2 else	UpdateXyMap(pY)

	tm = (time.time() - vmd.startTime)/epoch
	logTitle = f'Epoch: {epoch+1}, Cost: {cost:_.2f}, E/s: {tm:.3f}'
	outMap.Title = spMap.Title = logTitle

class RBFLayer1D(keras.layers.Layer):
	def __init__(self, K):
		super(RBFLayer1D, self).__init__()
		self.centers = np.array([ [k/K] for k in range(K)])
		self.beta  = 4.0*math.sqrt(K)
	def call(self, X):
		H = tf.transpose(tf.expand_dims(self.centers, -1) - tf.transpose(X))
		D = self.beta * tf.math.reduce_sum(tf.abs(H), axis=1)
		return tf.exp(-D)

def DeepScalingModel(X, Y, dimList, DR):
	P = input = keras.Input(shape=(X.shape[1]), dtype=tf.float32)
	#P = RBFLayer1D(20)(P)
	for k, dim in enumerate(dimList):
		P = DenseLayer(dim, 'leaky_relu') (P)
		if (k <= 4) and (DR>0): 
			P = keras.layers.Dropout(DR)(P)
	P = DenseLayer(Y.shape[1], 'sigmoid') (P)
	output = OutScaling(Y, gape=0.0) (P)
	md = keras.Model(input, output, name=f'Scaling')
	md.lossFct = keras.losses.MeanSquaredError()
	md.X = X   # this statment will add X to md.trainable_variables!
	return md

@tf.function(jit_compile=False)
def TrainBatch(md, bIdx):
	with tf.GradientTape() as tape:
		bX, bY = tf.gather(X, bIdx), tf.gather(Y, bIdx)
		pY = md(bX, training=True)
		loss = md.lossFct(bY, pY)
	grads = tape.gradient(loss, md.trainable_variables)
	md.optimizer.apply_gradients(zip(grads, md.trainable_variables))
	return loss

def TrainScalingModel(md, epochs, dsBatchs, LR):
	md.optimizer = AdamOptimizer(epochs*len(dsBatchs), LR)
	vmd.EnableLog()	
	TrainBatch.__init__(TrainBatch.python_function, 'TrainBatch', jit_compile=False)
	vmd.stopTraining = False
	vmd.startTime = time.time()
	logger = Logger1D if inDim == 1 else Logger
	for epoch in range(epochs):  
		cost = 0
		for i, bIdx in enumerate(dsBatchs):
			cost += TrainBatch(md, bIdx)
			if i%50==0: vv.DoEvents()
		if vmd.stopTraining:	break
		ReportTraining(epoch, cost, logger)
	vmd.trainingTime = time.time() - vmd.startTime

def ToBatchList(dY, inDim, spread, batchSize):
	N = dY.shape[0]
	Y = tf.convert_to_tensor(dY)
	dX = RandomMatrix(spread, N, inDim)
	X = tf.Variable(dX, trainable=True)
	sortKey = np.array([b.Type for b in vv.Dataset.BodyListEnabled()])
	indexList = np.argsort(sortKey)
	#indexList = np.array(range(N))
	#np.random.shuffle(indexList)
	batchList = []
	for n in range(0, N, batchSize):
		batchList.append( tf.convert_to_tensor(indexList[n:n+batchSize]) )
	return X, Y, dX, batchList

#------------------------------------------------------------------------------
# Load data and settings

spread, inDim, batchSize = 0.0, 1, 25
dimList = 6*[256]
DR, LR, epochs = 0.125, 0.00005, 1000
vmd.reportFreq = 10
xyMap = None
spMap = None
md = None

dY = GetMapData()
#dY = GetDatasetData()
X, Y, dX, dsBatchs = ToBatchList(dY, inDim, spread, batchSize)

#------------------------------------------------------------------------------
# Create model and train it.
#
#md = DeepScalingModel(X, Y, dimList, DR)
#TrainScalingModel(md, epochs, dsBatchs, LR)
#

md0 = md = DeepScalingModel(X, Y, dimList, DR)
TrainScalingModel(md0, epochs, dsBatchs, LR)

X0 = X.numpy()
Y0 = md0(X, training=False).numpy()
Y =  Y - Y0
X.assign(dX)
md1 = md = DeepScalingModel(X, Y, dimList, DR)
TrainScalingModel(md1, epochs, dsBatchs, LR)


X1 = X.numpy()
Y1 = md(X, training=False).numpy()
pX = np.concatenate([X0, X1], axis=1)
pY = Y0+Y1

pMap = Update2DMap(pY)
errMap = np.sum(np.abs(pY-dY))/dY.shape[0]
pMap.Title = f'Error: {errMap:.2f}'

'''

for repeats in range(3):
	del X
	del md			
	X = tf.Variable(dX, trainable=True)
	md = DeepScalingModel(X, Y, dimList, DR)
	TrainScalingModel(md, epochs, dsBatchs, LR)
	spMap.DuplicateView()
	vmd.logMap.NewSnapshot()
	if vmd.stopTraining:
		break

UpdateXyMap(X.numpy())
P =  md(X, training=False).numpy()
Update2DMap(dY-P)
Y0.shape

Update2DMap(P)
errMap = np.sum(np.abs(P-dY))/dY.shape[0]
Update2DMap(Y.numpy())
'''
