# TransMap.pyn
# 
# Train models to transform MDS map to another MDS maps.
#------------------------------------------------------------------------------

vv.Import('CommonUtil.pyn')
vv.Import('VsModelling.pyn')
InitVmd()
vmd.Clear()

#------------------------------------------------------------------------------

class RBFLayer1D(keras.layers.Layer):
	def __init__(self, X, K):
		super(RBFLayer1D, self).__init__()
		N = X.shape[0]
		self.centers = X[ [k*73%N for k in range(K)] ]
		self.beta  = 4.0*math.sqrt(K)/(np.max(X) - np.min(X))
	def call(self, X):
		H = tf.transpose(tf.expand_dims(self.centers, -1) - tf.transpose(X))
		D = self.beta * tf.math.reduce_sum(tf.abs(H), axis=1)
		return tf.exp(-D)

def NewTransModel(layerDims, X, Y, dropoutRatio=0.25, rbfDim=256):
	input = keras.Input(shape=(X.shape[1]))
	P = RBFLayer1D(X, rbfDim)(input)
	for k, dim in enumerate(layerDims):
		P = DenseLayer(dim, 'leaky_relu') (P)
		if (k == 0) and (dropoutRatio>0): 
			P = keras.layers.Dropout(dropoutRatio)(P)
	P = DenseLayer(Y.shape[1], 'sigmoid') (P)
	output = OutScaling(Y, gape=0.0) (P)

	md = keras.Model(input, output, name=f'TransMap')
	md.modelType = vmd.REGRESSION
	md.lossFct = keras.losses.MeanSquaredError()
	return md

def Logger(epoch, cost):
	vmd.OpenLogMap()
	P = vmd.model(vmd.ds.X, training=False).numpy()
	vmd.logMap.MoveBodiesTo(mm.ToMatrix32(P))
	err = np.mean(np.linalg.norm(vmd.ds.Y-P, axis=1))
	vmd.logMap.Title = f'Epoch: {epoch+1}, Cost: {cost:.2f},  L2: {err:.2f}'

#------------------------------------------------------------------------------
vmd.reportFreq = 50
X, Y = GetMaps('A1', 'Space 2D')
sKey = np.array([b.Type for b in vv.Dataset.BodyListEnabled()])
vmd.ds = TrainDataset(X, Y, batchSize=25, shuffle=False, sortKey=sKey)

rbfs,dimList,DropR,LR,epochs = 64*64, [1000]+5*[200], 0.0, 0.001, 5000

vmd.model = NewTransModel(dimList, X, Y, DropR, rbfDim=rbfs)
TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)

'''
for LR in [0.0005, 0.0005, 0.0005]:
	del vmd.model
	vmd.model = NewTransModel(dimList, X, Y, DropR, rbfDim=rbfs)
	TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)
	vv.Echo(vmd.logMap.Title + f', LR: {LR}')
ShowPred(vmd.model, X, Y)
ShowPred(vmd.model, GetMaps('A1'), refMapName='A1')
'''
