# TransMap.pyn
# 
# Train models to transform MDS map to another MDS maps.
#------------------------------------------------------------------------------

vv.Import('CommonUtil.pyn')
vv.Import('VsModelling.pyn')
InitVmd()
vmd.Clear()

#------------------------------------------------------------------------------

class RBFLayer(keras.layers.Layer):
	def __init__(self, X, K):
		super(RBFLayer, self).__init__()
		N = X.shape[0]
		self.centers = X[ [k*73%N for k in range(K)] ]
		s = (np.max(X) - np.min(X))/(4.0*math.sqrt(K))
		self.beta  = 1.0/(2*s*s)
	def call(self, X):
		# the following block is from 
		#   https://github.com/PetraVidnerova/rbf_for_tf2/blob/master/rbflayer.py
		H = tf.transpose(tf.expand_dims(self.centers, -1) - tf.transpose(X))
		D = self.beta * tf.math.reduce_sum(H**2, axis=1)
		return tf.exp(-D)

class RBFLayer2(keras.layers.Layer):
	def __init__(self, X, K):
		super(RBFLayer2, self).__init__()
		N = X.shape[0]
		self.centers = X[ [k*73%N for k in range(K)] ]
		self.beta  = 4.0*math.sqrt(K)/(np.max(X) - np.min(X))
	def call(self, X):
		H = tf.transpose(tf.expand_dims(self.centers, -1) - tf.transpose(X))
		D = self.beta * tf.math.reduce_sum(tf.abs(H), axis=1)
		return tf.exp(-D)

def NewTransModel(layerDims, X, Y, dropoutRatio=0.25, rbfDim=256):
	md = keras.Sequential()
	md.add( keras.Input(shape=(X.shape[1])) )
	md.add( RBFLayer2(X, rbfDim) )
	for k, dim in enumerate(layerDims):
		md.add( DenseLayer(dim, 'leaky_relu') )
		if (k == 0) and (dropoutRatio>0): 
			md.add(keras.layers.Dropout(dropoutRatio))
	md.add( DenseLayer(Y.shape[1], 'sigmoid') )
	md.add( OutScaling(Y, gape=0.0) )
	md.modelType = vmd.REGRESSION
	md.lossFct = keras.losses.MeanSquaredError()
	return md

def Logger(epoch, cost):
	vmd.OpenLogMap()
	P = vmd.model(vmd.ds.X, training=False).numpy()
	vmd.logMap.MoveBodiesTo(mm.ToMatrix32(P))
	err = np.mean(np.linalg.norm(vmd.ds.Y-P, axis=1))
	vmd.logMap.Title = f'Epoch: {epoch+1}, Cost: {cost:.2f},  L2: {err:.2f}'

#------------------------------------------------------------------------------

vmd.reportFreq = 10
X, Y = GetMaps('A2', '2D')
sKey = np.array([b.Type for b in vv.Dataset.BodyListEnabled()])
vmd.ds = TrainDataset(X, Y, batchSize=25, shuffle=False, sortKey=sKey)

rbfs,dimList,DropR,LR,epochs = 1600, [200, 100, 100, 100, 100], 0.0,0.0005,3000

vmd.model = NewTransModel(dimList, X, Y, DropR, rbfDim=rbfs)
TrainModel(vmd, epochs=epochs, initial_lr=LR, logCallback=Logger)

#ShowPred(vmd.model, GetMapData())
