import mygene
from pprint import pformat
import math

mg = mygene.MyGeneInfo()

g = mg.getgene('ENSG00000205542')
g = mg.getgene('ENSG00000205542', field='map_location')
g = mg.getgene('ENSG00000205542',  field='exons')
g = mg.getgene('ENSG00000000003',  field='symbol')
g = mg.getgene('ENSG00000205542', field='accession')
print(pformat(g['accession']['protein']))

ds = vv.Dataset
if ds.Name != 'Gene Features': 
	vv.Return(1)
gIds = [ x.Id for x in ds.BodyList ]

#-----------------------

for row, b in enumerate(ds.BodyList):
	type = ds.GetDataAt(row, 4)
	if type == 'protein_coding':
		g = mg.getgene(b.Id, field='accession')
		if 'accession' in g and 'protein' in g['accession']:
			pAcc = ','.join(g['accession']['protein'])
			ds.SetDataAt(row, 17, pAcc)

#-----------------------


gs = mg.getgenes(['ENSG00000205542','ENSG00000000003'], field='exons')
print(pformat(gs[1000:1003]))

vv.GroupManager.SetGroupLabels('Xq', GenesFromChromArm('Xq'))

'''
	# fill the ChrName column with data from Location column.
	ds = vv.Dataset
	cIdx1 = ds.IndexOfColumn('ChrName')
	cIdx2 = ds.IndexOfColumn('Location')
	for k, b in enumerate(ds.BodyList):
		chr = ds.GetDataAt(k, cIdx1)
		if chr==None or len(chr) == 0:			
			loc = ds.GetDataAt(k, cIdx2)
			if len(loc) <= 1:
				continue
			fs = loc.split('p')
			if len(fs) > 1:
				ds.SetDataAt(k, cIdx1, fs[0])
			else:
				fs = loc.split('q')
				if len(fs) > 1:
					ds.SetDataAt(k, cIdx1, fs[0])
	ds.CommitChanges()

'''

#-----------------------
def GetRibosomeRNA():
	ds = vv.Folder.ReadDataset( 'Gene Features' )
	cIdx = ds.IndexOfColumn('Symbol')
	rpList = []
	for k, b in enumerate(ds.BodyList):
		sym = ds.GetDataAt(k, cIdx)
		if sym.startswith('RPS') or sym.startswith('RPL'):
			rpList.append(b.Id)
	return rpList

vv.GroupManager.SetGroupLabels('Ribosomes', GetRibosomeRNA())

#-----------------------
def GetLncRNA():
	ds = vv.Folder.ReadDataset( 'Gene Features' )
	cIdx = ds.IndexOfColumn('Location')
	cType = ds.IndexOfColumn('GeneType')
	id2Chr = {}
	for k, b in enumerate(ds.BodyList):
		gType = ds.GetDataAt(k, cType)
		if gType != 'lncRNA':
			continue
		loc = ds.GetDataAt(k, cIdx)
		pqIdx = max(loc.find('p'), loc.find('q'))
		if pqIdx > 0:
			id2Chr[b.Id] = loc[:pqIdx]
	gsSorted = dict(sorted(id2Chr.items(), key=lambda p:p[1]))
	gcList = []
	preChr = '???'
	for g, chr in gsSorted.items():
		if len(chr) < 1: 
			continue
		if chr != preChr:
			gcList.append(f'#{chr}')
		gcList.append(g)
		preChr = chr
	return gcList

#vv.GroupManager.SetGroupLabels('lncRNA_ByChr', GetLncRNA())
			

def GetTissueGenes():
	dsName = 'Gene Features'
	ds = vv.Dataset if vv.Dataset.Name == dsName  else vv.Folder.ReadDataset( dsName )
	cIdx = ds.IndexOfColumn('TissueList')
	tg = {}
	for k, b in enumerate(ds.BodyList):
		ts = ds.GetDataAt(k, cIdx).split(';')
		for  t in ts:
			if len(t) < 2:
				continue
			if not t in tg:
				tg[t] = set()
			tg[t].add(b.Id)
	for t in tg:
		print(f'{t}: {len(tg[t])}')
	coreG, allG = tg['lung'], set()
	for t in tg: 
		allG = allG | tg[t]
		coreG = coreG & tg[t]
	print('Core and All:', len(coreG), len(allG))
	return tg, coreG, allG

tg, coreG, allG = GetTissueGenes()
enabled = [b.Id for b in vv.Dataset.BodyListEnabled()]
enabled = set(enabled)
vv.GroupManager.SetGroupLabels('pancreas', list(enabled & tg['pancreas']) )
for ti in tg:
	vv.GroupManager.SetGroupLabels(ti, list(tg[ti]))
	

#-----------------------

def GenesFromChromArm(armName):
	dsName = 'Gene Features'
	ds = vv.Dataset if vv.Dataset.Name == dsName  else vv.Folder.ReadDataset( dsName )
	idDic = {}
	cIdx = ds.IndexOfColumn('Location')
	for k, b in enumerate(ds.BodyList):
		p = ds.GetDataAt(k, cIdx)
		if p.startswith(armName):
			idx = len(armName)
			idDic[b.Id] = float(p[idx:])
	idList = sorted(idDic.items(), key=lambda item: item[1])
	return [p[0] for p in idList]

#-----------------------

def VectorizeSummary():
	ds = vv.Dataset
	import numpy as np
	#cIdx = ds.IndexOfColumn('Summary')
	cIdx = ds.IndexOfColumn('TissueList')
	idList = []
	smList = []
	for k, b in enumerate(ds.BodyList):
		sm = ds.GetDataAt(k, cIdx)
		if b.Disabled: continue
		if len(sm) > 3:
			idx = sm.rfind('[provided ')
			if idx > 0:
				sm = sm[:idx]
			idx = sm.rfind('[supplied ')
			if idx > 0:
				sm = sm[:idx]		
			idList.append(b.Id)
			smList.append(sm)

	#from sklearn.feature_extraction.text import TfidfVectorizer
	#vectorizer = TfidfVectorizer(sublinear_tf=True)
	from sklearn.feature_extraction.text import CountVectorizer
	vectorizer = CountVectorizer()

	features = vectorizer.fit_transform(smList)
	feature_names = vectorizer.get_feature_names_out()
	nt = features.toarray().astype(np.float32)	
	nt = mm.ToTable(nt)
	for col, name in enumerate(feature_names):
		nt.ColumnSpecList[col].Id = name
	for row in range(nt.Rows):
		nt.RowSpecList[row].Id = idList[row]
	nt.ShowHeatMap()


#-----------------------

gs = mg.getgenes(gIds,  field = 'genomic_pos')
cIdx = ds.IndexOfColumn('ChrName')
for g in gs:
	if 'notfound' in g:
		continue
	p = g['genomic_pos']
	if type(p) is list:
		p = p[0]
	gId = p['ensemblgene']
	rowIdx = ds.IndexOfRow(gId)
	if rowIdx >=0 :
		ds.SetDataAt(rowIdx, cIdx, p['chr'])

#-----------------------

gs = mg.getgenes(gIds,  field = 'genomic_pos')
cIdxS = ds.IndexOfColumn('PosStart')
cIdxE = ds.IndexOfColumn('PosEnd')
cIdxSs = ds.IndexOfColumn('Sense')
for k, g in enumerate(gs):
	if 'notfound' in g:
		continue
	p = g['genomic_pos']
	if type(p) is list:
		p = p[0]
	gId = p['ensemblgene']
	rowIdx = ds.IndexOfRow(gId)
	strand = 'p' if p['strand'] == 1 else 'n'
	if rowIdx >=0 :
		ds.SetValueAt(rowIdx, cIdxS, p['start'])
		ds.SetValueAt(rowIdx, cIdxE, p['end'])
		ds.SetStringAt(rowIdx, cIdxSs, strand)

#-----------------------

gs = mg.getgenes(gIds,  field = 'ensembl')
cIdx = vv.Dataset.IndexOfColumn('GeneType')
for k, g in enumerate(gs):
	if 'notfound' in g:
		print(k, 'NotFound')
		continue
	p = g['ensembl']
	if type(p) is list:
		p = p[0]
	rowIdx = vv.Dataset.IndexOfRow(p['gene'])
	if rowIdx >=0 :
		vv.Dataset.SetStringAt(rowIdx, cIdx, p['type_of_gene'])

gs = mg.getgenes(gIds,  field = 'exons')
cIdx = vv.Dataset.IndexOfColumn('Span')
for k, g in enumerate(gs):
	if 'exons' in g:
		p = g['exons']
		if type(p) is list:
			p = p[0]
		if 'query' in g:
			rowIdx = vv.Dataset.IndexOfRow(g['query'])
			if rowIdx >= 0:
				vv.Dataset.SetValueAt(rowIdx, cIdx, int(p['txend']) - int(p['txstart']) )

gs = mg.getgenes(gIds,  field = 'exons')
cIdx = vv.Dataset.IndexOfColumn('ExonCount')
for k, g in enumerate(gs):
	if 'exons' in g:	
		p = g['exons']
		if type(p) is list:
			p = p[0]
		posList = p['position']
		if 'query' in g:
			rowIdx = vv.Dataset.IndexOfRow(g['query'])
			if rowIdx >= 0:
				vv.Dataset.SetValueAt(rowIdx, cIdx, len(posList) )

gs = mg.getgenes(gIds,  field = 'exons')
cIdx = vv.Dataset.IndexOfColumn('SizeNT')
for k, g in enumerate(gs):
	if 'exons' not in g:
		continue
	p = g['exons']
	if type(p) is list:
		p = p[0]
	posList = p['position']
	sz =  [p2[1] - p2[0] for p2 in posList] 
	if 'query' in g:
		rowIdx = vv.Dataset.IndexOfRow(g['query'])
		if rowIdx >= 0:
			vv.Dataset.SetValueAt(rowIdx, cIdx, sum(sz))

gs = mg.getgenes(gIds,  field = 'summary')
cIdx = vv.Dataset.IndexOfColumn('Summary')
for k, g in enumerate(gs):
	if 'summary' not in g:
		continue
	p = g['summary']
	if 'query' in g:
		rowIdx = vv.Dataset.IndexOfRow(g['query'])
		if rowIdx >= 0:
			vv.Dataset.SetStringAt(rowIdx, cIdx, p)

gs = mg.getgenes(gIds,  field = 'pantherdb')
cIdx = vv.Dataset.IndexOfColumn('OrthologCount')
for k, g in enumerate(gs):
	if 'pantherdb' in g:
		p = g['pantherdb']['ortholog']
		if 'query' in g:
			rowIdx = vv.Dataset.IndexOfRow(g['query'])
			if rowIdx >= 0:
				vv.Dataset.SetValueAt(rowIdx, cIdx, len(p))

gs = mg.getgenes(gIds,  field = 'homologene')
cIdx = vv.Dataset.IndexOfColumn('HomologeneCount')
for k, g in enumerate(gs):
	if 'homologene' not in g:
		continue
	p = g['homologene']['genes']
	if k < len(gIds):
		if 'query' in g:
			rowIdx = vv.Dataset.IndexOfRow(g['query'])
			if rowIdx >= 0:
				vv.Dataset.SetValueAt(rowIdx, cIdx, len(p))
	else:
		print(k, pprint.pformat(p))

gs = mg.getgenes(gIds,  field = 'symbol')
cIdx = vv.Dataset.IndexOfColumn('Symbol')
for k, g in enumerate(gs):
	if 'symbol' in g:
		p = g['symbol']
		if k < len(gIds):
			rowIdx = vv.Dataset.IndexOfRow(g['query'])
			if rowIdx >= 0:
				vv.Dataset.SetStringAt(rowIdx, cIdx, p)

cIdx = vv.Dataset.IndexOfColumn('Size/Span Ratio')
ds = vv.Dataset
for k in range(ds.Rows):
	sp = float(ds.GetValueAt(k, 6))
	sz = float(ds.GetValueAt(k, 7))
	if sp != 0:
		ds.SetValueAt(k, cIdx, sz/sp)

gs = mg.getgenes(gIds,  field = 'map_location')
cIdx = ds.IndexOfColumn('Location')
for k, g in enumerate(gs):
	if ('map_location' in g) and ('query' in g):
		loc = g['map_location']
		rowIdx = ds.IndexOfRow(g['query'])
		if rowIdx >= 0:
			ds.SetStringAt(rowIdx, cIdx, loc)

ds.CommitChanges()
vv.Map.Redraw()


