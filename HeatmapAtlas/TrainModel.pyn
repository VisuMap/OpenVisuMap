# TrainModel.pyn
#
vv.Import('ModellingHelp.pyn')
import time

if mdc.NN is not None:
    del mdc.NN
    mdc.NN = None

mapDs = MapDataset()
inDim, outDim = mapDs.X.shape[1], mapDs.Y.shape[1]
mdc.NN = NeuralNetwork([inDim,  100, 50,  outDim])
mdc.EnableLog()
mdc.epochs = 500

def TrainModel(NN, mapDs):	
	batchDs = mapDs.GetLoader(batch_size=100)
	optimizer = torch.optim.Adagrad(NN.parameters(), lr=0.005)
	loss_func = torch.nn.MSELoss()	
	mdc.stopTraining = False
	startTime = time.time()
	for t in range(mdc.epochs):
		cost = 0
		for bX, bY in batchDs:
			loss = loss_func(NN(bX), bY)
			optimizer.zero_grad()
			loss.backward()
			optimizer.step()
			cost += loss.data.cpu().numpy()
			vv.Sleep(0)
		cost /= len(batchDs)
		if ((t+1)%mdc.reportFreq == 0) and (mdc.log != None):
			mdc.log.AddStep(float(cost))
			mdc.log.Title = 'Eochs: ' + str(t+1)
		if mdc.stopTraining:
			break
	mdc.trainingTime = time.time() - startTime
TrainModel(mdc.NN, mapDs)
ShowPred(mdc.NN, mapDs.XX, mapDs.Y)
