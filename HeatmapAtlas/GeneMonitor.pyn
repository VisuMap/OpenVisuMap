import math
import numpy as np

def NewTsne(epochs, PP, EX):
	mds = New.TsneMap()
	mds.MaxLoops = epochs
	mds.PerplexityRatio = PP
	mds.InitialExaggeration = EX
	mds.FinalExaggeration = 1.0
	mds.ExaggerationSmoothen = True
	mds.RefreshFreq = 50
	mds.Is3D = False
	mds.AutoNormalizing = True
	mds.AutoScaling = False
	mds.Repeats = 1
	mds.ReadOnly = True
	mds.Show()
	return mds

def StartMonitor(nt, map=None):
	bv = New.BarView(nt.ColumnSpecList)
	bv.Horizontal = True
	bv.BarLabelType = 4
	bv.AutoScaling = False
	bv.LowerLimit = 0
	bv.UpperLimit = 4.0
	bv.BaseLineType = 0
	for item in bv.ItemList: item.Group = 4
	bv.ReadOnly = True
	bv.Show()
	bv.TheForm.Width = 400
	bv.TheForm.Height = 1000
	vv.EventManager.OnItemsSelected("@OnSelected()", bv, nt)	
	if map == None: 
		map = vv.MapView
	mk = map.ShowMarker(True)
	mk.AnimationPause = 10
	mk.AnimationStepSize = 3
	mk.LoopPath = False
	mk.NoLooping = False
	mk.MarkerColor = New.Color('Yellow')
	mk.Left = 200
	mk.Top = 200
	mk.Width = 50
	mk.Height = 15
	mk.SpinningMarker()

def OnSelected():
	nt = vv.EventSource.Argument.SelectRowsById(vv.SelectedItems)
	if nt.Rows==0:
		return;
	nt.ColumnMean(pp.ItemList)
	maxV = 1.5
	for item in pp.ItemList:
		if item.Value > maxV:
			item.Group = 0
	pp.Redraw()

def StartTracing(idMon, map=None):
	StartMonitor( vv.GetNumberTableView(True).SelectColumnsById(idMon), map )

def LoopList(gList, epochs=1000, PP=0.05, SS=100, EX=4.0): 
	if type(gList) is not list: 
		gList = [ gList ]
	mds = NewTsne(epochs, PP, EX)
	for listName in gList:
		idList = list(vv.GroupManager.GetGroupLabels(listName))	
		L = len(idList)
		for n in range(0, L, SS):
			n2 = min(L, n + SS)
			mds.RunWithFeatures(idList[n:n2])
			if not mds.Completed: vv.Return(1)
			vv.SelectedItems = None
			map = New.MapSnapshot().Show()
			map.Resize(0, 0, 1000, 700)
			map.Title = f'SQ:{listName}; RG:{n}-{n2};'
			map.Description = map.Title + f' EP:{epochs}; PP:{PP}; SS:{SS}; EX:{EX}; DS:{vv.Dataset.Name}'
	mds.Close()

def PaserInfo(desc):	
	info = {}
	for s in desc.split(';'):
		fs = s.strip().split(':')
		if len(fs) < 2: 
			continue
		info[fs[0]] = fs[1]
	return info

def ExtractFeatures(pMap):
	info = PaserInfo(pMap.Description)
	if 'Ids' in info:
		return info['Ids'].split('|')
	sq = info['SQ']
	fs = info['RG'].split('-')
	idMon = 	list(vv.GroupManager.GetGroupLabels(sq))
	n, n2 = int(fs[0]), int(fs[1])
	idMon = idMon[n:n2]
	return idMon

def ReEmbedding(pMap):
	info = PaserInfo(pMap.Description)
	epochs = int(info['EP'])
	PP = float(info['PP'])
	EX = float(info['EX'])
	mds = NewTsne(epochs, PP, EX)
	mds.RunWithFeatures(ExtractFeatures(pMap))
	if not mds.Completed: return
	vv.SelectedItems = None
	map = New.MapSnapshot().Show()
	map.Resize(0, 0, 1000, 700)
	map.Title, map.Description = pMap.Title, pMap.Description
	mds.Close()

def MonitorMap(pMap):
	StartTracing(ExtractFeatures(pMap), pMap)

def ShowData(pMap):
	nt = vv.Dataset.GetNumberTableEnabled().SelectColumnsById(ExtractFeatures(pMap))
	hm = nt.ShowHeatMap()
	hm.Title = f'Data Dimension: {nt.Rows}x{nt.Columns}'

def Config3DMap(m3d):
	m3d.ReadOnly = True
	m3d.GlyphOpacity = 0.5
	m3d.GlyphSize = 0.45
	m3d.ShowBoundingBox = True
	m3d.BackgroundColor = New.Color(0,0,64)
	m3d.ResetView(4); 
	m3d.Show()
	vv.Sleep(1000)
	for p in [2,0,2]:	m3d.ResetView(p);	vv.Sleep(750)
	m3d.RotateXYZ(-0.025, 0, 0, 10, 40); vv.Sleep(750)
	m3d.RotateXYZ(0, 0.005, 0, int(2*math.pi/0.005), 15)

def ShowExpress3D(pMap):
	nt = vv.GetNumberTableView(True).SelectColumnsById(ExtractFeatures(pMap))
	tb = mm.ToNumpy(nt)
	tb = np.sqrt((tb**2).sum(axis=1))
	MAXV = 500.0
	maxV = min(MAXV, tb.max())
	tb = MAXV/maxV*tb
	m3d = New.Map3DView(pMap.BodyListEnabled())
	m3d.MapDepth = MAXV
	for k, b in enumerate(m3d.BodyList): b.Z = tb[k]
	Config3DMap( m3d )

def GetGeneList(chrName, strand):
	ds = vv.Folder.ReadDataset("Gene Features")
	gList = []
	for k in range(ds.Rows):
		if ds.GetDataAt(k, 4) != 'protein_coding':
			continue
		id = ds.BodyList[k].Id
		chr = ds.ValueAtAsString(k, 0)
		sense = ds.ValueAtAsString(k, 1)
		pos = int(ds.ValueAtAsDouble(k, 2))
		if (chr,sense) == (chrName,strand):
			gList.append((id, pos))
	gList.sort(key=lambda x:x[1])
	return [p[0] for p in gList]

def EmbedGenes(idMon, epochs=1000, PP=0.05, EX=4.0):
	mds = NewTsne(epochs, PP, EX)
	mds.RunWithFeatures(idMon)
	if not mds.Completed: vv.Return(0)
	mds.Close()
	vv.SelectedItems = None
	map = New.MapSnapshot().Show()
	sId = '|'.join(idMon)
	map.Title = f'Features:{len(idMon)}'
	map.Description = f'EP:{epochs}; PP:{PP}; EX:{EX}; DS:{vv.Dataset.Name}; Ids:{sId}'

def OnGenesSelected():
	mp = pp
	selected = vv.SelectedItems
	nt = vv.EventSource.Argument.SelectColumnsById(selected)
	if nt.Columns == 0:
		return
	mp.Title = f'Genes: {';'.join(selected)}'
	tb = mm.ToNumpy(nt)
	tb = (tb**2).sum(axis=1)
	minV = 9.0
	stepSize = (tb.max() - minV)/16
	bList = mp.BodyListEnabled()
	for k, b in enumerate(bList):
		v = tb[k] - minV
		if v < 0:
			b.Type = 0
			b.Hidden = True
		else:
			b.Type = min(15, int( v/stepSize ))
			b.Hidden = False
	mp.ShowMarker(False)
	mp.RedrawBodiesType()

def ShowActiveCells(pMap): 
	pMap.SelectedItems = None
	mp = pMap.NewSnapshot()
	mp.HiddenBodySize = 2
	mp.HiddenBodyColor = New.Color('Red')
	for b in mp.BodyList: b.Hidden = True
	mp.GlyphSet = 'Ordered Glyphs'
	mp.GlyphSize = 0.75
	mp.GlyphOpacity = 0.75
	mp.ReloadGlyphSet()
	mp.RedrawAll()
	nt = vv.GetNumberTableView(True).SelectColumnsById(ExtractFeatures(pMap))
	vv.EventManager.OnItemsSelected("@OnGenesSelected()", mp, nt)

'''
LoopList('Chr5N', epochs=2000, PP=0.05, SS=50)

x0, y0 = 50, 50
for ds in ['TCellBreast', 'Perivascular', 'Vascular-C']:
	vv.Folder.OpenDataset(ds)
	LoopList(['Chr5P', 'Chr5N'], epochs=2000, PP=0.05, SS=50)
	vv.AtlasManager.OpenAtlas('Chr5').CaptureAllOpenViews(x0, y0).Close()
	y0 += 150

LoopList(['ChrXP', 'ChrXN'], epochs=2000, PP=0.05, SS=50)

LoopList(['LowExon-Protein', 'HiExon-Protein', 'ShortTranscript', 'LongTranscript'], epochs=2000, SS=100)
vv.AtlasManager.OpenAtlas('Protein2').CaptureAllOpenViews().Close()

gList = ['Chr1P', 'Chr1N', 'Chr2P', 'Chr2N', 'Chr3P', 'Chr3N', 'Chr4P', 'Chr4N', 'Chr5P', 'Chr5N']: 
LoopList(gList, SS=50)

idMon = [ cs.Id for cs in vv.Dataset.ColumnSpecList ]

vv.GroupManager.SetGroupLabels('Chr1P', GetGeneList('1', 'p'))
vv.GroupManager.SetGroupLabels('Chr1N', GetGeneList('1', 'n'))

nt = cs.DeNormalize(vv.GetNumberTableView(True).Clone())
nt.ShowHeatMap()

#----------------------------------

Code to install some useful context menus:

@#MenuLabels Monitor ShowData ReEmbedding 3D-Expression
vv.Import('GeneMonitor.pyn')
match vv.EventSource.Item:
	case 'Monitor':
		MonitorMap(pp)
	case 'ShowData':
		ShowData(pp)
	case 'ReEmbedding':
		ReEmbedding(pp)
	case '3D-Expression':
		ShowExpress3D(pp)

@#MenuLabels CaptureMaps EmbedSelected
vv.Import('GeneMonitor.pyn')
match vv.EventSource.Item:
	case 'CaptureMaps':
		vv.AtlasManager.OpenAtlas().CaptureAllOpenViews()
	case 'EmbedSelected':
		EmbedGenes(vv.SelectedItems, epochs=2000, EX=4.0, PP=0.05)

'''