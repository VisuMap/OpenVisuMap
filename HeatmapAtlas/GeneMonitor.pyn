import math
import numpy as np

mpWidth, mpHeight = 500, 350

cs = New.CsObject('''
public INumberTable Transform(INumberTable nt) {
	MT.Loop(0, nt.Rows, row=>{
		  double[] R = nt.Matrix[row] as double[];
        for(int col=0; col<nt.Columns; col++)
            //R[col] = Math.Sqrt( Math.Abs(Math.Exp(R[col]) - 1) );
				//R[col] = Math.Exp(R[col]) - 1.0;
				R[col] = Math.Log(1.0 + R[col]);
	});
	return nt;
}''')

def transform(nt):
	return nt
	#return cs.Transform(nt)

def NewTsne(epochs=1000, PP=0.05, EX=4.0, ex=1.0):
	mds = New.TsneMap()
	mds.MaxLoops = epochs
	mds.PerplexityRatio = PP
	mds.InitialExaggeration = EX
	mds.FinalExaggeration = ex
	mds.ExaggerationSmoothen = True
	mds.RefreshFreq = 50
	mds.Is3D = False
	mds.AutoNormalizing = True
	mds.AutoScaling = False
	mds.Repeats = 1
	mds.ReadOnly = True
	mds.Show()
	return mds

def ConfigBarView(bv, nt):
	bv.Horizontal = False
	bv.BarLabelType = 4
	bv.AutoScaling = False
	bv.LowerLimit = 0
	bv.UpperLimit = 2.0
	bv.BaseLineType = 0
	for item in bv.ItemList: 
		item.Group = 4
	bv.ReadOnly = True
	bv.Show()
	bv.Resize(0, 0, 1000, 300)
	vv.EventManager.OnItemsSelected("@OnSelected()", bv, nt)	
	bv.AddContextMenu("Atlas/Gene Detail", "@ShowGeneDetails()")

def ConfigMarker(mk):
	mk.AnimationPause = 25
	mk.AnimationStepSize = 1
	mk.LoopPath = False
	mk.NoLooping = False
	mk.MarkerColor = New.Color('Yellow')
	mk.Left = 200
	mk.Top = 200
	mk.Width = 70
	mk.Height = 12
	mk.SpinningMarker()

def Config3DMap(m3d):
	m3d.ReadOnly = True
	m3d.Resize(0, 0, 1000, 800)
	m3d.GlyphOpacity = 0.5
	m3d.GlyphSize = 0.45
	m3d.ShowBoundingBox = True
	m3d.ShowPerformance = False
	m3d.BackgroundColor = New.Color(0,0,64)
	m3d.ResetView(4); 
	m3d.Show()
	vv.Sleep(1000)
	for p in [2,0,2]:	m3d.ResetView(p);	vv.Sleep(750)
	m3d.RotateXYZ(-0.025, 0, 0, 10, 40); vv.Sleep(750)
	m3d.RotateXYZ(0, 0.005, 0, int(2*math.pi/0.005), 15)

def StartMonitor(nt, map=None):
	ConfigBarView(New.BarView(nt.ColumnSpecList), nt)
	if map == None: 
		map = vv.MapView
	ConfigMarker(map.ShowMarker(True))

def OnSelected():
	nt = vv.EventSource.Argument.SelectRowsById(vv.SelectedItems)
	bv = pp
	if nt.Rows==0:
		return
	nt.ColumnMean(bv.ItemList)
	maxV = max([item.Value for item in bv.ItemList])	
	minStep = 0
	for k in range(10):
		v = 0.25 * (2 ** k)
		if v > maxV:
			minStep = v
			break	
	pp.UpperLimit = math.ceil(maxV/minStep) * minStep
	maxV = 0.25 * pp.UpperLimit
	for item in bv.ItemList:
		item.Group = 0 if item.Value > maxV else 4
	bv.Redraw()

def StartTracing(idMon, map=None):
	nt = vv.GetNumberTableView(True).SelectColumnsById(idMon)
	nt = transform(nt)
	StartMonitor(nt, map)

def LoopList(gList, epochs=1000, PP=0.05, SS=100, EX=4.0, ex=1.0, ss=0, saveTo=None): 
	if type(gList) is not list: 
		gList = [ gList ]
	mds = NewTsne(epochs, PP, EX, ex)
	nt0 = vv.GetNumberTableView(True)
	for listName in gList:
		idList = vv.GroupManager.GetGroupLabels(listName)
		if idList == None:
			vv.Message(f'Cannot load list "{listName}"')
			vv.Return(1)
		idList = list(idList)	
		L = len(idList)
		for n in range(ss, L, SS):
			n2 = min(L, n + SS)
			nt = nt0.SelectColumnsById(idList[n:n2])
			nt = transform(nt)
			vv.Map.Description = f'SQ:{listName};RG:{n}-{n2};SS:{SS};EP:{epochs};PP:{PP};EX:{EX};ex:{ex};DS:{vv.Dataset.Name}'
			mds.ChangeTrainingData(nt).Reset().Start()
			if not mds.Completed:
				vv.Return(1)
			vv.SelectedItems = None
			mp = New.MapSnapshot().Show()
			mp.Resize(0, 0, mpWidth, mpHeight)
			mp.GlyphSize = 0.25
			mp.GlyphOpacity = 0.75
			mp.ShowMarker(False)
			mp.Title = f'SQ:{listName};RG:{n}-{n2};'
			mp.Description = vv.Map.Description
	mds.Close()
	if saveTo != None:
		SaveToAtlas(saveTo)

def LoopList2(dsList, gList, saveTo=None, epochs=1000, PP=0.05, SS=50, EX=4.0, ex=1.0):
	x0, y0 = 50, 50
	for ds in dsList:
		if ds != vv.Dataset.Name:
			vv.Folder.OpenDataset(ds)
		LoopList(gList, epochs=epochs, PP=PP, SS=SS, EX=EX, ex=ex)
		if saveTo != None:
			SaveToAtlas(saveTo, x0, y0)
		y0 += 150

def ParseInfo(desc):	
	info = {}
	for s in desc.split(';'):
		fs = s.strip().split(':', 1)
		if len(fs) < 2: 
			continue
		info[fs[0]] = fs[1]
	if 'Ids' in info:
		info['Ids'] = info['Ids'].split('|')
	return info

def ExtractFeatures(pMap):
	info = ParseInfo(pMap.Description)
	if 'Ids' in info:
		return info['Ids']
	sq = info['SQ']
	fs = info['RG'].split('-')
	idMon = 	list(vv.GroupManager.GetGroupLabels(sq))
	n, n2 = int(fs[0]), int(fs[1])
	idMon = idMon[n:n2]
	return idMon

def ReEmbedding(pMap):
	CheckDataset(pMap)
	info = ParseInfo(pMap.Description)
	epochs = int(info['EP'])
	PP = float(info['PP'])
	EX = float(info['EX'])
	ex = float(info['ex']) if 'ex' in info else 1.0
	mpTitle, mpDescription = pMap.Title, pMap.Description
	mds = NewTsne(epochs, PP, EX, ex)
	nt = vv.GetNumberTableView(True).SelectColumnsById(ExtractFeatures(pMap))
	nt = transform(nt)
	mds.ChangeTrainingData(nt).Reset().Start()
	if not mds.Completed: return
	vv.SelectedItems = None
	map = New.MapSnapshot().Show()
	map.Resize(0, 0, mpWidth, mpHeight)
	map.Title, map.Description = mpTitle, mpDescription
	mds.Close()
	vv.Map.Description = mpDescription

def MonitorMap(pMap):
	CheckDataset(pMap)
	StartTracing(ExtractFeatures(pMap), pMap)

def ShowGeneDetails():
	fm = vv.EventSource.Form
	if (fm.Name == 'HeatMap') and not fm.AttributeMode:
		return
	if fm.SelectedItems.Count < 1:
		return
	gId = fm.SelectedItems[0]
	vv.StartProcess(f'https://useast.ensembl.org/Human/Search/Results?q={gId};site=ensembl;facet_species=Human')
	vv.StartProcess(f'https://www.ncbi.nlm.nih.gov/gene/?term={gId}')

def ShowData(pMap):
	CheckDataset(pMap)
	nt = vv.Dataset.GetNumberTableEnabled().SelectColumnsById(ExtractFeatures(pMap))
	nt = transform(nt)
	hm = nt.ShowHeatMap()
	hm.Title = f'Data Dimension: {nt.Rows}x{nt.Columns}'
	hm.Resize(0, 0, 1015, 500)
	hm.ReadOnly = True
	hm.SelectionMode = 1
	hm.AddContextMenu("Atlas/Gene Detail", "@ShowGeneDetails()")

def ShowExpress3D(pMap):
	CheckDataset(pMap)
	nt = vv.GetNumberTableView(True).SelectColumnsById(ExtractFeatures(pMap))
	nt = transform(nt)
	tb = mm.ToNumpy(nt)
	tb = np.sqrt((tb**2).sum(axis=1))
	MAXV = 500.0
	maxV = min(MAXV, tb.max())
	tb = MAXV/maxV*tb
	m3d = New.Map3DView(pMap.BodyListEnabled())
	m3d.MapDepth = MAXV
	m3d.Title = f'Maximum Expression: {maxV:.3g}'
	for k, b in enumerate(m3d.BodyList): b.Z = tb[k]
	Config3DMap( m3d )

def GetGeneList(chrName):
	ds = vv.Folder.ReadDataset("Gene Features")
	gList = []
	for k in range(ds.Rows):
		if ds.ValueAtAsString(k, 4) != 'protein_coding': continue
		if not chrName == 'MT':
			if ds.ValueAtAsDouble(k, 6) == 0 : continue
			if ds.ValueAtAsDouble(k, 7) == 0 : continue
		id = ds.BodyList[k].Id
		chr = ds.ValueAtAsString(k, 0)
		pos = int(ds.ValueAtAsDouble(k, 2))
		if chr == chrName:
			gList.append((id, pos))
	gList.sort(key=lambda x:x[1])
	return [p[0] for p in gList]

def EmbedGenes(idMon, epochs=1000, PP=0.05, EX=4.0, ex=1.0):
	mds = NewTsne(epochs, PP, EX, ex)
	nt = vv.GetNumberTableView(True).SelectColumnsById(idMon)
	nt = transform(nt)
	mds.ChangeTrainingData(nt).Reset().Start()
	if not mds.Completed: vv.Return(0)
	mds.Close()
	vv.SelectedItems = None
	sId = '|'.join(idMon)
	vv.Map.Description = f'EP:{epochs};PP:{PP};ex:{ex};EX:{EX};DS:{vv.Dataset.Name}; Ids:{sId}'

def OnGenesSelected():
	mp = pp
	selected = vv.SelectedItems
	nt = vv.EventSource.Argument.SelectColumnsById(selected)
	if nt.Columns == 0:
		return
	mp.Title = f'Genes: {';'.join(selected)}'
	tb = mm.ToNumpy(nt)
	tb = (tb**2).sum(axis=1)
	tbMax = max(0.05, tb.max())
	minV = 0.01 * tbMax
	maxV = 0.9 * tbMax
	stepSize = (maxV - minV)/64
	bList = mp.BodyListEnabled()
	for k, b in enumerate(bList):
		v = tb[k] - minV
		if v <= 0:
			b.Type = 0
			b.Hidden = True
		else:
			b.Type = min(15, int( v/stepSize ))
			b.Hidden = False
	mp.RedrawBodiesType()

def ShowActiveCells(pMap): 
	CheckDataset(pMap)
	pMap.SelectedItems = None
	mp = pMap.NewSnapshot()
	mp.HiddenBodyColor = New.Color('Red')
	for b in mp.BodyList: 
		b.Hidden = True
	mp.GlyphSet = 'Ordered 64'
	mp.HiddenBodySize = 2
	mp.GlyphSize = 1.0
	mp.GlyphOpacity = 0.5
	mp.ReloadGlyphSet()
	mp.ShowMarker(False)
	mp.RedrawAll()
	nt = vv.GetNumberTableView(True).SelectColumnsById(ExtractFeatures(pMap))
	nt = cs.Transform(nt)
	vv.EventManager.OnItemsSelected("@OnGenesSelected()", mp, nt)

def SaveToAtlas(atName=None, x0=50, y0=50):
	vv.AtlasManager.OpenAtlas(atName).CaptureAllOpenViews(x0, y0).Close()

def SetAtlasItemName():
	atlas = pp
	for item in atlas.GetSelectedItems():
		mp = item.Open()
		info = ParseInfo(mp.Title)
		item.Name = info['SQ'] + ':' + info['RG']
		item.LabelStyle = 2
		mp.Close()
		atlas.RedrawItem(item, True)

def CheckDataset(pMap):
	dsName = ParseInfo(pMap.Description)['DS']
	if dsName != vv.Dataset.Name:
		vv.Folder.OpenDataset(dsName)	

def AdjustAtlasMaps(mpWidth, mpHeight, gSize, gOpacity):
	for it in pp.GetSelectedItems():
		mp = it.Open()
		mp.GlyphSize = gSize
		mp.GlyphOpacity = gOpacity
		mp.Resize(0,0,mpWidth,mpHeight)
		mp.Close()

#================================================================================
#================================================================================

'''

LoopList('pancreas', epochs=2000, SS=100, saveTo='pancreas')

ftList = ['Chr20', 'Chr21', 'Chr22']
ftList = ['ChrX', 'ChrMT']
ftList = ['Chr1']
ftList = ['LowExon-Protein', 'HiExon-Protein', 'ShortTranscript', 'LongTranscript']
LoopList(ft, epochs=2000, SS=100)

dsList = ['TCellBreast', 'Perivascular', 'Vascular-C']

ftList = ['LncRNA_Pos', 'LncRNA_Length']
dsList = ['Perivascular']
LoopList2(dsList, ftList, saveTo='LncRNA', SS=500, epochs=2000, ex=0.95)

idMon = [ cs.Id for cs in vv.Dataset.ColumnSpecList ]
for n in range(1, 6):
	nm = str(n)
	vv.GroupManager.SetGroupLabels('Chr'+nm, GetGeneList(nm))

nt = cs.DeNormalize(vv.GetNumberTableView(True).Clone())
nt.ShowHeatMap()

mds = NewTsne()
nt = vv.GetNumberTableFiltered()
mds.ChangeTrainingData(nt)
mds.Reset()
mds.Start()

#----------------------------------

Code to install some useful context menus:

for SnapshotMap
@#MenuLabels Monitor ShowData ReEmbedding 3D-Expression
vv.Import('GeneMonitor.pyn')
match vv.EventSource.Item:
	case 'Monitor':
		MonitorMap(pp)
	case 'ShowData':
		ShowData(pp)
	case 'ReEmbedding':
		ReEmbedding(pp)
	case '3D-Expression':
		ShowExpress3D(pp)

for MainForm
@#MenuLabels CaptureMaps EmbedSelected
vv.Import('GeneMonitor.pyn')
match vv.EventSource.Item:
	case 'CaptureMaps':
		vv.AtlasManager.OpenAtlas().CaptureAllOpenViews()
	case 'EmbedSelected':
		EmbedGenes(vv.SelectedItems, epochs=2000, EX=4.0, PP=0.05)

for Atlas
@#MenuLabels SetMapLabel AdjustAtlasMaps
vv.Import('GeneMonitor.pyn')
match vv.EventSource.Item:
	case 'SetMapLabel':
		SetAtlasItemName()
	case 'AdjustAtlasMaps':
		AdjustAtlasMaps(1000, 700, 0.5, 0.5)

@for it in pp.GetSelectedItems():
	mp = it.Open()
	mp.GlyphSize = 0.5
	mp.GlyphOpacity = 0.5
	mp.Resize(0,0,1000,700)
	mp.Close()

'''