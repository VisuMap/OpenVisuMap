import math
import numpy as np

mpWidth, mpHeight = 500, 350

cs = New.CsObject('''
public IBody MeanPoint(IList<IBody> bList){
	if (bList.Count == 0) 
		return null;
	double x = 0;
	double y = 0;
	foreach(IBody b in bList) {
		x += b.X;
		y += b.Y;
	}
	x /= bList.Count;
	y /= bList.Count;
	x -= 35.0;
	y += 20.0;
	IBody mBody = null;
	double mDist = 1.0e10;
	foreach(IBody b in bList) {
		double d2 = (b.X - x)*(b.X - x) + (b.Y - y)*(b.Y - y);
		if (  d2 < mDist ) {
			mBody = b;
			mDist = d2;
		}
	}	
	return mBody;
}
public INumberTable Transform(INumberTable nt) {
	MT.Loop(0, nt.Rows, row=>{
		  double[] R = nt.Matrix[row] as double[];
        for(int col=0; col<nt.Columns; col++)
            //R[col] = Math.Sqrt( Math.Abs(Math.Exp(R[col]) - 1) );
				//R[col] = Math.Exp(R[col]) - 1.0;
				R[col] = Math.Log(1.0 + R[col]);
	});
	return nt;
}
''')

def transform(nt):
	return nt
	#return cs.Transform(nt)

def NewTsne(epochs=1000, PP=0.05, EX=4.0, ex=1.0, repeats=1):
	mds = New.TsneMap()
	mds.MaxLoops = epochs
	mds.PerplexityRatio = PP
	mds.InitialExaggeration = EX
	mds.FinalExaggeration = ex
	mds.ExaggerationSmoothen = True
	mds.RefreshFreq = 50
	mds.Is3D = False
	mds.AutoNormalizing = True
	mds.AutoScaling = False
	mds.Repeats = repeats
	mds.ReadOnly = True
	mds.Show()
	return mds

def GetId2Sym():
	global fctId2Sym
	if 'fctId2Sym' in globals():
		return fctId2Sym
	gt = vv.Folder.ReadDataset('Gene Features')
	if gt != None:
		cIdx = gt.IndexOfColumn('Symbol')
		id2sym_dic = {gt.BodyList[row].Id : gt.GetDataAt(row, cIdx) for row in range(gt.Rows)}
		fctId2Sym = lambda id: id2sym_dic[id] if id in id2sym_dic else id
	else:
		fctId2Sym = lambda id: id
	return fctId2Sym

def ConfigBarView(bv, nt):
	bv.Horizontal = False
	bv.BarLabelType = 1
	bv.AutoScaling = False
	bv.LowerLimit = 0
	bv.UpperLimit = 0
	bv.BaseLineType = 0
	bv.TopMost = True
	items = bv.ItemList
	dynamicColor = True
	gt = vv.Folder.ReadDataset('Gene Features')
	id2sym = GetId2Sym()
	for k, item in enumerate(items): 
		item.Name = Idx2Chr(k) + " " + id2sym(item.Id)
	bv.ReadOnly = True
	bv.Show()
	bv.Resize(0, 0, 500, 500)
	vv.EventManager.OnItemsSelected(f'@OnSelected({dynamicColor})', bv, nt)	
	bv.AddContextMenu("Atlas/Gene Detail", "@ShowGeneDetails()")

def ConfigMarker(mk):
	mk.AnimationPause = 25
	mk.AnimationStepSize = 1
	mk.LoopPath = False
	mk.NoLooping = False
	mk.MarkerColor = New.Color('Yellow')
	mk.Left = 200
	mk.Top = 200
	mk.Width = 70
	mk.Height = 12
	mk.SpinningMarker()

def Config3DMap(m3d):
	m3d.ReadOnly = True
	m3d.Resize(0, 0, 1000, 800)
	m3d.GlyphOpacity = 0.5
	m3d.GlyphSize = 0.45
	m3d.ShowBoundingBox = True
	m3d.ShowPerformance = False
	m3d.BackgroundColor = New.Color(0,0,64)
	m3d.ResetView(4); 
	m3d.Show()
	vv.Sleep(1000)
	for p in [2,0,2]:	m3d.ResetView(p);	vv.Sleep(750)
	m3d.RotateXYZ(-0.025, 0, 0, 10, 40); vv.Sleep(750)
	m3d.RotateXYZ(0, 0.005, 0, int(2*math.pi/0.005), 15)

def StartMonitor(nt, map=None):
	ConfigBarView(New.BarView(nt.ColumnSpecList), nt)
	if map == None: 
		map = vv.MapView
	ConfigMarker(map.ShowMarker(True))

def ThresholdHi(vList):
	tHi = math.sqrt( np.average(np.square(vList)) )
	#return tHi if len(vList) < 32 else 2*tHi
	return 0.5*tHi


def OnSelected(dynamicColor):
	nt = vv.EventSource.Argument.SelectRowsById(vv.SelectedItems)
	bv = pp
	if nt.Rows==0:
		return
	nt.ColumnMean(bv.ItemList)
	vList = [item.Value for item in bv.ItemList]
	maxV = max(vList)
	maxV = max(maxV, 0.01)
	if vv.ModifierKeys.AltPressed or (pp.UpperLimit == 0):		
		pp.UpperLimit = 0.125*(2**(math.ceil(math.log2(maxV/0.125))))
	if dynamicColor:
		vLimit = ThresholdHi(vList)
		for item in bv.ItemList: 
			item.Group = 0 if item.Value > vLimit else 4
	bv.Redraw()

def StartTracing(idMon, map=None):
	nt = vv.GetNumberTableView(True).SelectColumnsById(idMon)
	nt = transform(nt)
	StartMonitor(nt, map)

def LoopList(gList, epochs=1000, PP=0.05, SS=100, EX=4.0, ex=1.0, ss=0, saveTo=None, repeats=1): 
	if type(gList) is not list: 
		gList = [ gList ]
	mds = NewTsne(epochs, PP, EX, ex, repeats)
	nt0 = vv.GetNumberTableView(True)
	for listName in gList:
		idList = vv.GroupManager.GetGroupLabels(listName)
		if idList == None:
			vv.Message(f'Cannot load list "{listName}"')
			vv.Return(1)
		idList = list(idList)	
		L = len(idList)
		
		nPairs = []
		if SS != 0:
			for n in range(ss, L, SS):
				nPairs.append( (n,  min(L, n + SS)) )
		else:
			n = 1
			for k in range(1, L):
				if idList[k].startswith('#'):
					nPairs.append( (n, k) )
					n = k+1
			nPairs.append((n, L))
			nPairs = nPairs[ss:]
		
		for n, n2 in nPairs:
			nt = nt0.SelectColumnsById(idList[n:n2])
			nt = transform(nt)
			vv.Map.Description = f'SQ:{listName};RG:{n}-{n2};SS:{SS};CS:{nt.Columns};EP:{epochs};PP:{PP};EX:{EX};ex:{ex};DS:{vv.Dataset.Name}'
			if SS == 0:
				vv.Map.Description += f';NM:{idList[n-1][1:]}'
			mds.ChangeTrainingData(nt).Reset().Start()
			if not mds.Completed:
				vv.Return(1)
			if repeats == 1:
				vv.SelectedItems = None
				mp = New.MapSnapshot().Show()
				mp.Resize(0, 0, mpWidth, mpHeight)
				mp.GlyphSize = 0.25
				mp.GlyphOpacity = 0.75
				mp.ShowMarker(False)
				mp.Title = f'SQ:{listName};RG:{n}-{n2};'
				mp.Description = vv.Map.Description
	mds.Close()
	if saveTo != None:
		SaveToAtlas(saveTo)

def LoopList2(dsList, gList, saveTo=None, epochs=1000, PP=0.05, SS=50, EX=4.0, ex=1.0):
	x0, y0 = 50, 50
	for ds in dsList:
		if ds != vv.Dataset.Name:
			vv.Folder.OpenDataset(ds)
		LoopList(gList, epochs=epochs, PP=PP, SS=SS, EX=EX, ex=ex)
		if saveTo != None:
			SaveToAtlas(saveTo, x0, y0)
		y0 += 150

def ParseInfo(desc):	
	info = {}
	for s in desc.split(';'):
		fs = s.strip().split(':', 1)
		if len(fs) < 2: 
			continue
		info[fs[0]] = fs[1]
	if 'Ids' in info:
		info['Ids'] = info['Ids'].split('|')
	return info

def ExtractFeatures(pMap):
	desc = vv.Map.Description if pMap.Name=='MainForm' else pMap.Description
	return ExtractFeatures0(desc)

def ExtractFeatures0(desc):
	info = ParseInfo(desc)
	if 'Ids' in info:
		return info['Ids']
	sq = info['SQ']
	fs = info['RG'].split('-')
	idMon = 	list(vv.GroupManager.GetGroupLabels(sq))
	n, n2 = int(fs[0]), int(fs[1])
	idMon = idMon[n:n2]
	return idMon

def ReEmbedding(pMap):
	CheckDataset(pMap)
	info = ParseInfo(pMap.Description)
	epochs = int(info['EP'])
	PP = float(info['PP'])
	EX = float(info['EX'])
	ex = float(info['ex']) if 'ex' in info else 1.0
	mpTitle, mpDescription = pMap.Title, pMap.Description
	mds = NewTsne(epochs, PP, EX, ex)
	ftList = ExtractFeatures(pMap)
	nt = vv.GetNumberTableView(True).SelectColumnsById(ftList)
	nt = transform(nt)
	mds.ChangeTrainingData(nt).Reset().Start()
	if not mds.Completed: return
	vv.SelectedItems = None
	map = New.MapSnapshot().Show()
	map.Resize(0, 0, mpWidth, mpHeight)
	map.Title, map.Description = mpTitle, mpDescription
	mds.Close()
	vv.Map.Description = mpDescription

def MonitorMap(pMap):
	CheckDataset(pMap)
	StartTracing(ExtractFeatures(pMap), pMap)

def ShowGeneDetails():
	fm = vv.EventSource.Form
	if (fm.Name == 'HeatMap') and not fm.AttributeMode:
		return
	if fm.SelectedItems.Count < 1:
		return
	gId = fm.SelectedItems[0]
	vv.StartProcess(f'https://useast.ensembl.org/Human/Search/Results?q={gId};site=ensembl;facet_species=Human')
	vv.StartProcess(f'https://www.ncbi.nlm.nih.gov/gene/?term={gId}')

def ShowData(pMap):
	CheckDataset(pMap)
	ShowData0(ExtractFeatures(pMap))

def ShowData0(featureList):
	nt = vv.Dataset.GetNumberTableEnabled().SelectColumnsById(featureList)
	if nt.Rows*nt.Columns == 0:
		vv.Message('No data selected')
		vv.Return()
	nt = transform(nt)	
	hm = nt.ShowHeatMap()
	hm.Title = f'Data Dimension: {nt.Rows}x{nt.Columns}'
	hm.Resize(0, 0, 1015, 500)
	hm.ReadOnly = True
	hm.SelectionMode = 1
	id2sym = GetId2Sym()
	for cs in nt.ColumnSpecList: 
		cs.Name = id2sym(cs.Id)
	hm.AddContextMenu("Atlas/Gene Detail", "@ShowGeneDetails()")
	hm.NormalizeView()

def ShowExpress3D(pMap):
	CheckDataset(pMap)
	nt = vv.GetNumberTableView(True).SelectColumnsById(ExtractFeatures(pMap))
	nt = transform(nt)
	tb = mm.ToNumpy(nt)
	tb = np.sqrt((tb**2).sum(axis=1))
	MAXV = 500.0
	maxV = min(MAXV, tb.max())
	tb = MAXV/maxV*tb
	m3d = New.Map3DView(pMap.BodyListEnabled())
	m3d.MapDepth = MAXV
	m3d.Title = f'Maximum Expression: {maxV:.3g}'
	for k, b in enumerate(m3d.BodyList): b.Z = tb[k]
	Config3DMap( m3d )

def GetGeneList(chrName):
	ds = vv.Folder.ReadDataset("Gene Features")
	gList = []
	for k in range(ds.Rows):
		if ds.ValueAtAsString(k, 4) != 'protein_coding': continue
		if not chrName == 'MT':
			if ds.ValueAtAsDouble(k, 6) == 0 : continue
			if ds.ValueAtAsDouble(k, 7) == 0 : continue
		id = ds.BodyList[k].Id
		chr = ds.ValueAtAsString(k, 0)
		pos = int(ds.ValueAtAsDouble(k, 2))
		if chr == chrName:
			gList.append((id, pos))
	gList.sort(key=lambda x:x[1])
	return [p[0] for p in gList]

def EmbedGenes(idMon, epochs=1000, PP=0.05, EX=4.0, ex=1.0, repeats=1):
	if idMon.Count == 0:
		idMon = ExtractFeatures0(vv.Map.Description)
	mds = NewTsne(epochs, PP, EX, ex, repeats)
	nt = vv.GetNumberTableView(True).SelectColumnsById(idMon)
	nt = transform(nt)
	vv.Map.Description = f'EP:{epochs};PP:{PP};ex:{ex};EX:{EX};DS:{vv.Dataset.Name};CS:{nt.Columns};Ids:{'|'.join(idMon)}'
	mds.ChangeTrainingData(nt).Reset().Start()
	if not mds.Completed: vv.Return(0)
	mds.Close()

def OnGenesSelected():
	mp = pp
	selected = vv.SelectedItems
	nt = vv.EventSource.Argument.SelectColumnsById(selected)
	if nt.Columns == 0:
		return
	id2sym = GetId2Sym()
	selected = [ id2sym(id) for id in selected]
	mp.Title = f'Genes: {';'.join(selected)}'
	tb = mm.ToNumpy(nt)
	tb = (tb**2).sum(axis=1)
	tbMax = max(0.05, tb.max())
	minV = 0.01 * tbMax
	maxV = 0.9 * tbMax
	stepSize = (maxV - minV)/64
	bList = mp.BodyListEnabled()
	for k, b in enumerate(bList):
		v = tb[k] - minV
		if v <= 0:
			b.Type = 0
			b.Hidden = True
		else:
			b.Type = min(15, int( v/stepSize ))
			b.Hidden = False
	reversing = False  # show the supression instead of activation
	if reversing: 
		for b in bList:
			b.Type = 15 - b.Type
	mp.RedrawBodiesType()

def ShowActiveCells(pMap):
	CheckDataset(pMap)
	pMap.SelectedItems = None
	mp = New.MapSnapshot().Show() if pMap.Name == 'MainForm' else pMap.NewSnapshot()
	mp.HiddenBodyColor = New.Color('Red')
	for b in mp.BodyList: 
		b.Hidden = True
	mp.GlyphSet = 'Ordered 64'
	mp.HiddenBodySize = 2
	mp.GlyphSize = 1.0
	mp.GlyphOpacity = 0.5
	mp.ReloadGlyphSet()
	mp.ShowMarker(False)
	mp.RedrawAll()
	nt = vv.GetNumberTableView(True).SelectColumnsById(ExtractFeatures(pMap))
	nt = cs.Transform(nt)
	vv.EventManager.OnItemsSelected("@OnGenesSelected()", mp, nt)

def SaveToAtlas(atName=None, x0=50, y0=50):
	vv.AtlasManager.OpenAtlas(atName).CaptureAllOpenViews(x0, y0).Close()

def SetAtlasItemName():
	atlas = pp
	for item in atlas.GetSelectedItems():
		mp = item.Open()
		info = ParseInfo(mp.Title)
		item.Name = info['SQ'] + ':' + info['RG']
		item.LabelStyle = 2
		mp.Close()
		atlas.RedrawItem(item, True)

def CheckDataset(pMap):
	info = vv.Map.Description if pMap.Name=='MainForm' else pMap.Description
	dsName = ParseInfo(info)['DS']
	if dsName != vv.Dataset.Name:
		vv.Folder.OpenDataset(dsName)	

def AdjustAtlasMaps(mpWidth, mpHeight, gSize, gOpacity):
	for it in pp.GetSelectedItems():
		mp = it.Open()
		mp.GlyphSize = gSize
		mp.GlyphOpacity = gOpacity
		mp.Resize(0,0,mpWidth,mpHeight)
		mp.Close()

def Idx2Chr(idx):
	if idx >= 2*26:
		return str(idx)+'.'
	offset = 65 if idx < 26 else 71
	return chr(offset + idx)

def MakeLabel(nt, kSet):
	vs = [item.Value for item in nt.ColumnMean()]
	largeV = ThresholdHi(vs)
	if largeV == 0:
		return '\u25a0'
	nm = ''
	for k, v in enumerate(vs):
		if v > largeV:	
			kSet.add(k)
			nm += Idx2Chr(k)
	if len(nm) == 0: 
		nm = '\u25a0'
	return nm

def MakeLegend(baseNT, kSet):
	csList = baseNT.ColumnSpecList
	symList = ''
	for k in sorted(kSet):
		symList += f'{Idx2Chr(k)}: {csList[k].Name}\n'
	return symList

def LabelGenes(pMap):
	CheckDataset(pMap)
	global symLegend
	baseNT = pMap.Tag
	if baseNT == None:
		featureList = ExtractFeatures(pMap)
		baseNT = vv.Dataset.GetNumberTableEnabled().SelectColumnsById(featureList)
		pMap.Tag = baseNT
		pMap.MapLayout.NameLabelColor = New.Color('Yellow')
		baseNT.Tag = set()
		symLegend = New.TextPanel("Gene Symbols", "").Show()
		symLegend.AlwaysOnTop = True
		id2sym = GetId2Sym()
		for col in baseNT.ColumnSpecList:
			col.Name = id2sym(col.Id)
	kSet = baseNT.Tag
	nt = baseNT.SelectRowsById(pMap.SelectedItems)
	bd = cs.MeanPoint(pMap.GetSelectedBodies())
	bd.Name = MakeLabel(nt, kSet)
	bd.ShowName = True
	pMap.RedrawAll()
	symLegend.Text = MakeLegend(baseNT, kSet)

def LabelAllClusters(pMap):
	maxType = max([b.Type for b in pMap.BodyList])
	featureList = ExtractFeatures(pMap)
	baseNT = vv.Dataset.GetNumberTableEnabled().SelectColumnsById(featureList)
	id2sym = GetId2Sym()
	for col in baseNT.ColumnSpecList: 
		col.Name = id2sym(col.Id)
	kSet = set()
	for t in range(maxType+1):
		B = [b for b in pMap.BodyList if (b.Type == t) and (not b.Hidden)]
		if len(B) == 0: 
			continue
		nt = baseNT.SelectRowsById([b.Id for b in B])
		bd = cs.MeanPoint(B)
		bd.Name = MakeLabel(nt, kSet)
		bd.ShowName = True
	pMap.RedrawAll()
	tp = New.TextPanel("Gene Symbols", MakeLegend(baseNT, kSet))
	tp.BackgroundColor = pMap.BackgroundColor
	tp.TextColor = New.Color('Yellow')
	tp.Show()

'''=================================================================================

LoopList('Angiogenesis', epochs=2000, SS=50)

LoopList('lncRNA_200C', epochs=2000, SS=0, saveTo='LncRNA_C')

LoopList('lncRNA_Pos', epochs=2000, SS=500, saveTo='LncRNA')

LoopList(['ChrX', 'ChrMT'], epochs=2000, SS=100)

#dsList = ['TCellBreast', 'Perivascular', 'Vascular-C', 'BreastCancel', 'Myeloid']
dsList = ['Perivascular']
ftList = ['LncRNA_Pos', 'LncRNA_Length']
LoopList2(dsList, ftList, saveTo='LncRNA', SS=500, epochs=2000, ex=0.95)

'''
