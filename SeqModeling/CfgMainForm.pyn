#MenuLabels P-ChmX P-Web Siblings SeqMap P-Open Sh-LocPDB Select-UniqSeq TypeProtein P-Map P-2D P-2Dx  P-3D P-3Dx P-3Ds Align P-S2 S2
vv.Import('SeqVis.pyn')
vv.Import('PdbLoad.pyn')
vv.Import('SphericalProj.pyn')

def SortByPosX(idList):
	idList.sort(key=lambda id:vv.Dataset.BodyForId(id).X)

def GetAAGroup(idx=0):
	aaHydrophobic = 'AVILMFYW'
	aaPolarUncharged = 'STNQ'
	aaSpecial = 'CGP'
	aaSpC = 'C'
	aaSpG = 'G'
	aaSpP = 'P'
	aaNoPolar = 'AGILMPV'
	aaCarboxyl = 'DE'
	aaAmine = 'RHK'
	aaAromatic = 'FWY'
	aaHydroxyl = 'STY'

	match idx:
		case 0:
			return 'AVILMFYW|STNQ|CGP|RHK|DE'
		case 1:
			return '|'.join( [ aaHydrophobic, aaPolarUncharged,  aaSpecial, aaNoPolar, aaCarboxyl, aaAmine, aaAromatic, aaHydroxyl] )
		case 11:
			return [ aaHydrophobic, aaPolarUncharged,  aaSpecial, aaNoPolar, aaCarboxyl, aaAmine, aaAromatic, aaHydroxyl]
		case 2:
			return aaHydrophobic
		case 3:
			return aaAromatic
		case 4:
			from itertools import combinations
			#return ['|'.join(g) for g in combinations(list('CGPDEFWY'), 3)]
			return ['|'.join(g) for g in combinations(list('AVILMFYW'), 3)]
		case 10:
			return 'AVILMFYW|STNQ|CGP|RHK|DE|aut|cg'
		case 12:
			return 'FL|S|Y|CW|L|P|HQ|R|IM|T|N|K|S|R|V|A|D|E|G|aut|cg'
		case 13:
			return 'FLSYCW|LPHQR|IMTNKSR|VADEG|aut|cg'
		case 14:
			return 'IMTNKSR|aut|cg'
		case 9:
			return '|'.join('AVILMFYWSTNQCGPRHKDE')
		case 20:
			return 'AVILMFYW|STNQ|CGP|RHK|DE|ctu'
		case 21:
			return 'AVILMFYW|STNQ|CGP|RHK|DE|c|g|u|a'
		case 22:
			return '|'.join('AVILMFYWSTNQCGPRHKDE') + '|c|g|u|a'

def MainProc(menuKey):
	selected = list(vv.Map.SelectedItems)
	pId = selected[0] if len(selected) > 0 else None
	pList = selected if len(selected) > 0 else [b.Id for b in vv.Dataset.BodyListEnabled()]
	atlasName = None if len(pList) == 1 else f'{vv.Dataset.Name}/{vv.Map.Name}.{len(pList)}'

	match menuKey:
		case 'P-ChmX': ShowChimeraX(pId)
		case 'P-Web':  ShowWeb(pId)
		case 'P-2D':
			UnFoldProteinList(pList, epochs=2500, mainChain=False, includeHA=False,  wholeComplex=False, samplingDist=0.5,
				initExag=6.0, ppl=0.1, atName=atlasName, stretch=1.0, clusterStretch=0.0, iconWidth=50, glyphSize=6.0, smtRatio=0.0)
		case 'P-2Dx':
			if atlasName != None: 
				atlasName += 'x'
			UnFoldProteinList(pList, epochs=1000, mainChain=False, includeHA=False,  wholeComplex=True, samplingDist=1.0,
				initExag=5.0, ppl=0.15, atName=atlasName, stretch=2.0, clusterStretch=1.0, iconWidth=50, smtRatio=0.0)
		case 'P-3D':
			if atlasName != None: atlasName += '-3D'
			SortByPosX(pList)
			justMainChain = vv.ModifierKeys.ControlPressed
			ShowProteinList(pList, mainChain=justMainChain, includeHA=False, rp=5, atName=atlasName, smtRatio=0.0, glyphSize=1.5, glyphOpacity=0.5)
		case 'P-3Dx':
			for pId in pList:
				mp = ShowPDB(pId, rp=3, eps=0.1, includeHA=False, mainChain=False, chainNames=None, smtRatio=0.0)
				mp.ClickMenu('SeqVis/Flipping')
		case 'P-3Ds':
			Merge3DList(pList)
		case 'SeqMap':
			aaGroups = GetAAGroup(idx=0)
			if atlasName != None: atlasName += '-Seq'
			CreateSeqMaps(pList, aaGroups, epochs=5000, initExag=6.0, ppl=0.1, saveTo=atlasName, decay=1.0, augCfg='s|25|0.25|1.0')
		case 'P-Open': 
			if pId == None:
				vv.Message('No protein selected')
				vv.Return()
			OpenCifFile(pId)
		case 'Sh-LocPDB':
			from os.path import exists
			vv.SelectedItems = [b.Id for b in vv.Map.BodyList if exists(PidToPath(b.Id))]
		case 'P-Map':
			epochs = 2000
			vList = ['pMF', 'pFT', 'sMF', 'sFT', 'rMF']
			#vList = ['rMF']
			for vt in vList:
				match vt:
					case 'pMF':
						mp = ProteinMap2(pList, vt, epochs, mfL=20, ppl=0.05, initExag=4.0)
					case 'pFT':
						mp = ProteinMap2(pList, vt, epochs, waveCount=33, ppl=0.05, initExag=4.0)	
					case 'sFT': 
						mp = ProteinMap2(pList, vt, epochs, aaGroups=GetAAGroup(20), ppl=0.05, initExag=6.0, finalExag=0.9)
					case 'sMF':
						mp = ProteinMap2(pList, vt, epochs, aaGroups=GetAAGroup(20), mfL=10, ppl=0.05, initExag=6.0, finalExag=0.8)
					case 'rMF':
						mp = ProteinMap2(pList, vt, epochs, s2L=20, ppl=0.1, initExag=8.0, shrinkF=0.9)
				vv.Dataset.AddMap(vt)
				mp.NormalizeView().CopyMap().Close()
		case 'TypeProtein':
			TypeProteinList(pList)
		case 'Siblings':
			pSet = set([pId[:4] for pId in vv.Map.SelectedItems])
			bsList = vv.Dataset.BodyListEnabled()
			vv.SelectedItems = [b.Id for b in bsList if b.Id[:4] in pSet]
		case 'Select-UniqSeq':
			SelectUniqSeq()
		case 'Align':
			AlignSeqPair(vv.Map)
		case 'P-S2':
			if len(selected) == 1:
				info = MapInfo()
				info.pId = pId
				bList = GetSphereDataset(pId, interRp=0, contracting=0.9)
				#ShowPDB(pId, rp=intRp, eps=0.1, chainNames=GetChainName(pId), includeHA=False)
				#ShowSphere(bList)
				mds = NewMds(New.NumberTable(bList, 3), 
					epochs=3000, initExag=6.0, finalExag=1.0, ppl=0.1, repeats=0, refreshFreq=200, 
					zoomFactor=1.0, glyphSet='Ordered 64|36 Clusters|Red Green', glyphSize=1.0, glyphOpacity=1.0)
				RunMds(mds, info=info, repeats=0)
				bList = Interporlate(mds.BodyList, rp=5, eps=0.1)
				for b in bList:
					b.Hidden = True if b.Id[0] == 'i' else False
				mp = New.MapSnapshot(bList).Show()
				mp.HiddenBodySize = 3
				mp.NormalizeView()
				mp.Description = info.ToStr()
				mds.Close()
			else:
				mds = NewMds(epochs=3000, initExag=6.0, finalExag=1.0, ppl=0.1, repeats=0, refreshFreq=200, 
					zoomFactor=1.0, glyphSet='Ordered 64|36 Clusters|Red Green', glyphSize=6.0, glyphOpacity=1.0)
				atlasName = 'S2.' + atlasName
				mapStore = NewMapStore(atlasName, is3D=False, clearStore=True)			
				contractingF =0.9
				samplingDist = 1.0
				info = MapInfo()
				info.Mtd = 'S2'
				info.Set('cF', contractingF)
				if samplingDist > 0:
					selected = ss.FlatSampling(selected, samplingDist)
				for k, pId in enumerate(selected):				
					bList = GetSphereDataset(pId, interRp=0, contracting=contractingF)
					if bList == None:
						continue
					mds.SetTrainingData(New.NumberTable(bList, 3))
					info.pId = pId
					info.pLen = bList.Count
					vv.Title = f'Embedding S2 {pId}/{bList.Count:,}: {k+1}-th of {len(selected)}'
					RunMds(mds, info=info, repeats=0)
					mapStore.AddMap()
				MatchProteinMap(mapStore.atlas, 70)
				mapStore.Close()
				mds.Close()
				New.Atlas(atlasName).Show()
		case 'S2':
			sf = 0.8
			bList = GetSphereDataset(pId, interRp=5, contracting=sf, eps=0.075)

			'''
			bList2 = [b for b in bList if not b.Hidden]
			vList = New.NumberArray(len(bList2)-1)
			for i in range(vList.Count):
				a = bList2[i]
				b = bList2[i+1]
				vList[i] = 180*math.acos( (a.X*b.X + a.Y*b.Y + a.Z*b.Z)/(a.Length * b.Length) )/math.pi
			New.BarView(vList).Show()

			bList2 = [b for b in bList if not b.Hidden]
			vList = New.NumberArray([b.Length for b in bList2])
			bv = New.BarView(vList)
			for k, b in enumerate(bList2):
				bv.ItemList[k].Id = b.Id
			bv.Show()
			'''
			
			mp = ShowSphere(bList, MapInfo(f'pId:{pId};sf:{sf}'), hsize=4, gsize=1.8)

MainProc(vv.EventSource.Item)

'''


'''
