#MenuLabels P-ChmX P-Web P-3D P-3Dx SeqMap P-Open Sh-LocPDB AtlasView TypeProtein P-2D ProteinMap Siblings
vv.Import('SeqVis.pyn')
vv.Import('PdbLoad.pyn')

def SortByPosX(idList):
	idList.sort(key=lambda id:vv.Dataset.BodyForId(id).X)

def GetAAGroup(idx=0):
	aaHydrophobic = 'AVILMFYW'
	aaPolarUncharged = 'STNQ'
	aaSpecial = 'CGP'
	aaSpC = 'C'
	aaSpG = 'G'
	aaSpP = 'P'
	aaNoPolar = 'AGILMPV'
	aaCarboxyl = 'DE'
	aaAmine = 'RHK'
	aaAromatic = 'FWY'
	aaHydroxyl = 'STY'

	match idx:
		case 0:
			return 'AVILMFYW|STNQ|CGP|RHK|DE'
		case 1:
			return '|'.join( [ aaHydrophobic, aaPolarUncharged,  aaSpecial, aaNoPolar, aaCarboxyl, aaAmine, aaAromatic, aaHydroxyl] )
		case 11:
			return [ aaHydrophobic, aaPolarUncharged,  aaSpecial, aaNoPolar, aaCarboxyl, aaAmine, aaAromatic, aaHydroxyl]
		case 2:
			return aaHydrophobic
		case 3:
			return aaAromatic
		case 4:
			from itertools import combinations
			#return ['|'.join(g) for g in combinations(list('CGPDEFWY'), 3)]
			return ['|'.join(g) for g in combinations(list('AVILMFYW'), 3)]
		case 9:
			return '|'.join('AVILMFYWSTNQCGPRHKDE')

def CreateProteinMapList(gList, pList, epochs=2500, clearStore=False):
	mStore = AtlasMapStore(f'P-Atlas-{len(pList)}', 'MdsCluster', clearStore)
	for k, aaGroups in enumerate(gList):
		vv.Title = f'Protein Map: {k}-th of {len(gList)}...'
		CreateProteinMap2(pList, epochs=epochs, repeats=0, ppl=0.25, staged=True, 
			initExag=6.0, finalExag=1.0, using3DInfo=False, aaGroups=aaGroups)
		mStore.AddMap().Close()
		mStore.atlas.SaveAtlas()
	mStore.atlas.Show()

def MainProc(menuKey):
	atlasName = f'{vv.Dataset.Name}/{vv.Map.Name}'
	pSelected = list(pp.SelectedItems)
	pId = pSelected[0] if len(pSelected) > 0 else None
	pList = pSelected if len(pSelected) > 0 else [b.Id for b in vv.Dataset.BodyListEnabled()]

	match menuKey:
		case 'P-ChmX': ShowChimeraX(pId)
		case 'P-Web':  ShowWeb(pId)
		case 'P-2D':
			if len(pSelected) == 1: 
				atlasName = None
			UnFoldProteinList(pList, epochs=2000, mainChain=False, includeHA=False, initExag=3.0, atName=atlasName, stretch=0.0, iconWidth=50, smtRatio=0.0)
		case 'P-3D':
			atlasName += '-3D'
			SortByPosX(pSelected)
			if len(pSelected) == 1: atlasName = None
			justMainChain = vv.ModifierKeys.ControlPressed
			ShowProteinList(pSelected, mainChain=justMainChain, includeHA=False, atName=atlasName, smtRatio=0.0, glyphSize=1.5, glyphOpacity=0.5)
		case 'P-3Dx':
			for pId in pSelected:
				mp = ShowPDB(pId, rp=3, eps=0.1, includeHA=False, mainChain=False, chainNames=None, smtRatio=0.0)
				mp.ClickMenu('SeqVis/Flipping')
		case 'SeqMap':
			aaGroups = GetAAGroup(idx=0)
			atlasName += '-Seq'
			if len(pSelected) == 1: atlasName = None
			CreateSeqMaps(pSelected, aaGroups, epochs=5000, initExag=6.0, ppl=0.1, saveTo=atlasName, decay=1.0, augCfg='s|25|0.25|1.0')
		case 'P-Open': 
			if pId == None:
				vv.Message('No protein selected')
				vv.Return()
			OpenCifFile(pId)
		case 'Sh-LocPDB':
			from os.path import exists
			vv.SelectedItems = [b.Id for b in vv.Map.BodyList if exists(PidToPath(b.Id))]
		case 'ProteinMap':		
			CreateProteinMap2(pList, aaGroups=GetAAGroup(0), epochs=5000, repeats=0, 
				ppl=0.25, staged=True, initExag=6.0, finalExag=1.0, using3DInfo=False)
			'''
			CreateProteinMapList(GetAAGroup(4), pList, epochs=2500, clearStore=True)

			CreateProteinMap2(pList, aaGroups='C|G', epochs=5000, repeats=0, 
				ppl=0.25, staged=True, initExag=3.0, finalExag=1.0, using3DInfo=False, waveCount=64)
			'''
		case 'TypeProtein':
			TypeProteinList(pList)
		case 'AtlasView':
			atlasName = f'{vv.Dataset.Name}/{vv.Map.Name}'
			if atlasName not in vv.AtlasManager.GetAtlasList():
				vv.Message('No atlas found with the name: ' + atlasName)
				vv.Return()
			atlas = New.Atlas(atlasName)
			if not vv.ModifierKeys.ControlPressed:
				atlas.MakeFloating()
				if len(pSelected) > 0:
					notSelected = [ item for item in atlas.Items if item.Name not in set(pSelected) ]
					atlas.RemoveItems(notSelected)
					atlas.ResetView()			
			atlas.Show()
		case 'Siblings':
			pId = pId[:4]
			bsList = vv.Dataset.BodyListEnabled()
			vv.SelectedItems = [b.Id for b in bsList if b.Id[:4] == pId]

MainProc(vv.EventSource.Item)

'''

ds = vv.Dataset
bs = list(ds.BodyList)
pList = {}
for b in bs:
	pId = b.Id[:4]
	if pId not in pList:
		pList[pId] = []
	pList[pId].append(b.Id)

ft = New.FreeTable(len(pList), 0)
for k, p in enumerate(pList):
	rs = ft.RowSpecList[k]
	rs.Id = p
	rs.Name = ','.join( pList[p] )
ft.ShowAsTable()

ft.SaveAsDataset('AAA', '')

for item in pp.Items:
	mp = item.Open()
	info = MapInfo(mp.Description)
	item.Name = info.aaG + ' : ' + info.Get('MSz')[:5]
	item.LabelStyle = 2
	mp.Close()

ds = vv.Dataset
mgr = vv.EventManager
gList = []
for t in range(2683):
	gList.append([b.Id for b in ds.BodyListForType(t)])
gList.sort(reverse=False, key=lambda g: len(g))
for g in gList:
	mgr.RaiseItemsSelected(g) 
	vv.Sleep(250)
	if vv.ModifierKeys.ControlPressed:
		break

sb = {}
sb2 = {}
ds = vv.Dataset
for k, b in enumerate(ds.BodyList):
	id = b.Id[:4]
	nr = ds.GetValueAt(k,1)	
	if id in sb:
		sb[id] += nr
		sb2[id] += 1
	else:
		sb[id] = nr
		sb2[id] = 1
for k, b in enumerate(ds.BodyList):
	id = b.Id[:4]
	ds.SetValueAt(k, 5, sb[id])
	ds.SetValueAt(k, 6, sb2[id])
ds.CommitChanges()		

a = 'ATCACCCTATACGCGGCCGCCCTGGAGAATCCCGGTGCCGAGGCCGCTCAATTGGTCGTAGACAGCTCTAGCACCGCTTAAACGCACGTACGCGCTGTCCCCCGCGTTTTAACCGCCAAGGGGATTACTCCCTAGTCTCCAGGCACGTGTCAGATATATACATCCTGTGCATGTATTGAACAGCCCCGAGACCCTATACGCGGCCGCCCTGGAGAATCCCGGTGCCGAGGCCGCTCAATTGGTCGTAGACAGCTCTAGCACCGCTTAAACGCACGTACGCGCTGTCCCCCGCGTTTTAACCGCCAAGGGGATTACTCCCTAGTCTCCAGGCACGTGTCAGATATATACATCCTGTGCATGTATTGAACAGCCCCGAGACCCTATACGCGGCCGCCCTGGAGAATCCCGGTGCCGAGGCCGCTCAATTGGTCGTAGACAGCTCTAGCACCGCTTAAACGCACGTACGCGCTGTCCCCCGCGTTTTAACCGCCAAGGGGATTACTCCCTAGTCTCCAGGCACGTGTCAGATATATACATCCTGTGCATGTATTGAACAGCCCCGAGACCCTATACGCGGCCGCCCTGGAGAATCCCGGTGCCGAGGCCGCTCAATTGGTCGTAGACAGCTCTAGCACCGCTTAAACGCACGTACGCGCTGTCCCCCGCGTTTTAACCGCCAAGGGGATTACTCCCTAGTCTCCAGGCACGTGTCAGATATATACATCCTGTGCATGTATTGAACAGCCCCGAGACCCTATACGCGGCCGCCCTGGAGAATCCCGGTGCCGAGGCCGCTCAATTGGTCGTAGACAGCTCTAGCACCGCTTAAACGCACGTACGCGCTGTCCCCCGCGTTTTAACCGCCAAGGGGATTACTCCCTAGTCTCCAGGCACGTGTCAGATATATACATCCTGTGCATGTATTGAACAGCCCCGAGACCCTATACGCGGCCGCCCTGGAGAATCCCGGTGCCGAGGCCGCTCAATTGGTCGTAGACAGCTCTAGCACCGCTTAAACGCACGTACGCGCTGTCCCCCGCGTTTTAACCGCCAAGGGGATTACTCCCTAGTCTCCAGGCACGTGTCAGATATATACATCCTGTGCATGTATTGAACAGCGAT'
b = 'ATCGCTGTTCAATACATGCACAGGATGTATATATCTGACACGTGCCTGGAGACTAGGGAGTAATCCCCTTGGCGGTTAAAACGCGGGGGACAGCGCGTACGTGCGTTTAAGCGGTGCTAGAGCTGTCTACGACCAATTGAGCGGCCTCGGCACCGGGATTCTCCAGGGCGGCCGCGTATAGGGTCTCGGGGCTGTTCAATACATGCACAGGATGTATATATCTGACACGTGCCTGGAGACTAGGGAGTAATCCCCTTGGCGGTTAAAACGCGGGGGACAGCGCGTACGTGCGTTTAAGCGGTGCTAGAGCTGTCTACGACCAATTGAGCGGCCTCGGCACCGGGATTCTCCAGGGCGGCCGCGTATAGGGTCTCGGGGCTGTTCAATACATGCACAGGATGTATATATCTGACACGTGCCTGGAGACTAGGGAGTAATCCCCTTGGCGGTTAAAACGCGGGGGACAGCGCGTACGTGCGTTTAAGCGGTGCTAGAGCTGTCTACGACCAATTGAGCGGCCTCGGCACCGGGATTCTCCAGGGCGGCCGCGTATAGGGTCTCGGGGCTGTTCAATACATGCACAGGATGTATATATCTGACACGTGCCTGGAGACTAGGGAGTAATCCCCTTGGCGGTTAAAACGCGGGGGACAGCGCGTACGTGCGTTTAAGCGGTGCTAGAGCTGTCTACGACCAATTGAGCGGCCTCGGCACCGGGATTCTCCAGGGCGGCCGCGTATAGGGTCTCGGGGCTGTTCAATACATGCACAGGATGTATATATCTGACACGTGCCTGGAGACTAGGGAGTAATCCCCTTGGCGGTTAAAACGCGGGGGACAGCGCGTACGTGCGTTTAAGCGGTGCTAGAGCTGTCTACGACCAATTGAGCGGCCTCGGCACCGGGATTCTCCAGGGCGGCCGCGTATAGGGTCTCGGGGCTGTTCAATACATGCACAGGATGTATATATCTGACACGTGCCTGGAGACTAGGGAGTAATCCCCTTGGCGGTTAAAACGCGGGGGACAGCGCGTACGTGCGTTTAAGCGGTGCTAGAGCTGTCTACGACCAATTGAGCGGCCTCGGCACCGGGATTCTCCAGGGCGGCCGCGTATAGGGTGAT'
print(len(b))

hasRNA = set([b.Id[:4] for b in vv.Folder.ReadDataset('RnaChains').BodyList])
hasDNA = set([b.Id[:4] for b in vv.Folder.ReadDataset('DnaChains').BodyList])
hasNT = hasDNA.union(hasRNA)
hasRD = hasDNA.intersection(hasRNA)
print(len(hasRNA), len(hasDNA), len(hasNT), len(hasRD))
vv.SelectedItems = [ b.Id for b in vv.Dataset.BodyList if b.Id[:4] in hasNT ]

'''
