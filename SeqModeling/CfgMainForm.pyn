#MenuLabels P-ChmX P-Web Siblings SeqMap P-Open Select-UniqSeq TypeProtein P-Map P-2D P-2Dx P-3D P-3Dx Align P-3Ds P-S2 S2 TT
vv.Import('SeqVis.pyn')
vv.Import('PdbLoad.pyn')
vv.Import('SphericalProj.pyn')

def SortByPosX(idList):
	idList.sort(key=lambda id:vv.Dataset.BodyForId(id).X)

def GetAAGroup(idx=0):
	aaHydrophobic = 'AVILMFYW'
	aaPolarUncharged = 'STNQ'
	aaSpecial = 'CGP'
	aaSpC = 'C'
	aaSpG = 'G'
	aaSpP = 'P'
	aaNoPolar = 'AGILMPV'
	aaCarboxyl = 'DE'
	aaAmine = 'RHK'
	aaAromatic = 'FWY'
	aaHydroxyl = 'STY'

	match idx:
		case 0:
			return 'AVILMFYW|STNQ|CGP|RHK|DE'
		case 1:
			return '|'.join( [ aaHydrophobic, aaPolarUncharged,  aaSpecial, aaNoPolar, aaCarboxyl, aaAmine, aaAromatic, aaHydroxyl] )
		case 11:
			return [ aaHydrophobic, aaPolarUncharged,  aaSpecial, aaNoPolar, aaCarboxyl, aaAmine, aaAromatic, aaHydroxyl]
		case 2:
			return aaHydrophobic
		case 3:
			return aaAromatic
		case 4:
			from itertools import combinations
			#return ['|'.join(g) for g in combinations(list('CGPDEFWY'), 3)]
			return ['|'.join(g) for g in combinations(list('AVILMFYW'), 3)]
		case 10:
			return 'AVILMFYW|STNQ|CGP|RHK|DE|aut|cg'
		case 12:
			return 'FL|S|Y|CW|L|P|HQ|R|IM|T|N|K|S|R|V|A|D|E|G|aut|cg'
		case 13:
			return 'FLSYCW|LPHQR|IMTNKSR|VADEG|aut|cg'
		case 14:
			return 'IMTNKSR|aut|cg'
		case 9:
			return '|'.join('AVILMFYWSTNQCGPRHKDE')
		case 20:
			return 'AVILMFYW|STNQ|CGP|RHK|DE|ctu'
		case 21:
			return 'AVILMFYW|STNQ|CGP|RHK|DE|c|g|u|a'
		case 22:
			return '|'.join('AVILMFYWSTNQCGPRHKDE') + '|c|g|u|a'

def CreateProteinMaps(pList, atlasName, tP):
	epochs, ppl, initE, finalE = tP
	tsne = FastTsne(0, 4, 2, epochs, ppl, initE, finalE)
	L = len(pList)
	mapStore = AtlasMapStore(atlasName) if L > 4 else None
	for k, pId in enumerate(pList):
		bList = LoadMainChain0(pId)
		bList = Interpolate1Chain(bList, 3)
		nt = ss.AugmentByStretch(bList, 0, 3)
		nt = tsne.Fit(nt)
		if nt == None:
			continue
		bList = nt.ToBodyList()
		if mapStore == None:
			cs.FitByPCA(New.MapSnapshot(bList), 15.0).Show()
		else:
			mapStore.AddRawMap(pId, bList, scale=80)
			if (k+1)%10==0: 
				vv.Title = f'Fitted {pId}/{bList.Count}: {k+1}-th of {L}'
		vv.DoEvents()
	if mapStore != None:
		info = MapInfo()
		info.Set('tP', tP)
		ma = mapStore.atlas
		ma.Show()
		MatchProteinMap(ma, 50)
		ma.Description = info.ToStr()

def MainProc(menuKey):
	selected = list(vv.Map.SelectedItems)
	pId = selected[0] if len(selected) > 0 else None
	pList = selected if len(selected) > 0 else [b.Id for b in vv.Dataset.BodyListEnabled()]
	atlasName = None if len(pList) == 1 else f'{vv.Dataset.Name}/{vv.Map.Name}.{len(pList)}'
	ctrPressed = vv.ModifierKeys.ControlPressed				

	match menuKey:
		case 'P-ChmX': ShowChimeraX(pId)
		case 'P-Web':  ShowWeb(pId)
		case 'P-2D':
			UnFoldProteinList(pList, epochs=2500, mainChain=False, includeHA=False,  wholeComplex=False, samplingDist=0.0, atName=atlasName, 
				ppl=0.25, initExag=4.0, finalExag=1.0, stretch=0.0, clusterStretch=0.0, iconWidth=50, glyphSize=6.0, smtRatio=0.0)
			#CreateProteinMaps(pList, atlasName, tP = (2500, 0.25, 4.0, 1.0))
		case 'P-2Dx':
			if atlasName != None: 
				atlasName += 'x'
			UnFoldProteinList(pList, epochs=1000, mainChain=False, includeHA=False,  wholeComplex=True, samplingDist=1.0,
				initExag=5.0, ppl=0.15, atName=atlasName, stretch=2.0, clusterStretch=1.0, iconWidth=50, smtRatio=0.0)
		case 'P-3D':
			if atlasName != None: atlasName += '-3D'
			SortByPosX(pList)
			justMainChain = vv.ModifierKeys.ControlPressed
			ShowProteinList(pList, mainChain=justMainChain, includeHA=False, rp=5, atName=atlasName, smtRatio=0.0, glyphSize=1.5, glyphOpacity=0.5)
		case 'P-3Dx':
			mp = ShowPDB(pId, rp=3, eps=0.1, includeHA=False, mainChain=False, chainNames=None, setChainId=True, smtRatio=0.0)
			npp = [b for b in mp.BodyList if b.Name[0] == 'd' or b.Name[0] == 'r' ]
			if len(npp) > 0:
				mp.ClickMenu('SeqVis/Flipping')
		case 'P-3Ds':
			Merge3DList(pList)
		case 'SeqMap':
			aaGroups = GetAAGroup(idx=0)
			if atlasName != None: atlasName += '-Seq'
			CreateSeqMaps(pList, aaGroups, epochs=5000, initExag=6.0, ppl=0.1, saveTo=atlasName, decay=1.0, augCfg='s|25|0.25|1.0')
		case 'P-Open': 
			if pId == None:
				vv.Message('No protein selected')
				vv.Return()
			OpenCifFile(pId)
		case 'P-Map':
			def PM2(*args, **kwargs):
				mp = ProteinMap2(pList, vt, 4000, samplingDist=0.0, *args, **kwargs)
				vv.Dataset.AddMap(vt)
				mp.NormalizeView().CopyMap().Close()
			vList = ['pMF', 'pFT', 'sMF', 'sFT', 'rMF', 'tMF', 'tFT']
			vList = ['tMF']
			for vt in vList:
				match vt:
					case 'pMF':	
						PM2(mfL=20, tSNE=(0.05, 4.0, 1.0))
					case 'pFT':	
						PM2(waveCount=33, tSNE=(0.05, 4.0, 1.0))	
					case 'sFT':	
						PM2(aaGroups=GetAAGroup(20), tSNE=(0.05, 6.0, 0.9))
					case 'sMF':	
						PM2(aaGroups=GetAAGroup(20), mfL=20, tSNE=(0.05, 6.0, 0.8))
					case 'rMF':	
						PM2(tSNE=(0.1, 4.0, 1.0), tP=(20, 0.85, True, 2000, 0.15, 4.0, 1.0))
					case 'tMF' | 'tFT':	
						svTMF = ctrPressed	
						waveN = 15 if vt=='tMF' else 25
						# saveTMF, epochs, waveN, intRp, stretch, ppl, initExag, finalExag = tP
						PM2(tSNE=(0.2, 6.0, 1.0), tP=(svTMF, 2000, waveN, 2, 2.0, 0.25, 6.0, 1.5))
						if svTMF:
							atlas = New.Atlas().Show()
							atlas.AtlasName = vt + '-' + vv.Dataset.Name
							MatchProteinMap(atlas, None)
					case 'tst': GetTsneRD(pList, vType='tFT', tP=(False, 2000, waveN, 2, 0.5, 0.25, 4.0, 1.0)).ShowHeatMap()
					case '2D': MainProc('P-2D')
		case 'TypeProtein':
			TypeProteinList(pList)
		case 'Siblings':
			pSet = set([pId[:4] for pId in vv.Map.SelectedItems])
			bsList = vv.Dataset.BodyListEnabled()
			vv.SelectedItems = [b.Id for b in bsList if b.Id[:4] in pSet]
		case 'Select-UniqSeq':
			SelectUniqSeq()
		case 'Align':
			AlignSeqPair(vv.Map)
		case 'P-S2':
			ProteinS2Map(pList, atlasName, samplingDist=0.5, ctrF=0.85)
		case 'S2':
			SphereView(pId)
		case 'TT':
			CreateProteinMaps(pList, atlasName, tP = (2500, 0.25, 4.0, 1.0))

MainProc(vv.EventSource.Item)

'''



dsList = list(vv.Folder.DatasetNameList)
for ds  in dsList[10:]:
	print('Dataset: ', ds)
	vv.Folder.OpenDataset(ds)
	vv.Sleep(1000)
	pp.ClickMenu('SeqVis/P-2D')

'''
