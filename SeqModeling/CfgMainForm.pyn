#MenuLabels ChmX Web Siblings vsSz SeqMap Open Align P-Map P-2D P-S2 3D 3Dx 3Ds S2 sS sU sT TT
vv.Import('SeqVis.pyn')
vv.Import('PdbLoad.pyn')
vv.Import('SphericalProj.pyn')

def SortByPosX(idList):
	idList.sort(key=lambda id:vv.Dataset.BodyForId(id).X)

def MainMain(menuKey):
	selected = list(vv.Map.SelectedItems)
	pId = selected[0] if len(selected) > 0 else None
	pList = selected if len(selected) > 0 else [b.Id for b in vv.Dataset.BodyListEnabled()]
	atlasName = None if len(pList) == 1 else f'{vv.Dataset.Name}/{vv.Map.Name}.{len(pList)}'
	ctrPressed = vv.ModifierKeys.ControlPressed	

	def PM2(*args, **kwargs):
		mp = ProteinMap2(pList, vt, 4000, filterP=(0.0, 2, 0), *args, **kwargs)
		vv.Dataset.AddMap(vt)
		mp.NormalizeView().CopyMap()
		vv.Map.Redraw()
		mp.Close()
			
	match menuKey:
		case 'ChmX': ShowChimeraX(pId)
		case 'Web':  ShowWeb(pId)
		case '3D':
			if atlasName != None: atlasName += '-3D'
			SortByPosX(pList)
			ShowProteinList(pList, includeHA=True, intRp=5, atName=atlasName, gsize=1.5, gopacity=0.5)
		case '3Dx':
			if vv.ModifierKeys.ControlPressed:
				pId = vv.PromptMessage('Protein ID: ', '????')
				if pId == None: return
			mp = ShowPDB(pId, rp=3, includeHA=True, setChainId=False, typeByChainIdx=True)
		case '3Ds':
			Merge3DList(pList)
		case 'SeqMap':
			aaGroups = GetAAGroup(idx=0)
			if atlasName != None: atlasName += '-Seq'
			CreateSeqMaps(pList, aaGroups, epochs=5000, initExag=6.0, ppl=0.1, saveTo=atlasName, decay=1.0, augCfg='s|25|0.25|1.0')
		case 'Open': 
			if pId == None:
				vv.Message('No protein selected')
				vv.Return()
			OpenCifFile(pId)
		case 'P-2D':
			if False:
				UnFoldProteinList(pList, epochs=1000, includeHA=False, wholeComplex=False, 
					samplingDist=0.0, atName=atlasName, ppl=0.10, initExag=4.0, finalExag=1.0,
					stretch=0.0, clusterStretch=0.0, iconWidth=50, glyphSize=6.0)
			else:
				CreateProteinMaps(pList, samplingDist=2.0, atlasName=atlasName, 
					tP = (1000, 3, 0.0, 0.1, 4.0, 1.0))			
		case 'P-Map':
			vList = ['pMF', 'pFT', 'sMF', 'sFT', 'rMF', 'tMF', 'tFT', '2D']
			vList = ['tMF']
			for vt in vList:
				match vt:
					case 'pMF':	
						PM2(mfL=20, tSNE=(0.05, 4.0, 0.8))
					case 'pFT':	
						PM2(waveCount=33, tSNE=(0.05, 4.0, 1.0))	
					case 'sFT':	
						PM2(aaGroups=GetAAGroup(20), tSNE=(0.05, 6.0, 0.9))
					case 'sMF':	
						PM2(aaGroups=GetAAGroup(20), mfL=20, tSNE=(0.05, 6.0, 0.8))
					case 'rMF':	
						PM2(tSNE=(0.1, 4.0, 1.0), tP=(20, 0.85, True, 1000, 0.15, 4.0, 1.0))
					case 'tMF' | 'tFT':	
						# tSNE=(ppl,initE,finalE)  tp=(epochs,waveN,intRp,stretch,   outDim,ppl,initE,finalE)
						PM2(tSNE=(0.05, 6.0, 1.0), tP=(1000, 20, 2, 0.5,     2, 0.25, 5.0, 1.5))
					case '2D': 
						MainMain('P-2D')
		case 'Siblings':
			vv.SelectedItems, _ = Siblings(selected)
			vv.Title = f'Selected: {len(selected)}, Expanded: {vv.SelectedItems.Count}'
		case 'Align':
			AlignSeqPair(vv.Map)
		case 'P-S2':
			ProteinS2Map(pList, atlasName, samplingDist=0.0, ctrF=0.85)
		case 'sS':
			if pId == None:
				raise Exception('No data selected!')
			SphereView(pId, unfolding=False)
		case 'sU':
			if pId == None:
				raise Exception('No data selected!')
			SphereView(pId, unfolding=True)
		case 'sT': # show torsion info.
			if pId == None:
				raise Exception('No data selected!')
			TorsionMap(pList[:1])
			ShowChain(pId, gopacity=0.5)
			ShowSphere2(pId, 0.95, gopacity=0.5)
		case 'vsSz':
			VisChainSize(4 if ctrPressed else 2)
		case 'S2':
			ShowSphere4(repeats=5, contracting=0.9)
		case 'TT':
			ShowBondLength('A')

def SelectChains(chType):
	ds = vv.Dataset
	nnList = vv.Map.SelectedBodies
	nnList = [b.Id for b in nnList if ds.StringAt(b.Id, 0) == chType] 
	if len(nnList) == 0:
		vv.Message('No data selected')
		vv.Return()
	return nnList
	
def ShowBondLength(chType='r'):
	dt = {}
	idIdx = 0 if chType == 'A' else 2
	for chId in SelectChains(chType):
		bList = LoadChain0(chId)
		for k, b in enumerate(bList):
			if k > 0:
				nn = b0.Name[idIdx] + b.Name[idIdx]
				if nn not in dt: 
					dt[nn] = []
				dt[nn].append(b0.DistanceTo(b))
			b0 = b
	vList = New.ValueItemList()
	for key in dt.keys():
		v = vv.Math.StdDeviation(dt[key])
		vList.Add( New.ValueItem(key, key, v) )
	New.BarView(vList).Show();

def ShowBondLength2(chType='A'):
	nnList = SelectChains(chType)
	maxCol = max([vv.Dataset.IntAt(id, 3) for id in nnList])
	nt = New.NumberTable(len(nnList), maxCol)
	for row, chId in enumerate(nnList):
		bList = LoadChain0(chId)
		nt.RowSpecList[row].Id = chId
		for k, b in enumerate(bList):
			if k > 0:
				nt.Matrix[row][k] = b0.DistanceTo(b)
			b0 = b
	vw = nt.ShowAsBarBand()
	vw.Title = f'{nt.Rows}x{nt.Columns}'

def HelixTest():
	bPID = LoadChain0(pId);
	b0 = bPID[0]
	ss.ShiftChain(bPID, -b0.X - 5.0, -b0.Y, -b0.Z)
	bList = ss.NewHelix(36)
	ss.Concatenate(bList, bPID)
	bList = Interpolate(bList, 3, True)
	cs.NormalizeChain(bList, -1)
	mp = ShowBodyList(bList)
	bs = mp.BodyList
	firstCN = ChainName(bs[0])	
	pChain = New.BodyList([b for b in bs if ChainName(b)==firstCN])
	for k in range(1000):
		cs.RotateBodyList(pChain, 0.01, 0, 1, 0)
		mp.RedrawAll()
		vv.Sleep(10)

MainMain(vv.EventSource.Item)

import random
def DoDatasetList(dnList, initMap=0, sampleSize=1000, closure=True, maxSize=0, createPMap=True, createAtlas=False):
	tm0 = time.time()
	for n, dn in enumerate(dnList):
		t0 = time.time()
		vv.Folder.OpenDataset(dn)
		ds = vv.Dataset
		cmpCnt = 0
		ds.OpenMap(ds.MapNameList[initMap])

		if sampleSize > 0:
			bs = [b.Id for b in ds.BodyListEnabled()]
			random.seed(321)
			chList = random.sample(bs, min(sampleSize, len(bs)))
			random.seed(time.time())
		else:
			chList = []

		if closure:
			chList, cmpCnt = Siblings(chList)
			L = len(chList)
			if (maxSize > 0) and (L > maxSize):
				lastId =  chList[maxSize-1][:4]
				for k in range(maxSize, L):
					if not chList[k].startswith(lastId):
						break
				chList = chList[:k]
				cmpCnt = len(set([p[:4] for p in chList]))
			#print(f'\t\t\tP-Complexes: {cmpCnt}; Siblings: {len(chList)}')

		if createPMap:
			bs = [b.Id for b in ds.BodyListEnabled()]
			vv.SelectedItems = chList
			MainMain('P-Map')

		if createAtlas:
			MainMain('P-2D')
			if vv.LastView.Name == 'Atlas': 
				vv.LastView.Close()

		t0 = time.time()-t0
		print(f'{n}: {dn}\t{t0:.1f}s;\t\tcmp:{cmpCnt}, chains:{len(chList)}')
		if vv.GuiManager.StopFlag:
			break
	tm0 = (time.time() - tm0)/3600.0
	print(f'Total Time: {tm0:.2f}hr')
	vv.Folder.Save()

'''


for dn in dnList:
	vv.Folder.OpenDataset(dn)
	mpList = list(vv.Dataset.MapNameList)
	for mp in mpList[1:]:
		vv.Dataset.DeleteMap(mp)

dnList = list(vv.Folder.DatasetNameList)[1:]
dnIndex = dnList.index('Archaea')
dnList = dnList[dnIndex:]

DoDatasetList(dnList, initMap=0, sampleSize=1000, closure=True, maxSize=10000, createPMap=True,  createAtlas=False )

DoDatasetList(dnList, initMap=1, sampleSize=0,   closure=False, createPMap=False, createAtlas=True )

DoDatasetList([vv.Dataset.Name], initMap=0, sampleSize=50,  createPMap=True, createAtlas=False )

'''
