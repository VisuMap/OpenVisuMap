#MenuLabels P-ChmX P-Web Siblings SeqMap P-Open Sh-LocPDB TypeProtein P-Map P-2D P-2Dx  P-3D P-3Dx P-3Ds  
vv.Import('SeqVis.pyn')
vv.Import('PdbLoad.pyn')
import time

def SortByPosX(idList):
	idList.sort(key=lambda id:vv.Dataset.BodyForId(id).X)

def GetAAGroup(idx=0):
	aaHydrophobic = 'AVILMFYW'
	aaPolarUncharged = 'STNQ'
	aaSpecial = 'CGP'
	aaSpC = 'C'
	aaSpG = 'G'
	aaSpP = 'P'
	aaNoPolar = 'AGILMPV'
	aaCarboxyl = 'DE'
	aaAmine = 'RHK'
	aaAromatic = 'FWY'
	aaHydroxyl = 'STY'

	match idx:
		case 0:
			return 'AVILMFYW|STNQ|CGP|RHK|DE'
		case 1:
			return '|'.join( [ aaHydrophobic, aaPolarUncharged,  aaSpecial, aaNoPolar, aaCarboxyl, aaAmine, aaAromatic, aaHydroxyl] )
		case 11:
			return [ aaHydrophobic, aaPolarUncharged,  aaSpecial, aaNoPolar, aaCarboxyl, aaAmine, aaAromatic, aaHydroxyl]
		case 2:
			return aaHydrophobic
		case 3:
			return aaAromatic
		case 4:
			from itertools import combinations
			#return ['|'.join(g) for g in combinations(list('CGPDEFWY'), 3)]
			return ['|'.join(g) for g in combinations(list('AVILMFYW'), 3)]
		case 10:
			return 'AVILMFYW|STNQ|CGP|RHK|DE|aut|cg'
		case 12:
			return 'FL|S|Y|CW|L|P|HQ|R|IM|T|N|K|S|R|V|A|D|E|G|aut|cg'
		case 13:
			return 'FLSYCW|LPHQR|IMTNKSR|VADEG|aut|cg'
		case 14:
			return 'IMTNKSR|aut|cg'
		case 9:
			return '|'.join('AVILMFYWSTNQCGPRHKDE')
		case 20:
			return 'AVILMFYW|STNQ|CGP|RHK|DE|ctu'

def CreatePMap(pList, vType):
	match vType:
		case 'pMF':  # position-mena-field
			mp = CreateProteinMap2(pList, repeats=1, vType=vType, samplingDist=0.0, epochs=1000,
				mfL=15, ppl=0.15, initExag=8.0)
		case 'pFT':
			mp = CreateProteinMap2(pList, repeats=1, vType=vType, samplingDist=0.0, epochs=1000,
				waveCount=33, ppl=0.1, initExag=6.0)	
		case 'sFT': 
			mp = CreateProteinMap2(pList, repeats=1, vType=vType, samplingDist=0.0, epochs=1000,
				aaGroups=GetAAGroup(20), ppl=0.025, initExag=6.0)
		case 'sMF':
			mp = CreateProteinMap2(pList, repeats=1, vType=vType, samplingDist=0.0, epochs=1000,
				aaGroups=GetAAGroup(20), mfL=10, ppl=0.025, initExag=6.0, finalExag=0.8)
	mp.Title = mp.Title + f':  {vType}'

def MainProc(menuKey):
	selected = list(pp.SelectedItems)
	pId = selected[0] if len(selected) > 0 else None
	pList = selected if len(selected) > 0 else [b.Id for b in vv.Dataset.BodyListEnabled()]
	atlasName = None if len(pList) == 1 else f'{vv.Dataset.Name}/{vv.Map.Name}.{len(pList)}'
	t0 = time.time()

	match menuKey:
		case 'P-ChmX': ShowChimeraX(pId)
		case 'P-Web':  ShowWeb(pId)
		case 'P-2D':
			UnFoldProteinList(pList, epochs=2500, mainChain=False, includeHA=False,  wholeComplex=False, samplingDist=0.5,
				initExag=6.0, ppl=0.1, atName=atlasName, stretch=0.1, clusterStretch=0.0, iconWidth=50, glyphSize=6.0, smtRatio=0.0)
		case 'P-2Dx':
			if atlasName != None: 
				atlasName += 'x'
			UnFoldProteinList(pList, epochs=1000, mainChain=False, includeHA=False,  wholeComplex=True, samplingDist=3.0,
				initExag=5.0, ppl=0.15, atName=atlasName, stretch=2.0, clusterStretch=1.0, iconWidth=50, smtRatio=0.0)
		case 'P-3D':
			if atlasName != None: atlasName += '-3D'
			SortByPosX(pList)
			justMainChain = vv.ModifierKeys.ControlPressed
			ShowProteinList(pList, mainChain=justMainChain, includeHA=False, atName=atlasName, smtRatio=0.0, glyphSize=1.5, glyphOpacity=0.5)
		case 'P-3Dx':
			for pId in pList:
				mp = ShowPDB(pId, rp=3, eps=0.1, includeHA=False, mainChain=False, chainNames=None, smtRatio=0.0)
				mp.ClickMenu('SeqVis/Flipping')
		case 'P-3Ds':
			Merge3DList(pList)
		case 'SeqMap':
			aaGroups = GetAAGroup(idx=0)
			if atlasName != None: atlasName += '-Seq'
			CreateSeqMaps(pList, aaGroups, epochs=5000, initExag=6.0, ppl=0.1, saveTo=atlasName, decay=1.0, augCfg='s|25|0.25|1.0')
		case 'P-Open': 
			if pId == None:
				vv.Message('No protein selected')
				vv.Return()
			OpenCifFile(pId)
		case 'Sh-LocPDB':
			from os.path import exists
			vv.SelectedItems = [b.Id for b in vv.Map.BodyList if exists(PidToPath(b.Id))]
		case 'P-Map':
			CreatePMap(pList, 'pMF')
			#for vType in ['pMF', 'pFT', 'sMF', 'sFT']: CreatePMap(pList, vType)
			'''
			for ppl in [0.01, 0.025, 0.05, 0.1, 0.20]:
				CreateProteinMap2(pList, repeats=1, vType='pMF', aaGroups=GetAAGroup(0), mfL=10, epochs=2500, ppl=ppl, staged=True, initExag=6.0, finalExag=1.0, samplingDist=0)
			'''
		case 'TypeProtein':
			TypeProteinList(pList)
		case 'Siblings':
			pId = pId[:4]
			bsList = vv.Dataset.BodyListEnabled()
			vv.SelectedItems = [b.Id for b in bsList if b.Id[:4] == pId]
	#vv.Message(f'Time: {time.time() - t0:.1f}')

MainProc(vv.EventSource.Item)

'''

'''
