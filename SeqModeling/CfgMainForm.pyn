#MenuLabels P-ChmX P-Web Siblings SeqMap P-Open Select-UniqSeq TypeProtein P-Map P-2D P-3D P-3Dx Align P-3Ds P-S2 sS sU sT TT
vv.Import('SeqVis.pyn')
vv.Import('PdbLoad.pyn')
vv.Import('SphericalProj.pyn')

def SortByPosX(idList):
	idList.sort(key=lambda id:vv.Dataset.BodyForId(id).X)

def MainProc(menuKey):
	selected = list(vv.Map.SelectedItems)
	pId = selected[0] if len(selected) > 0 else None
	pList = selected if len(selected) > 0 else [b.Id for b in vv.Dataset.BodyListEnabled()]
	atlasName = None if len(pList) == 1 else f'{vv.Dataset.Name}/{vv.Map.Name}.{len(pList)}'
	ctrPressed = vv.ModifierKeys.ControlPressed	

	def PM2(*args, **kwargs):
		mp = ProteinMap2(pList, vt, 4000, samplingDist=0.0, *args, **kwargs)
		vv.Dataset.AddMap(vt)
		mp.NormalizeView().CopyMap()
		vv.Map.Redraw()
		mp.Close()
			
	match menuKey:
		case 'P-ChmX': ShowChimeraX(pId)
		case 'P-Web':  ShowWeb(pId)
		case 'P-3D':
			if atlasName != None: atlasName += '-3D'
			SortByPosX(pList)
			ShowProteinList(pList, includeHA=True, rp=5, atName=atlasName, smtRatio=0.0, glyphSize=1.5, glyphOpacity=0.5)
		case 'P-3Dx':
			mp = ShowPDB(pId, rp=5, includeHA=True, setChainId=True, smtRatio=0.0)
			npp = [b for b in mp.BodyList if b.Name[0] == 'd' or b.Name[0] == 'r' ]
			if len(npp) > 0:
				mp.ClickMenu('SeqVis/Flipping')
		case 'P-3Ds':
			Merge3DList(pList)
		case 'SeqMap':
			aaGroups = GetAAGroup(idx=0)
			if atlasName != None: atlasName += '-Seq'
			CreateSeqMaps(pList, aaGroups, epochs=5000, initExag=6.0, ppl=0.1, saveTo=atlasName, decay=1.0, augCfg='s|25|0.25|1.0')
		case 'P-Open': 
			if pId == None:
				vv.Message('No protein selected')
				vv.Return()
			OpenCifFile(pId)
		case 'P-2D':
			if False:
				UnFoldProteinList(pList, epochs=1000, includeHA=False, wholeComplex=False, 
					samplingDist=0.0, atName=atlasName, ppl=0.10, initExag=4.0, finalExag=1.0,
					stretch=0.0, clusterStretch=0.0, iconWidth=50, glyphSize=6.0, smtRatio=0.0)
			else:
				CreateProteinMaps(pList, samplingDist=0.5, atlasName=atlasName, 
					tP = (1000, 3, 0.0, 0.1, 4.0, 1.25))
		case 'P-Map':
			vList = ['pMF', 'pFT', 'sMF', 'sFT', 'rMF', 'tMF', 'tFT', '2D']
			vList = ['tMF']
			for vt in vList:
				match vt:
					case 'pMF':	
						PM2(mfL=20, tSNE=(0.05, 4.0, 0.8))
					case 'pFT':	
						PM2(waveCount=33, tSNE=(0.05, 4.0, 1.0))	
					case 'sFT':	
						PM2(aaGroups=GetAAGroup(20), tSNE=(0.05, 6.0, 0.9))
					case 'sMF':	
						PM2(aaGroups=GetAAGroup(20), mfL=20, tSNE=(0.05, 6.0, 0.8))
					case 'rMF':	
						PM2(tSNE=(0.1, 4.0, 1.0), tP=(20, 0.85, True, 1000, 0.15, 4.0, 1.0))
					case 'tMF' | 'tFT':	
						# tSNE=(ppl,initE,finalE)  tp=(epochs,waveN,intRp,stretch,   outDim,ppl,initE,finalE)
						PM2(tSNE=(0.05, 6.0, 1.0), tP=(1000, 20, 2, 0.5,     2, 0.25, 3.0, 1.5))
					case '2D': 
						MainProc('P-2D')
		case 'TypeProtein':
			TypeProteinList(pList)
		case 'Siblings':
			pSet = set([pId[:4] for pId in selected])
			vv.SelectedItems = [b.Id for b in vv.Dataset.BodyListEnabled() if b.Id[:4] in pSet]
			vv.Title = f'Selected: {len(selected)}, Expanded: {vv.SelectedItems.Count}'
		case 'Select-UniqSeq':
			SelectUniqSeq()
		case 'Align':
			AlignSeqPair(vv.Map)
		case 'P-S2':
			ProteinS2Map(pList, atlasName, samplingDist=0.0, ctrF=0.85)
		case 'sS':
			SphereView(pId, False)
		case 'sU':
			SphereView(pId, True)
		case 'sT':
			TorsionMap(pList[:1])
			ShowChain(pId, opacity=0.5) # . RotateXYZ(0, 0.0025, 0).StartAnimation(0)
			ShowSphere2(pId, 0.95, gopacity=0.5)
		case 'TT':
			CreateProteinMaps(pList, atlasName, tP = (2500, 2, 0.2, 0.25, 4.0, 1.0))

MainProc(vv.EventSource.Item)

'''
dsList = list(vv.Folder.DatasetNameList)[1:]

for ds  in dsList:
	vv.Folder.OpenDataset(ds)
	MainProc('P-Map')
	MainProc('P-2D')
	vv.LastView.Close()

ms = AtlasMapStore('tMF Maps', True)
ms.atlas.OnItemsSelected = ''
for ds  in dsList:
	vv.Folder.OpenDataset(ds)
	mp = New.MapSnapshot().ResetSize().Show2()
	info = MapInfo(mp.Description)
	info.DS = ds
	mp.Description = info.ToStr()
	ms.AddMap('MapSnapshot').Close()
ms.atlas.Show()

'''
