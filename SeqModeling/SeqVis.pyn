import numpy as np
import math

ALPHABET = 'ARNDCEQGHILKMFPSTWYV'
PROTEIN_TABLE = 'Protein Table'

def FilterSeq(D, P):
	return ''.join([ c for c in D.upper() if c in P ])

def OpenProteinTable():
	if vv.Dataset.Name != PROTEIN_TABLE:
		vv.Folder.OpenDataset(PROTEIN_TABLE)

def GetProteinTable():
	if vv.Dataset.Name != PROTEIN_TABLE:
		pTable = vv.Folder.ReadDataset(PROTEIN_TABLE)
	else:
		pTable = vv.Dataset
	return pTable

def GetProteinSeq(pTable, pId):
	rowIdx = pTable.IndexOfRow(pId)
	return pTable.GetDataAt(rowIdx, 2)

def SaveToAtlas(atName, is3D, x0=50, y0=50):
	vwName = 'D3dRender' if is3D else 'MapSnapshot'
	if atName is not None:
		vv.AtlasManager.OpenAtlas(atName).CaptureAllOpenViews(x0, y0, vwName).Close()

cs = New.CsObject('''
public IBody MeanPoint(IList<IBody> bList){
	if (bList.Count == 0) 
		return null;
	double x = 0;
	double y = 0;
	foreach(IBody b in bList) {
		x += b.X;
		y += b.Y;
	}
	x /= bList.Count;
	y /= bList.Count;
	IBody mBody = null;
	double mDist = 1.0e10;
	foreach(IBody b in bList) {
		double d2 = (b.X - x)*(b.X - x) + (b.Y - y)*(b.Y - y);
		if (  d2 < mDist ) {
			mBody = b;
			mDist = d2;
		}
	}	
	return mBody;
}
''')

# protein embedding map information
class MapInfo():
	def __init__(self, initStr = None):
		for nm in 'pId,Gene,pLen,Epochs,InitE,FinalE,PP,WinSize,AugCfg,Is3D'.split(','):
			setattr(self, nm, None)
		if initStr is not None:
			self.ParseStr(initStr)
	def ToStr(self):
		dic = self.__dict__
		return ';'.join([f'{key}:{str(dic[key])}' for  key in dic if dic[key] is not None])
	def ParseStr(self, initStr):
		dic = self.__dict__
		for f in initStr.split(';'):
			if f is not None:
				fs = f.split(':')
				if len(fs) == 2:
					dic[fs[0]] = fs[1]

#-----------------------------------------------------------
# Code to maintain the protein table.
#-----------------------------------------------------------
 
def GetProteinIds(gSymbol):
	ds = vv.Folder.ReadDataset('Gene Features')	
	for row in range(ds.Rows):
		if ds.GetDataAt(row, 5) == gSymbol:
			pList = ds.GetDataAt(row, 17)
			return pList.split(',')
	print('Cannot find gene ' + gSymbol)
	return None

def AddProteins(gSymbol, maxCount=0):
	import urllib.request
	getUrl = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=protein&rettype=fasta&retmode=text&id='
	pList = GetProteinIds(gSymbol)
	if maxCount != 0:
		pList = pList[:maxCount]
	OpenProteinTable()
	P = {a:k for k,a in enumerate(ALPHABET)}
	typeIdx = max([b.Type for b in vv.Dataset.BodyList]) + 1
	for id in pList:
		sFasta = urllib.request.urlopen(getUrl+id).read().decode('utf-8')
		idx = sFasta.index('\n')
		desc = sFasta[1:idx]
		pSeq = FilterSeq(sFasta[idx:], P)
		vv.Dataset.AddRow(id, gSymbol, typeIdx, [desc,gSymbol,pSeq,str(len(pSeq))])
	vv.Dataset.CommitChanges()

def AddRandomSeq(N=20, L=1000):
	import random
	OpenProteinTable()
	for n in range(N):
		s = ''.join([ALPHABET[random.randint(0, 19)] for k in range(L)])
		vv.Dataset.AddRow('random'+str(n), 'Random', 15, ['rand', 'Random', s, str(len(s))])
	vv.Dataset.CommitChanges()

def GroupByType(bList):
	G = {}
	for b in bList:
		if b.Type not in G: 
			G[b.Type] = []
		G[b.Type].append(b)
	return G.values()

def CreateProteinMap(idList):	
	from collections import Counter
	pTable = GetProteinTable()
	rows, columns = len(idList), len(ALPHABET)
	if rows == 0:
		bsList = pTable.BodyListEnabled()
		rows = bsList.Count
		idList = [b.Id for b in bsList]
		print(bsList.Count, rows, len(idList))
	else:
		bsList = pTable.BodyListForId(idList)
	nt = New.NumberTable(bsList, columns)
	for row in range(rows):
		pSeq = GetProteinSeq(pTable, idList[row])
		pCnt = Counter(pSeq)
		R = nt.Matrix[row]
		fct = 10000/len(pSeq)
		for c, a in enumerate(ALPHABET):
			R[c] =fct* pCnt[a]
	for c, a in enumerate(ALPHABET):
		nt.ColumnSpecList[c].Id = a
	mds = NewMds(nt, epochs=5000, initExag=5.0, finalExag=1.0)
	mds.PerplexityRatio = 0.2
	mds.RefreshFreq = 50
	mds.Reset().Start()
	for b in mds.BodyList: 
		b.ShowName = False
	for B in GroupByType(mds.BodyList):
		cs.MeanPoint(B).ShowName = True
	mds.RedrawBodies()


#-----------------------------------------------------------------------------
def NewDataset1(P, pSeq, decay=1.0):
	L = len(P)
	hv = np.zeros((L))  # head-vector.
	stepSz = 0.1*np.ones((L))
	dt = np.zeros([len(pSeq), len(P)], np.float32)
	for k, c in enumerate(pSeq):
		hv += stepSz
		hv[P[c]] = 0
		dt[k] = hv
	dt = decay*np.reciprocal(decay+dt)

	aData = AugmentData(len(pSeq), augCfg='b|0.0075')
	dt = np.hstack([dt, aData])

	nt = mm.ToTable(dt)
	for k, rs in enumerate(nt.RowSpecList):	
		rs.Type = P[pSeq[k]]
		rs.Name = pSeq[k]

	mds = New.MdsCluster(nt)
	mds.ReadOnly = True
	mds.InitialExaggeration = 8.0
	mds.FinalExaggeration = 1.0
	mds.PerplexityRatio = 0.1
	mds.Repeats = 2
	mds.MaxLoops = 10000
	mds.Is3D = True	
	mds.AutoNormalizing = True
	mds.Show().Start()

'''
NewDataset1(P, pSeq, decay=1000.0)

P = {a:k for k,a in enumerate(ALPHABET)}
'''

def NewDataset0(P, pSeq, winSize=0):
	pSeq = FilterSeq(pSeq, P)
	if winSize == 0: 
		winSize = int(6.086+0.015652*len(pSeq))
		winSize = max(5, int(0.5*winSize))
	ww = [1.0 - k/winSize for k in range(winSize)]  # window weights
	W, L = len(ww), len(pSeq)
	dt = np.zeros([len(pSeq), len(P)], np.float32)
	for row, c in enumerate(pSeq):
		col0 = P[c]
		W0 = -W+1  # symmetric window
		#W0 = -5
		for w in range(W0, W):
			row_w = row + w
			if row_w < 0 or row_w >= L:
				continue
			col = P[pSeq[row_w]]
			dt[row, col] += ww[abs(w)]	
	return dt

def AugmentData(N, augCfg='a|500|2.0|2.0'):
	fs = augCfg.split('|')
	match fs[0][0]:
		case 'a': # spiral augmentation
			nC = int(fs[1])   # point-per-circle
			R  = float(fs[2]) # radius of circle
			sC = float(fs[3]) # width of circle
			phase = float(fs[4]) if len(fs)==5 else 0
			a = 2.0*math.pi/nC  # angular speed
			sX = sC/nC  # speed in X direction.
			A = np.zeros((N, 3), np.float32 )
			for n in range(N):
				A[n] = R*math.sin(n*a+phase), R*math.cos(n*a+phase), n*sX
		case 'b':  # simple linear augmentation
			sf = float(fs[1])/1000.0
			A = np.zeros((N, 1), np.float32 )
			for n in range(N):
				A[n] = sf * n
		case 'c':  # circle augmentation
			R = float(fs[1])
			A = np.zeros((N, 2), np.float32 )
			a = 2.0*math.pi/N
			phase = float(fs[2]) if len(fs)==3 else 0
			for n in range(N):
				A[n] = R*math.sin(n*a+phase), R*math.cos(n*a+phase)
	return A


def NewDataset(S, winSize=0, alphbetList=ALPHABET, augCfg='a|500|2.0|2.0'):
	P = {a:k for k,a in enumerate(alphbetList)}
	dt = np.hstack([NewDataset0(P, S, winSize), AugmentData(len(S), augCfg)])
	nt = mm.ToTable(dt)
	for k, c in enumerate(S):
		nt.RowSpecList[k].Name = c
		nt.RowSpecList[k].Type = P[c]
	for col in range(len(P)):
		nt.ColumnSpecList[col].Id = alphbetList[col]
	return nt

#-----------------------------------------------------------------------------

def NewMds(nt, epochs=10000, is3D=False, initExag=10.0, finalExag=1.0, pp=0.05, repeats=1):
	mds = New.MdsCluster(nt)
	mds.Show()
	mds.MaxLoops = epochs
	mds.RefreshFreq = 500
	mds.InitialExaggeration = initExag
	mds.FinalExaggeration = finalExag
	mds.PerplexityRatio = pp
	mds.Metric = 'EuclideanMetric'
	mds.Repeats = repeats
	mds.ReadOnly = True
	mds.Is3D = is3D
	mds.AutoNormalizing =True
	mds.GlyphSet = '36 Clusters'
	return mds

def RunMds(mds, repeats=1, glyphSize=0.8, glyphOpacity=0.5):
	mds.Repeats = repeats
	mds.Reset().Start()
	if mds.Repeats == 1:
		mp = mds.ShowSnapshot()
	mpName = 'D3dRender' if mds.Is3D else 'MapSnapshot'
	for mp in vv.FindFormList(mpName):
		mp.GlyphOpacity = glyphOpacity
		mp.GlyphSize = glyphSize
		mp.Redraw()
	return mds

#-------------------------------------------------------------------

def ShowMapData(pMap):
	info = MapInfo(pMap.Description)
	pTable = GetProteinTable()
	pSeq = GetProteinSeq(pTable, info.pId)
	nt = NewDataset(pSeq, winSize=int(info.WinSize), augCfg=info.AugCfg)
	nt.ShowHeatMap().NormalizeView()

def CreateMaps(pList, epochs=10000, winSize=0, repeats=1, saveTo=None, glyphSize=0.8, pp=0.05,
		glyphOpacity=0.5, is3D=False, initExag=10.0, finalExag=1.0, augCfg='a|500|2.0|2.0'):
	if len(pList) <= 0:
		vv.Message("No protein group selected")
		vv.Return(0)
	pTable = GetProteinTable()
	mds = NewMds(None, epochs=epochs, is3D=is3D, initExag=initExag, finalExag=finalExag, pp=pp)
	info = MapInfo()
	info.Epochs = epochs
	info.InitE = initExag
	info.FinalE = finalExag
	info.PP = mds.PerplexityRatio
	info.WinSize = winSize	
	info.Is3D = is3D
	info.AugCfg = augCfg
	for k, pId in enumerate(pList):
		pSeq = GetProteinSeq(pTable, pId)
		nt = NewDataset(pSeq, winSize=winSize, augCfg=augCfg)
		mds.SetTrainingData(nt)
		RunMds(mds, repeats=repeats, glyphSize=glyphSize, glyphOpacity=glyphOpacity)
		info.pId = pId
		info.pLen = len(pSeq)
		map = vv.LastView
		map.Title = f'{k}: {pId}, N: {nt.Rows}'
		map.Description = info.ToStr()
		if (k+1)%8 == 0:
			SaveToAtlas(saveTo, is3D)
	mds.Close()
	SaveToAtlas(saveTo, is3D)

def Scanning(pMap, stepSize=20):
	bsList = [b.Id for b in pMap.BodyList]
	inc = max(1, int(stepSize/2))
	for pause in [50, 150]:
		for k in range(0, len(bsList), inc):
			vv.SelectedItems = bsList[k:k+stepSize]
			vv.Sleep(pause)
			if pMap.SelectedItems.Count == 0: return
		vv.Sleep(1000)

#-------------------------------------------------------------------

def ShowTracingSeq(pMap):
	info = MapInfo(pMap.Description)
	pSeq = GetProteinSeq(GetProteinTable(), info.pId)
	tp = New.TextPanel("Protein Sequence", pSeq)
	tp.Tag = pMap
	pMap.Tag = tp
	tp.OnSelection = '@OnSeqSelection()'
	pMap.AddEventHandler('ItemsSelected', '@OnSeqSelected()')
	tp.Show()

def OnSeqSelection():
	pMap = pp.Tag
	if pMap.TheForm.IsDisposed or not vv.MouseButtons.LeftButtonPressed:
		return
	iBegin = pp.TextBox.SelectionStart
	iEnd = pp.TextBox.SelectionStart + pp.TextBox.SelectionLength
	pMap.SelectedItems = [f'R{i}' for i in range(iBegin, iEnd)]

def MarkSeq(tb, idxBegin, idxEnd):
	if idxEnd<=idxBegin:
		return
	tb.Select(idxBegin, idxEnd-idxBegin)
	tb.SelectionBackColor = New.Color('Green')	
	#print('M:', idxBegin, idxEnd)

def ClearMark(tb):
	tb.Select(0, len(tb.Text))
	tb.SelectionBackColor = tb.BackColor	
	tb.SelectionLength = 0

'''
MarkSeq(pp.TextBox, 6900, 6907)
ClearMark(pp.TextBox)
print(len(pp.Text))
MarkSeq(pp.TextBox, 5495, 5500)
'''

def OnSeqSelected():
	tp = pp.Tag	
	if tp.TheForm.IsDisposed: 
		return
	tb = tp.TextBox
	idxList = sorted( [int(id[1:]) for id in pp.SelectedItems] )
	ClearMark(tb)
	L = len(idxList)
	k0 = 0
	while k0 < L:
		v0 = idxList[k0]
		if k0 == L-1:
			MarkSeq(tb, v0, v0+1)
			break
		for k1 in range(k0+1, L):
			if idxList[k1] - idxList[k1-1] > 1:
				MarkSeq(tb, v0, idxList[k1-1]+1)
				break
		if k1 == L-1:
			MarkSeq(tb, idxList[k0], idxList[k1]+1)
			break
		k0 = k1

#-----------------------------------------------------------------------

def ResetAtlasMaps(atlas, itemList, mpWidth=1000, mpHeight=700, gSize=0.35, gOpacity=0.5, hiddenSize=7, reset=False):
	for it in itemList:
		mp = it.Open()
		if reset:
			for b in mp.BodyListEnabled():
				b.Type = 0
				b.Hidden = False
				b.ShowName = False
		mp.GlyphSize = gSize
		mp.GlyphOpacity = gOpacity
		mp.HiddenBodySize = hiddenSize
		mp.NameLabelColor = New.Color('Yellow')
		mp.NameLabelFont = New.Font('Microsoft Sans Serif', 18.0)
		mp.Resize(0,0,mpWidth,mpHeight)
		#mp.NormalizeView()
		info = MapInfo(mp.Description)
		it.LabelStyle = 2
		it.Name = info.pId
		mp.Close()

def CreateMapById(pMap, repeats=1):
	info = MapInfo(pMap.Description)
	pTable = GetProteinTable()
	pSeq = GetProteinSeq(pTable, info.pId)
	nt = NewDataset(pSeq, winSize=int(info.WinSize), augCfg=info.AugCfg)
	mds = NewMds(nt, epochs=int(info.Epochs), is3D=eval(info.Is3D), 
		initExag=float(info.InitE), finalExag=float(info.FinalE), pp=float(info.PP))
	RunMds(mds, repeats=repeats,)
	vv.LastView.Description = info.ToStr()

def CreateSeqMap(pSeq, pSeq1=None, epochs=10000, winSize=0, repeats=1, pp=0.15, saveTo=None, glyphSize=0.8, 
		glyphOpacity=0.5, is3D=True, initExag=10.0, finalExag=1.0,  augCfg='a|500|2.0|2.0'):
	if pSeq1 is None:
		nt = NewDataset(pSeq, augCfg=augCfg)
	else:
		P = {a:k for k,a in enumerate(ALPHABET)}
		N, N1 = len(pSeq), len(pSeq1)
		nt = np.vstack( [NewDataset0(P, pSeq), NewDataset0(P, pSeq1)] )
		A = np.vstack( [AugmentData(N, augCfg), AugmentData(N1, augCfg + '|' + str(0.125*math.pi)) ] )
		nt = mm.ToTable(np.hstack((nt, A)))
		for row in range(N+N1):
			nt.RowSpecList[row].Type = 0 if row<N else 1
	mds = NewMds(nt, epochs=epochs, is3D=is3D, initExag=initExag, 
		finalExag=finalExag, pp=pp, repeats=repeats)
	mds.Reset().Start()
	mds.Show3DView().NormalizeView()
	mds.Close()

'''========================================================================================
pSeq1 = GetProteinSeq(pTable, 'NP_001394894.1')
pSeq1 = GetProteinSeq(pTable, 'UGU37881.1')

pSeq = GetProteinSeq(pTable, 'random0')
pSeq1 = GetProteinSeq(pTable, 'random1')

pSeq = GetProteinSeq(pTable, 'EAW60935.1')
pSeq1 = GetProteinSeq(pTable, 'EAW60936.1')

pSeq = 'MTVEFEECVKDSPRFRATIDEVETDVVEIEAKLDKLVKLCSGMVEAGKAYVSTSRLFVSGVRDLSQQCQGDTVISECLQRFADSLQEVVNYHMILFDQAQRSVRQQLQSFVKEDVRKFKETKKQFDKVREDLELSLVRNAQAPRHRPHEVEEATGALTLTRKCFRHLALDYVLQINVLQAKKKFEILDSMLSFMHAQSSFFQQGYSLLHQLDPYMKKLAAELDQLVIDSAVEKREMERKHAAIQQRTLLQDFSYDESKVEFDVDAPSGVVMEGYLFKRASNAFKTWNRRWFSIQNSQLVYQKKLKDALTVVVDDLRLCSVKPCEDIERRFCFEVLSPTKSCMLQADSEKLRQAWVQAVQASIASAYRESPDSCYSERLDRTASPSTSSIDSATDTRERGVKGESVLQRVQSVAGNSQCGDCGQPDPRWASINLGVLLCIECSGIHRSLGVHCSKVRSLTLDSWEPELLKLMCELGNSAVNQIYEAQCEGAGSRKPTASSSRQDKEAWIKDKYVEKKFLRKAPMAPALEAPRRWRVQKCLRPHSSPRAPTARRKVRLEPVLPCVAALSSVGTLDRKFRRDSLFCPDELDSLFSYFDAGAAGAGPRSLSSDSGLGGSSDGSSDVLAFGSGSVVDSVTEEEGAESEESSGEADGDTEAEAWGLADVRELHPGLLAHRAARARDLPALAAALAHGAEVNWADAEDEGKTPLVQAVLGGSLIVCEFLLQNGADVNQRDSRGRAPLHHATLLGRTGQVCLFLKRGADQHALDQEQRDPLAIAVQAANADIVTLLRLARMAEEMREAEAAPGPPGALAGSPTELQFRRCIQEFISLHLEES'
pSeq1 = 'MTVEFEECVKDSPRFRATIDEVETDVVEIEAKLDKLVKLCSGMVEAGKAYVSTSRLFVSGVRDLSQQCQGDTVISVRGRLTSDLKECLQRFADSLQEVVNYHMILFDQAQRSVRQQLQSFVKEDVRKFKETKKQFDKVREDLELSLVRNAQAPRHRPHEVEEATGALTLTRKCFRHLALDYVLQINVLQAKKKFEILDSLDQLVIDSAVEKREMERKHAAIQQRTLLQDFSYDESKVEFDVDAPSGVVMEGYLFKRASNAFKTWNRRWFSIQNSQLVYQKKLKDALTVVVDDLRLCSVKPCEDIERRFCFEVLSPTKSCMLQADSEKLRQAWVQAVQASIASAYRESPDSCYSERLDRTASPSTSSIDSATDTRERGVKGESVLQRVQSVAGNSQCGDCGQPDPRWASINLGVLLCIECSGIHRSLGVHCSKVRSLTLDSWEPELLKLMCELGNSAVNQIYEAQCEGAGSRKPTASSSRQDKEAWIKDKYVEKKFLRKAPMAPALEAPRRWRVQKCLRPHSSPRAPTARRKVRLEPVLPCVAALSSVGTLDRKFRRDSLFCPDELDSLFSYFDAGAAGAGPRSLSSDSGLGGSSDGSSDVLAFGSGSVVDSVTEEEGAESEESSGEADGDTEAEAWGLADVRELHPGLLAHRAARARDLPALAAALAHGAEVNWADAEDEGKTPLVQAVLGGSLIVCEFLLQNGADVNQRDSRGRAPLHHATLLGRTGQVCLFLKRGADQHALDQEQRDPLAIAVQAANADIVTLLRLARMAEEMREAEAAPGPPGALAGSPTELQFRRCIQEFISLHLEES'

CreateSeqMap(pSeq, pSeq1, initExag=5.0, winSize=1, repeats=1, augCfg='a|200|2.0|3.0')
CreateSeqMap(pSeq, pSeq1, initExag=5.0, winSize=0, repeats=1, augCfg='b|0.02')
CreateSeqMap(pSeq, pSeq1, initExag=5.0, winSize=0, repeats=1, augCfg='c|2.0|0.2')

CreateSeqMap(pSeq1, initExag=5.0, repeats=1, augCfg='a|500|2.0|4.0')

pTable = GetProteinTable()
pSeq = GetProteinSeq(pTable, 'SYNE2')

def FS(ch, c):
	return c if c==ch else '_'
def FilterSq(idx):
	c = ALPHABET[idx]
	pp.Text = ''.join([FS(ch, c) for ch in pSeq])
FilterSq(16) #0:19  

from collections import Counter

def ShowFreq(sId):
	pTable = GetProteinTable()
	pSeq = GetProteinSeq(pTable, sId)
	K = 50
	nt = New.NumberTable(20, K)
	for idx in range(20):
		c = ALPHABET[idx]
		nt.RowSpecList[idx].Id = c
		s = ''.join([FS(ch, c) for ch in pSeq])
		cnt = Counter([ len(blk) for blk in s.split(c) ])
		R = nt.Matrix[idx]
		for k in cnt:
			if k<K:
				R[k] = cnt[k]
	bb = New.BarBand(nt)
	bb.BaseLineType = 0	
	bb.Title = sId
	bb.Show()

for sId in ['NP_001361665.1', 'SYNE2', 'Q03001.4', 'EAW58036.1', 'XP_054199104.1']:
	ShowFreq(sId)

ShowFreq('NP_001394626.1')

for sId in 'EAW58034.1,EAW58035.1,EAW58036.1,NP_003473.3,NP_001394626.1,NP_001361665.1,SYNE2,Q03001.4,EAW58036.1,XP_054199104.1'.split(','):
	ShowFreq(sId)

'''
