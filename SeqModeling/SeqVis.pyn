import numpy as np
import math, random, time

GENE_TABLE = 'Gene Features'
ALPHABET = 'ARNDCEQGHILKMFPSTWYV'
P = {ALPHABET[k]:k for k in range(len(ALPHABET))}
P3 = {'ALA':'A', 'ARG':'R', 'ASN':'N', 'ASP':'D', 'CYS':'C',
      'GLU':'E', 'GLN':'Q', 'GLY':'G', 'HIS':'H', 'ILE':'I',
		'LEU':'L', 'LYS':'K', 'MET':'M', 'PHE':'F', 'PRO':'P',
		'SER':'S', 'THR':'T', 'TRP':'W', 'TYR':'Y', 'VAL':'V'}

def FilterSeq(D, P):
	return ''.join([ c for c in D.upper() if c in P ])

def GetProteinTable(dsName):
	if vv.Dataset.Name != dsName:
		pTable = vv.Folder.ReadDataset(dsName)
	else:
		pTable = vv.Dataset
	return pTable

def AssertProteinTable():
	if (vv.Dataset.Columns < 4) or ( vv.Dataset.ColumnSpecList[2].Id != 'ProteinSeq'):
		vv.Message('The current dataset is not a protein table')
		vv.Return()
	return vv.Dataset

def AssertSeqMap(pMap):
	info = MapInfo(pMap.Description)
	if info.pId != None:
		return
	else:
		vv.Message('The view is not a protein seq map')
		vv.Return()

def LoadSeqModeling(seqdll = 'SeqModeling.dll', className = 'VisuMap.SeqModeling'):
	from shutil import copy
	from os.path import exists
	from os import stat
	dllFile = vv.CurrentScriptDirectory + '/' + seqdll
	srcFile = vv.CurrentScriptDirectory + '/' + 'SeqModeling.cs'
	if not exists(dllFile) or stat(dllFile).st_mtime < stat(srcFile).st_mtime:
    	#msbuild = '"C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin/MSBuild.exe"'
		#vv.StartProcess(msbuild, 'SeqModeling.csproj /p:Configuration=Release', False).WaitForExit(1000)
		copy(vv.CurrentScriptDirectory + '/bin/Release/' + seqdll, vv.CurrentScriptDirectory)
		#copy(vv.CurrentScriptDirectory + '/bin/Debug/' + seqdll, vv.CurrentScriptDirectory)
	vv.LoadLibrary(dllFile)
	return New.Instance(className)

if 'cs' not in globals():
	cs = LoadSeqModeling()

ss = New.CsObject('''

public IList<string> SelectByAA(IList<IBody> bList, string pAA) {
	return bList.Where(b=>pAA.Contains(b.Name[0])).Select(b=>b.Id).ToList();
}

public void SwapHiddenBodies(List<IBody> bsList) {
    foreach(var b in bsList)
		b.Hidden = !b.Hidden;
}

public List<string> FlatSampling(List<string> chIds, double minDist) {
	IList<IBody> bsList = vv.Dataset.BodyListForId(chIds);
	List<IBody> sampling = New.BodyList();
	double limit = minDist * minDist;
	foreach(IBody b in bsList) {
		bool isSampled = false;
		double bX = b.X;
		double bY = b.Y;
		for(int k=0; k<sampling.Count; k++){
			IBody a = sampling[k];
			double dx = a.X - bX;
			double dy = a.Y - bY;
			if ( (dx*dx + dy*dy) < limit ) {
				isSampled = true;
				break;
			}
		}
		if ( ! isSampled )
			sampling.Add(b);
	}
	return sampling.Select(b=>b.Id).ToList();
}

public List<IBody> SetBodyType(List<IBody> bsList, string pId, int type) {
	for(int k=0; k<bsList.Count; k++){
		bsList[k].Id = pId ;
		bsList[k].Type = (short)type;
	}
	return bsList;
}

public void LoopSection(IMap3DView mp, int selLen=25) {
	var bs = mp.BodyList;
	int L;
	for(L=0; L<bs.Count; L++) 
		if (bs[L].Id != bs[0].Id)
			break;
	for(int idx = 0; idx<L; idx+=2) {
	   string cId = "";
		int k = 0;
		int idx2 = idx + selLen;
		foreach(IBody b in bs) {
			if (b.Id != cId) {
				k = 0;
				cId = b.Id;
			} else 
				k++;
			b.Hidden = ! ( (k>=idx) && (k<idx2) );
		}
		mp.Redraw();
		vv.Sleep(20);
		if ( vv.ModifierKeys.ControlPressed )
			break;
	}

	vv.Sleep(500);
	int maxType = bs.Select(b=>b.Type).Max();
	for(int t=0; t<=maxType; t++) {
		if ( vv.ModifierKeys.ControlPressed )
			break;
		foreach(var b in bs)
			b.Hidden = (b.Type != t);
		mp.Redraw();
		vv.Sleep(500);
	}
		
}
''')


# protein embedding map information
class MapInfo():
	def __init__(self, initStr = None):
		for nm in 'pId,Gene,pLen,DS,Epochs,InitE,FinalE,PP,AugCfg,Is3D,Mtd,SF,CF,PT'.split(','):
			setattr(self, nm, None)
		if initStr is not None:
			self.ParseStr(initStr)
	def Set(self, name, value):
		setattr(self, name, value)
	def Get(self, name):
		return getattr(self, name)
	def Extend(self, name, value):
		if self.Has(name):
			newV = self.Get(name) + ',' + str(value)
		else:
			newV = str(value)
		self.Set(name, newV)
	def Has(self, attrName):
		return hasattr(self, attrName)
	def Init(self, epochs, is3D, initExag, finalExag, ppl):
		self.Epochs = epochs
		self.Is3D = is3D
		self.InitE = initExag
		self.FinalE = finalExag
		self.PP = ppl
		return self
	def SetMds(self, mds):
		self.Epochs = mds.MaxLoops
		self.InitE = mds.InitialExaggeration
		self.FinalE = mds.ExaggerationFinal
		self.PP = mds.PerplexityRatio
		self.Is3D = mds.Is3D
		return self		
	def ToStr(self):
		dic = self.__dict__
		return ';'.join([f'{key}:{str(dic[key])}' for  key in dic if dic[key] is not None])
	def ParseStr(self, initStr):
		dic = self.__dict__
		for f in initStr.split(';'):
			if f is not None:
				fs = f.split(':')
				if len(fs) == 2:
					dic[fs[0]] = fs[1]

class AtlasMapStore():	
	def __init__(self, atName, tgtViewName, clearAtlas):
		self.atlas = New.Atlas(atName)
		self.atlas.EventEnabled = True
		self.atlas.OnItemsSelected = "ResetAtlas()"
		self.atlas.HiddenItemSize = 3
		if clearAtlas:
			self.atlas.Clear()
		self.viewName = tgtViewName
	def AddMaps(self):
		for fm in vv.FindFormList(self.viewName):
			fm.MapZoomFactor = 0.9
			info = MapInfo(fm.Description)
			item = self.atlas.CaptureItem(fm)
			item.Name = info.pId
			item.Id = info.pId
			item.CacheImage = True
			if fm.Name == 'D3dRender':
				fm.Close()
	def AddMap(self):
		fmList = vv.FindFormList(self.viewName)
		if fmList.Count > 0:
			fm = fmList[0]
			info = MapInfo(fm.Description)
			item = self.atlas.CaptureItem(fm)
			item.Name = info.pId
			item.Id = info.pId
			item.CacheImage = True
			return fm
		else:
			return None
	def Close(self):
		self.atlas.SaveAtlas()
		self.atlas.Close()

def NewMapStore(atName, is3D=True, clearStore=False):
	if atName is None:
		return None
	tgtViewName = 'D3dRender' if is3D else 'MdsCluster'
	store = AtlasMapStore(atName, tgtViewName, clearStore)
	return store

#-----------------------------------------------------------
# Code to maintain the protein table.
#-----------------------------------------------------------

def Sym2Id(ds, gSymbol):
	for row in range(ds.Rows):
		if ds.GetDataAt(row, 5) == gSymbol:
			return ds.BodyList[row].Id
	print('Cannot find gene ' + gSymbol)
	return None

def Id2Sym(ds, gId):
	rowIdx = ds.IndexOfRow(gId)
	if rowIdx >= 0:
		return ds.GetDataAt(rowIdx, 5)
	else:
		return None

def GetProteinIds(ds, gId):
	rowIdx = ds.IndexOfRow(gId)
	if rowIdx >= 0:
		pList = ds.GetDataAt(rowIdx, 17)
		return pList.split(',')
	else:
		return None

def ParseXml(pList, maxCount, minLen, maxLen):
	import urllib.request
	pList = pList[:100]
	rqUrl='https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=protein&&api_key=f415a83f720db9a3ed1693cfd833cef27208&id=' + ','.join(pList)
	xmlDoc = urllib.request.urlopen(rqUrl).read().decode('utf-8')
	infoList = []
	used = set()
	pLen, pName = 0, ''
	for s in xmlDoc.splitlines():
		if s.find('"Length"') > 0:
			pLen = int( s.split('>')[1][:-6] )
		if s.find('"AccessionVersion"') > 0:
			pName = s.split('>')[1][:-6]
			if (pLen>=minLen) and (pLen<maxLen) and (pLen not in used):
				infoList.append( (pName, pLen) )
				used.add(pLen)
		if len(infoList) >= maxCount:
			break
	return infoList

def AddProteins(ds, gId, maxCount=20, minLen=400, maxLen=1000_000):
	import urllib.request
	getUrl = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=protein&rettype=fasta&retmode=text&api_key=f415a83f720db9a3ed1693cfd833cef27208&id='
	gSymbol = Id2Sym(ds, gId)
	pList = GetProteinIds(ds, gId)
	if len(pList) == 0 or pList[0] == "-":
		return gSymbol, 0
	random.shuffle(pList)
	infoList = ParseXml(pList, maxCount, minLen, maxLen)
	if len(infoList) == 0:
		return gSymbol, 0

	typeIdx = max([b.Type for b in vv.Dataset.BodyList]) + 1 if vv.Dataset.BodyCount > 0 else 0
	pIds = ','.join([ pId for (pId, _) in infoList ])
	sFastaList = urllib.request.urlopen(getUrl+pIds).read().decode('utf-8')
	fastaList = sFastaList.split('>')
	vv.DoEvents()
	if vv.GuiManager.StopFlag:
		vv.Return()

	for s in fastaList:
		sFasta = s.strip()
		if len(sFasta) == 0:
			continue
		idx = sFasta.index('\n')
		desc = gId + ': ' + sFasta[0:idx]
		idx2 = sFasta.index(' ')
		pId = sFasta[:idx2]
		pSeq = FilterSeq(sFasta[idx:], P)
		pLen = len(pSeq)
		vv.Dataset.AddRow(pId, gSymbol, typeIdx, [desc,gSymbol,pSeq,str(pLen)])
	vv.Dataset.CommitChanges()
	return gSymbol, len(infoList)

def AddRandomSeq():
	import random
	ds = vv.Dataset
	idList = ['3G7T', '3LPX', '4AVZ', '1U5I']
	pList = [ ds.StringAt(pId, 2) for pId in idList]
	rType = 53
	N = 1000
	mpc = 50    # mutation percentage
	idx = ds.Rows
	for pSeq in pList:
		pLen = len(pSeq)
		for n in range(N):
			rList = []
			for k in range(pLen):
				p = random.randrange(10000)
				c = pSeq[k] if p > mpc * 100 else ALPHABET[random.randrange(20)]
				rList.append(c)
			rSeq = ''.join(rList)
			rLen = str(len(rSeq))
			ds.AddRow(f'R{idx}', '', rType, ['', '', rSeq, rLen, '0.0'])
			idx += 1
	ds.CommitChanges()

def GetFourier(waveLen, waveCount):
	ft = vv.FindPluginObject('WaveTransforms')
	if ft == None:
		vv.Message('Wave-Transforms plugin not installed!')
		vv.Return()
	#ft = ft.NewHaar(waveLen)
	#ft = ft.NewWaveletD4(waveLen)
	ft = ft.NewFourier(waveLen)
	tm = ft.BaseMatrix
	# The columns of tm are the based vectors. The first half are real; the second half are imaginary.
	# The column type are the frequency of the base vectors. Sorting columns-by-type will move all
	# low frequency columns to the beginning of the table; so that the next stmt will select
	# the low frequency (real and imaginary) bases.
	tm = tm.SortColumnsOnType(True)
	coList = list(range(tm.Columns))[0:waveCount]
	return tm.SelectColumns(coList)

def SelectHelixAA(nt):
	rsList = nt.RowSpecList
	idxList = [ k for k in range(nt.Rows) if rsList[k].Name[-1] in set(['h', 'b']) ]
	#idxList = [ k for k in range(nt.Rows) if rsList[k].Name[-1] == 'h' ]
	if len(idxList) > 20:
		nt = nt.SelectRows(idxList)
	return nt

def GetMeanFieldTrans(pList, L=20):
	bList = vv.Dataset.BodyListForId(pList)
	D = New.NumberTable(bList, L*3)
	for k, pId in enumerate(pList):
		if (k>0) and (k%200 == 0):
			vv.Title = f'Reading: {k}:{pId}'
			vv.DoEvents()
		nt = LoadMainChain(pId)
		#nt = SelectHelixAA(nt)
		#cs.LocalSmoothen2(nt.Matrix, smoothenRatio=0.1, repeats=2)
		cs.PcaNormalize(nt)
		cs.RowDifferentiation(nt)
		cs.MeanFieldTrans(nt, D.Matrix[k])
	return D

def GetS2MF(pList, L=20):
	bList = vv.Dataset.BodyListForId(pList)
	D = New.NumberTable(bList, L*2)
	for k, pId in enumerate(pList):
		if (k>0) and (k%200 == 0):
			vv.Title = f'Reading: {k}:{pId}'
			vv.DoEvents()
		nt = LoadMainChain(pId)
		cs.ToSphere(nt, 0.9)
		cs.PcaNormalize2D(nt)
		cs.MeanFieldTrans2D(nt, D.Matrix[k])
	return D	

def GetFourierTrans(pList, waveLen, waveCount):
	# The first component of the FT is the sume of all components which
	# will be zero because of the centerization before apply FT. Thus, we remove
	# the useless first FT component.
	tm = GetFourier(waveLen, waveCount+1)
	tm = tm.RemoveColumns(New.IntArray(0))
	L = 3*waveCount
	pD = New.NumberTable(vv.Dataset.BodyListForId(pList), L)
	for k, pId in enumerate(pList):
		if (k>0) and (k%200 == 0):
			vv.Title = f'Reading: {k}:{pId}'
			vv.DoEvents()
		nt = LoadMainChain(pId)
		#nt = SelectHelixAA(nt)
		#cs.LocalSmoothen2(nt.Matrix, smoothenRatio=0.1, repeats=2)
		cs.PcaNormalize(nt)
		#cs.RowDifferentiation(nt)
		cs.FourierTrans(tm, nt, pD.Matrix[k])
	return pD

def GetFourierTransSeq(pList, aaGroups, waveLen, waveCount):
	tm = GetFourier(waveLen, waveCount)	
	#Scaling base vectors to reduce dominance of the first base that reflect the seq-length.
	for R in tm.Matrix:
		for k, f in enumerate([1.0, 4.0, 4.0, 2.0, 2.0]): 
			R[k] *= f
	seqList = []
	pTable = vv.Dataset
	for pId in pList:
		rowIdx = pTable.IndexOfRow(pId)
		if rowIdx >= 0:
			seqList.append( pTable.GetDataAt(rowIdx, 2) )
	return cs.VectorizeProtein(seqList, aaGroups, tm)

def GetMFSeq(pList, aaGroups, mfL):
	seqList = []
	ds = vv.Dataset
	for pId in pList:
		rowIdx = ds.IndexOfRow(pId)
		if rowIdx >= 0:
			seqList.append( ds.GetDataAt(rowIdx, 2) )
	return cs.MFVectorize(seqList, aaGroups, mfL)


def CreateProteinMap2(pList, epochs=2000, is3D=False, initExag=6.0, finalExag=1.0, ppl=0.05,
		vType='sMF', mfL=50, s2L= 50, aaGroups='A', waveLen=1024, waveCount=33, 
		staged=False, repeats=0, samplingDist=0):
	pTable = AssertProteinTable()	

	if samplingDist > 0:
		pList = ss.FlatSampling(pList, samplingDist)
		vv.Title = f'Sampled {len(pList)} chains!'
		if vv.ModifierKeys.ControlPressed:
			vv.SelectedItems = pList
			return

	# vectorizing the sequence to a table.
	if vType == 'pMF':
		dt = GetMeanFieldTrans(pList, L=mfL)
	elif vType == 'pFT':
		dt = GetFourierTrans(pList, waveLen, waveCount)
	elif vType == 'sFT': 
		dt = GetFourierTransSeq(pList, aaGroups, waveLen, waveCount)
	elif vType == 'sMF': 
		dt = GetMFSeq(pList, aaGroups, mfL)
	elif vType == 'rMF':
		dt = GetS2MF(pList, L=s2L)
	else:
		vv.Message('Invalid vectorization type: ' + vType)
		return

	for k, b in enumerate(pTable.BodyListForId(pList)):
		dt.RowSpecList[k].CopyFromBody(b)

	mds = NewMds(dt, epochs=epochs, is3D=is3D, glyphSize=1.5, initExag=initExag, finalExag=finalExag, ppl=ppl)
	mds.StagedTraining = staged
	info = MapInfo().Init(epochs, is3D, initExag, finalExag, ppl)
	info.Mtd = 'Hrm'  
	info.Set('aaG', aaGroups)
	info.Set('wvL', waveLen)
	info.Set('wvCnt', waveCount)
	info.Set('vType', vType)
	info.Set('mfL', mfL)

	snMap = RunMds(mds, repeats=repeats, info=info)
	if repeats>=1:
		mds.Close()
	return snMap

#-----------------------------------------------------------------------------

def ShowWeb(pId):
	pId = pId[:4]
	if vv.Dataset.ColumnSpecList[0].Id == 'PID':
		vv.StartProcess(f'https://rcsb.org/3d-view/{pId}')
	else:
		vv.StartProcess(f'https://www.ncbi.nlm.nih.gov/protein/{pId}')

def ShowMainChain(pMap):
	bList = pMap.BodyList
	mchName = bList[0].Name.split('.')[2]
	pMap.SelectedItems = [b.Id for b in bList if b.Name.split('.')[2] == mchName]
	pMap.ClickMenu('3D Animation View...')
	vv.LastView.NormalizeView()

def ShowChimeraX(pId):
	localPath = Download3DInfo(pId[:4])
	progPath = "C:\\Program Files\\ChimeraX 1.9.dev202408012149\\bin\\ChimeraX.exe"
	vv.StartProcess(progPath, localPath)

def UpdateBv(bv, pSeq, filterIdx, filterList):
		bv.Tag = (pSeq, filterIdx, filterList)
		a2 = filterList[filterIdx]
		for k, item in enumerate(bv.ItemList):
			item.Value = 1.0 if pSeq[k:k+2].startswith(a2) else 0.0
		bv.Title = f'AA key: #{filterIdx}:{a2} of {len(filterList)}'
		bv.Redraw()

def SetFilterIdx():
	if vv.EventSource.Item.Name == 'HeatMap':
		hm = pp
		if hm.SelectionMode != 0 : return
		if hm.SelectedItems.Count == 0: return
		bv = hm.Tag
		(pSeq, filterIdx, filterList) = bv.Tag
		filterIdx = filterList.index(hm.SelectedItems[0])
		UpdateBv(bv, pSeq, filterIdx, filterList)

def FilterSq2(bv):
	(pSeq, filterIdx, filterList) = bv.Tag
	L = len(filterList)
	filterIdx = (filterIdx + vv.EventSource.Argument + L) % L
	UpdateBv(bv, pSeq, filterIdx, filterList)
	vv.SelectedItems = [ filterList[filterIdx] ]

#-----------------------------------------------------------------------------

def AugmentData(nt, augCfg='a|400|0.02|0.02'):
	fs = augCfg.split('|')
	N = nt.shape[0]
	match fs[0][0]:
		case 'a': # spiral augmentation
			nC = int(fs[1])   # point-per-circle
			R  = float(fs[2]) # radius of circle
			sC = float(fs[3]) # width of circle
			phase = float(fs[4]) if len(fs)==5 else 0
			a = 2.0*math.pi/nC  # angular speed
			sX = sC/nC  # speed in X direction.
			A = np.zeros((N, 3), np.float32 )
			for n in range(N):
				A[n] = R*math.sin(n*a+phase), R*math.cos(n*a+phase), n*sX
		case 'b':  # simple linear augmentation
			sf = float(fs[1])/1000.0
			A = np.zeros((N, 1), np.float32 )
			for n in range(N):
				A[n] = sf * n
		case 'c':  # circle augmentation
			R = float(fs[1])
			A = np.zeros((N, 2), np.float32 )
			a = 2.0*math.pi/N
			phase = float(fs[2]) if len(fs)==3 else 0
			for n in range(N):
				A[n] = R*math.sin(n*a+phase), R*math.cos(n*a+phase)
		case 'm':
			mom = float(fs[1])
			g = 1.0 - mom
			for k in range(1, N):
				nt[k, :] = mom*nt[k-1, :] + g*nt[k, :]
			return nt
		case 'M':
			nt2 = np.copy(nt)
			mom = float(fs[1])
			g = 1.0 - mom
			for k in range(1, N):
				nt[k, :] = mom*nt[k-1, :] + g*nt[k, :]
			mom = float(fs[2])
			nt = mom*nt + (1-mom)*nt2			
			return nt
		case 's':
			A = np.zeros((N, 2), np.float32 )
			n0 = int(fs[1])   # number of points in the first ring.
			R = float(fs[2])  # the radius of the first ring 
			G = float(fs[3])  # the gape size relative to R
			a, r = 0, R
			for k in range(N):
				A[k] = r*math.cos(a), r*math.sin(a)
				n = n0*r/R
				r += R*G/n
				a += 2*math.pi/n					
		case 'x':
			return nt
	return np.hstack((nt, A))


def NewDataset(S, aaClusters, decay=1.0, augCfg='a|500|2.0|2.0'):
	L = max(aaClusters.values()) + 1
	hv = np.zeros((L))  # head-vector.
	stepSz = np.ones((L))
	dt = np.zeros([len(S), L], np.float32)
	for k, c in enumerate(S):
		hv += stepSz
		if c in aaClusters:
			dt[k] = hv
			hv[aaClusters[c]] = 0

	for i in range(dt.shape[0]):
		for j in range(dt.shape[1]):
			if dt[i, j] != 0:
				dt[i, j] = 1.0/(dt[i, j] + decay)

	#moment = 0.8
	#for k in range(1, dt.shape[0]): dt[k, :] = moment*dt[k-1] + (1.0 - moment)*dt[k]	

	dt = AugmentData(dt, augCfg)
	
	# add interpolation
	repeats, eps = 3, 0.1
	if repeats == 0:
		nt = mm.ToTable(dt)
		for k, c in enumerate(S):
			nt.RowSpecList[k].Name = c
			nt.RowSpecList[k].Type = aaClusters[c] if c in aaClusters else 35
		for col in range(L):
			nt.ColumnSpecList[col].Id = chr(col+ord('a'))
	else:
		nt = cs.InterpolateVector(mm.ToMatrix32(dt), repeats, eps)
		secL = 2**repeats
		L2 = int(secL / 2)
		for k in range(0, nt.Rows, secL):
			k0 = int(k / secL)
			c = S[k0]
			rs0 = nt.RowSpecList[k]
			rs0.Id = f'R{k0}'
			rs0.Name = c
			rs0.Type = aaClusters[c] if c in aaClusters else 35
			for i in range(k-L2, k+L2, 1):
				if (i != k) and (i>=0) and (i<nt.Rows):
					rs = nt.RowSpecList[i]
					rs.Id = f'i{i}'
					rs.Name = rs0.Name
					rs.Type = rs0.Type
	return nt

#-----------------------------------------------------------------------------

def NewMds(nt=None, epochs=10000, is3D=False, initExag=10.0, finalExag=1.0, ppl=0.1, staged=False, zoomFactor=10.0,
		repeats=1, metric='EuclideanMetric', glyphSet=None, glyphSize=0.5, glyphOpacity=0.25, refreshFreq=50):
	mds = New.MdsCluster(nt)
	mds.Show()
	mds.MdsAlgorithm = 2
	mds.MaxLoops = epochs
	mds.RefreshFreq = refreshFreq
	mds.InitialExaggeration = initExag
	mds.FinalExaggeration = finalExag
	mds.PerplexityRatio = ppl
	mds.Metric = metric
	mds.Repeats = repeats
	mds.ReadOnly = True
	mds.Is3D = is3D
	mds.AutoNormalizing =True
	mds.GlyphOpacity = glyphOpacity
	mds.GlyphSize = glyphSize
	mds.StagedTraining = staged
	mds.ExaggerationSmoothen = True
	mds.MapZoomFactor = zoomFactor
	mds.AutoNormalizing = True
	mds.GlyphSet = vv.Map.GlyphType if glyphSet==None else glyphSet
	mds.Description = ''
	return mds

def RunMds(mds, repeats=1, info=None):
	mds.Repeats = repeats
	if info != None:
		info.DDM = mds.DataDim
		info.SetMds(mds)
		mds.Description = info.ToStr()
	mds.Reset().Start()
	if not mds.Completed: 
		raise Exception("MDS aborted")
	if info != None:
		info.Set('MSz', f'{mds.GlyphSpan:.2f}')
		mds.Description = info.ToStr()
	if repeats == 1:
		mds.SelectedItems = None
		return mds.ShowSnapshot()
	return mds

#-------------------------------------------------------------------

def ShowMapData(pMap):
	pSeq = ''.join([b.Name for b in pMap.BodyList]).upper()	
	info = MapInfo(pMap.Description)
	nt = New.NumberTable(pMap.BodyListEnabled(), 3)
	nt.ShowHeatMap().NormalizeView()

def CreateSeqMaps(pList, aaGroups=None, epochs=1000, decay=1.0, saveTo=None, glyphSize=1.75, ppl=0.05,
		glyphOpacity=0.5, is3D=False, initExag=10.0, finalExag=1.0, augCfg='a|500|2.0|2.0'):
	if len(pList) <= 0:
		vv.Message("No protein group selected")
		vv.Return(0)
	pTable = AssertProteinTable()
	mds = NewMds(None, epochs=epochs, is3D=is3D, initExag=initExag, finalExag=finalExag, ppl=ppl)
	mds.GlyphSet = '36 Clusters||||Colored Balls'
	mds.GlyphSize = glyphSize
	mds.GlyphOpacity = glyphOpacity
	mds.AutoNormalizing = True
	mds.RefreshFreq = 500
	info = MapInfo().Init(epochs, is3D, initExag, finalExag, ppl)
	info.AugCfg = augCfg
	info.Mtd = 'Frg'
	info.DS = vv.Dataset.Name
	mapStore = NewMapStore(saveTo, is3D, clearStore=True)

	aaClusters = {}  # maps aa to cluster indexes.
	for k, aaG in enumerate(aaGroups.split('|')):
		for aa in aaG:
			aaClusters[aa] = k
	
	for k, pId in enumerate(pList):
		pSeq = pTable.StringAt(pId, 2)
		if pSeq is None:
			vv.Message("Cannot get protein seq of: " + pId)
			vv.Return()
		nt = NewDataset(pSeq, aaClusters, decay=decay, augCfg=augCfg)
		mds.SetTrainingData(nt)
		info.pId = pId
		info.pLen = len(pSeq)
		vv.Title = f'Embedding sequence {pId}: {k+1}-th of {len(pList)}'
		RunMds(mds, repeats=0, info=info)
		if mapStore != None:
			mapStore.AddMaps()
	mds.Close()
	if mapStore != None: 
		ma = mapStore.atlas
		ma.OnItemsSelected = '@vv.SelectedItems = [item.Name for item in pp.SelectedItems]'
		ma.Description = info.ToStr()
		MatchProteinMap(ma, 50)
		ma.Show()

def Scanning(pMap, stride=100, stepSize=20, broadcasting=False):
	bsList = [b.Id for b in pMap.BodyList]
	for rp in [0,1]:
		for k in range(0, len(bsList), stepSize):
			selected = bsList[k:k+stride]
			if broadcasting:
				vv.EventManager.RaiseItemsSelected(selected)
			else:
				pMap.SelectedItems = selected
			vv.Sleep(20)
			if pMap.SelectedItems.Count == 0: 
				return
		vv.Sleep(1000)

def SeqLabeling(dt, pSeq):
	aaIdx, aaNr = {}, {ch:0 for ch in ALPHABET}
	for n, rs in enumerate(dt.RowSpecList):
		ch = pSeq[n]
		rs.Name, rs.Type = ch, P[ch]
		if ch not in aaIdx:
			rs.ShowName = True
		aaIdx[ch] = n
		rs.Id = ch + str(aaNr[ch])
		aaNr[ch] += 1
	for n in aaIdx.values():
		rs = dt.RowSpecList[n]
		rs.ShowName = True
		rs.Name = rs.Name.lower()

#-------------------------------------------------------------------

def ShowAASeq(pMap):
	info = MapInfo(pMap.Description)
	pSelected = pMap.GetSelectedBodies()
	if pSelected.Count == 0:
		pSelected = pMap.BodyListEnabled()
	if info.Mtd == 'PDB':
		pSeq = []
		preType = -1
		for b in pSelected:
			if b.Type != preType:
				if len(pSeq) > 0:
					pSeq.append('\n')
				preType = b.Type
				pSeq.append(f'[{b.Type}]:')
			if (b.Id[0] == 'A'):
				nm = b.Name
				if (nm[0] == 'r') or (nm[0] == 'd'):
					pSeq.append(nm[2])
				else:
					pSeq.append(nm[0])
		pSeq = ''.join(pSeq)
		tp = New.TextPanel(f'Protein: {info.pId}, {len(pSeq)}: {info.PT}', pSeq)
	else:
		pSeq = ''.join([b.Name[0] for b in pSelected]).upper()
		tp = New.TextPanel(f'Protein: {info.pId}, {len(pSeq)}', pSeq)
		tp.Tag = pMap
		tp.OnSelection = '@OnSeqSelection()'
		pMap.AddEventHandler('ItemsSelected', '@OnSeqSelected()')
		bId2Idx = {pMap.BodyList[k].Id:k for k in range(pMap.BodyList.Count)}
		pMap.Tag = (tp, bId2Idx)
	tp.AddLine('\n')
	for pn, pv in info.__dict__.items():
		if pv != None:
			tp.AddLine(f'{pn}\t{pv}')
	tp.Show()

def OnSeqSelection():
	pMap = pp.Tag
	if pMap.TheForm.IsDisposed or not vv.MouseButtons.LeftButtonPressed:
		return
	tb = pp.TextBox
	iBegin = tb.SelectionStart
	iEnd = tb.SelectionStart + tb.SelectionLength
	bsList = pMap.BodyList
	pMap.SelectedItems = [bsList[k].Id for k in range(iBegin, iEnd)]

def MarkSeq(tb, idxBegin, idxEnd):
	if idxEnd<=idxBegin: 
		return
	tb.Select(idxBegin, idxEnd-idxBegin)
	tb.SelectionBackColor = New.Color('Skyblue')	

def OnSeqSelected():
	(tp, bId2Idx) = pp.Tag	
	if tp.TheForm.IsDisposed: 
		return
	L = sorted( [bId2Idx[id] for id in pp.SelectedItems] )
	tb = tp.TextBox
	tb.SelectAll()
	tb.SelectionBackColor = tb.BackColor	
	tb.SelectionLength = 0
	N = len(L)
	i = 0
	while i < N:
		j = i+1
		while j < N:
			if L[j] - L[j-1] > 1:
				MarkSeq(tb, L[i], L[j-1]+1)
				break
			else:
				j += 1
		if j == N:
			MarkSeq(tb, L[i], L[j-1]+1)
		i = j

def ShowProteinSeq(pMap):
	pId = pMap.SelectedItems[0]
	rowIdx = vv.Dataset.IndexOfRow(pId)
	pSeq = vv.Dataset.GetDataAt(rowIdx, 2)
	pSym = vv.Dataset.GetDataAt(rowIdx, 1)
	pLen = int(vv.Dataset.GetDataAt(rowIdx, 3))
	tb = New.TextPanel(f'{pId}: {pSym}, {pLen}', pSeq)
	tb.Show()

def ConfigAtlasMaps(atlas, mpWidth=1000, mpHeight=700, gSize=0.35, iconWidth=75, gOpacity=0.5, hiddenSize=7, reset=False):
	itemList = atlas.GetSelectedItems()
	if itemList.Count == 0:
		itemList = atlas.Items
	for it in itemList:
		mp = it.Open()
		if reset:
			for b in mp.BodyListEnabled():
				b.Type = 0
				b.Hidden = False
				b.ShowName = False
		mp.GlyphSize = gSize
		mp.GlyphOpacity = gOpacity
		mp.HiddenBodySize = hiddenSize
		mp.NameLabelColor = New.Color('Yellow')
		mp.NameLabelFont = New.Font('Microsoft Sans Serif', 18.0)
		info = MapInfo(mp.Description)
		mp.Title = f'{info.pId}: {info.PT}'

		bList = mp.BodyList
		allHidden = True
		for b in bList:
			if not b.Hidden:
				allHidden = False
				break
		if allHidden:
			for b in bList: 
				b.Hidden = False
		
		# Mark the head AA.
		bList[0].Type = 105
		bList[bList.Count-1].Type = 110

		try:										
			mp.ResetSize()
			mp.NormalizeView()
			mp.ZoomingFactor = 0.95
		except:
			mp.Close()
			continue

		info = MapInfo(mp.Description)
		it.LabelStyle = 0
		#it.Name = info.pId + ': ' + str(info.pLen)
		#it.Name = info.pId
		it.Name = str(info.pLen)
		it.IconHeight = 0
		if iconWidth != None:
			it.IconWidth = iconWidth
		it.ShowBorder = False
		it.BorderColor = New.Color(28, 28, 28)

		mp.Close()


# arrange the map items to match the positions in the main map
def MatchProteinMap(pAtlas, iconWidth=50):
	pAtlas.BackgroundColor = New.Color(255, 0, 0, 64)	
	pAtlas.SelectorColor = New.Color('DimGray')
	info = MapInfo(pAtlas.Description)
	if (info.DS != None) and (info.DS != vv.Dataset.Name):
		vv.Folder.OpenDataset(info.DS)
	if pAtlas.Items.Count == 0:
		raise Exception('Empty atlas!')
	minX, minY, maxX, maxY = 10000.0, 10000.0, 0.0, 0.0
	for item in pAtlas.Items:
		b = vv.Dataset.BodyForId(item.Id)
		if b == None: 
			continue
		minX, minY = min(minX, b.X), min(minY, b.Y)
		maxX, maxY = max(maxX, b.X+0.1), max(maxY, b.Y+0.1)
	if (maxX == minX) or (maxY == minY):
		raise Exception('No atlas item present')

	scaleX = (pAtlas.Width - 80)/(maxX-minX)
	scaleY = (pAtlas.Height - 80)/(maxY-minY)	
	scale = min(scaleX, scaleY)

	for item in pAtlas.Items:
		b = vv.Dataset.BodyForId(item.Id)
		if b == None: 
			continue
		item.Left = float(scale*(b.X - minX) + 20.0)
		item.Top = float(scale*(b.Y - minY) + 20.0)
		item.IconWidth = iconWidth
		item.LabelStyle = 0
		item.Transparent = True
		item.Opacity = 0.7
		item.ShowBorder = False
		item.BorderColor = New.Color(32, 32, 32)
	pAtlas.Redraw()
	pAtlas.DataChanged = True

def ReCreateMap(pMap):
	pSeq = ''.join([b.Name for b in pMap.BodyList]).upper()	
	info = MapInfo(pMap.Description)
	nt = NewDataset(pSeq, augCfg=info.AugCfg)

	for k, b in enumerate(pMap.BodyList):
		nt.RowSpecList[k].CopyFromBody(b)

	mds = NewMds(nt, epochs=int(info.Epochs), is3D=eval(info.Is3D), 
		initExag=float(info.InitE), finalExag=float(info.FinalE), ppl=float(info.PP))
	mds.GlyphSet = pMap.GlyphSet
	mds.GlyphSize = pMap.GlyphSize
	mds.GlyphOpacity = pMap.GlyphOpacity
	RunMds(mds, info=info)
	mds.Close()


def SmoothenCurve(pMap, repeats):
	bsList = [b for b in pMap.BodyListEnabled() if b.Id[0] != 'H']
	info = MapInfo(pMap.Description)
	info.Extend('SRpts', repeats)
	for n in range(repeats):
		cs.SmoothenBodyList(bsList)
	pMap.Description = info.ToStr()
	pMap.RedrawAll()

def UnfoldAtlasMaps(atlas, mapItems, atName=None, stretch=0, clusterStretch=1.0, expandFactor=1.0):
	mapStore = NewMapStore(atName, is3D=False, clearStore=True)
	mapStore.atlas.Description = atlas.Description
	mapStore.atlas.OnItemsSelected = '@vv.SelectedItems = [item.Name for item in pp.SelectedItems]'
	for k, m in enumerate(mapItems):
		mp = m.Open()
		mp.TheForm.Hide()
		atlas.SetSelectedItems([m])
		UnFoldMap(mp, epochs=1000, repeats=1, is3D=False,
			finalExag=1.0, ppl=0.1, stretch=stretch, clusterStretch=clusterStretch, expandFactor=expandFactor)
		mp.Close()
		if mapStore != None:
			mapStore.AddMaps()
	if mapStore != None:
		ma = mapStore.atlas
		ma.Width = atlas.Width
		ma.ArrangeItems()
		ma.TheForm.Show()


def ScanningForAA(pMap, pAA, progressive=False):
	aaList = ss.SelectByAA(pMap.BodyList, pAA)
	L = aaList.Count
	pMap.Title = f'Amino Acide: {pAA}: {int(L/8)}'
	if progressive:
		stride = 1 + int(L/500)
		for n in range(1, L, stride):
			pMap.SelectedItems = aaList.GetRange(0, n)
	else:
		pMap.SelectedItems = aaList


def AtlasTileAll(atlas, aaGroups, using3DInfo=False, waveLen=128, waveCount=16):
	pTable = AssertProteinTable()	
	pList = [item.Name for item in atlas.Items]
	if using3DInfo:
		dt = GetFourierTrans(pList, waveLen, waveCount)
	else:
		tm = GetFourier(waveLen, waveCount)
		seqList = [LoadMainSeq(pId) for pId in pList]
		dt = cs.VectorizeProtein(seqList, aaGroups, tm)	
		for k, b in enumerate(pTable.BodyListForId(pList)):
			dt.RowSpecList[k].CopyFromBody(b)
	mds = New.TsneSorter(dt, "EuclideanMetric")
	mds.MaxLoops = 10000
	mds.InitExaggeration = 10
	mds.FinalExaggeration = 1.0
	mds.PerplexityRatio = 0.15
	mds.RefreshFreq = 100
	mds.StagedTraining = True
	mds.Show()
	mds.Reset().Start()
	itemSet = {item.Name:item for item in atlas.Items}
	atlas.Items.Clear()
	for item in [itemSet[id] for id in mds.GetSortedItemList()]:
		atlas.Items.Add(item)
	atlas.ArrangeItems(False)
	mds.Close()


def TypeProteinList(pList):
	ft = New.FreeTable()
	ft.AddColumn('Len', True)
	ft.AddRows('A', len(pList))
	for k, pId in enumerate(pList):
		if k % 500 == 0:
			vv.Title = f'Loading: {k}-th seq. of {len(pList)}'
			vv.DoEvents()
		sLen = len( LoadMainSeq(pId) )
		ft.RowSpecList[k].Id = pId
		ft.Matrix[k][0] = str(sLen)
	tb = ft.ShowAsTable()
	tb.SortOnColumn('Len', True)
	tb.SelectedItems = [ 'Len' ]
	tb.AssignMethod = 0
	tb.ClusterData()
	tb.Close()

def NewModuleOp(aaGroups):
	aaClusters = {}
	for k, aaG in enumerate(aaGroups.split('|')):
		for aa in aaG:
			aaClusters[aa] = chr(ord('a')+k)
	return aaClusters

def SeqMod(op, seq):
	return ''.join( [modOp[c] for c in seq] )

def LookupKey(key2type, ckey):
	for k in key2type:
		if cs.NWDistance(ckey, k) < 20:
			return k
	key2type[ckey] = 1+len(key2type)
	return ckey

def UnifyChains(pMap):
	global key2type
	chains = []
	prefix = []
	curType = -1
	maxKeyLen = 50
	for b in pMap.BodyList:
		if b.Id[0] == 'A':
			if b.Type != curType:
				if curType >= 0:
					chains.append( (''.join(prefix[:maxKeyLen]), curType) )
				curType = b.Type
				prefix = []
			if len(prefix) < maxKeyLen:
				c0 = b.Name[0]
				if c0 == 'r':
					prefix.append(b.Name[2].lower())
				elif c0 == 'd':
					prefix.append(b.Name[2].lower())
				else:
					prefix.append(c0)
	if len(prefix)>0:	# Add the last chain
		chains.append( (''.join(prefix[:maxKeyLen]), curType) )

	# setup dictionary type2type to convert chain types to new type in global scope
	type2type = {}
	if 'key2type' not in globals():
		key2type = {}
	keyLen = len(key2type)
	for ckey, ty in chains:
		ky = LookupKey(key2type, ckey)
		type2type[ty] = key2type[ky]
	newKeys = len(key2type) - keyLen
	#vv.Message(f'Added {newKeys} new chains!')

		
	# Multiple chains might be assigned the same type. 
	# We resolve these conflict by indexing all atoms in each type.
	for b in pMap.BodyList:
		if b.Type not in type2type:
			type2type[b.Type] = b.Type
	typeIdx = {t:0 for t in set(type2type.values())}

	for b in pMap.BodyList:
		if b.Type not in type2type:
			vv.Message(f'Unknow chain type: {b.Type}')
			break
		b.Type = type2type[b.Type]
		b.Id = f'{b.Id[0]}{b.Type}.{typeIdx[b.Type]}'
		typeIdx[b.Type] += 1

	if pMap.Name == 'MapSnapshot':
		pMap.RedrawBodiesType()
	else:
		pMap.Redraw()

def FlippingChains(pMap, loopSize=60, loops=5):
	szList = loops * ( list(range(loopSize+1)) + list(range(loopSize, -1, -1)) )
	pMap.HiddenBodyColor = New.Color('White')
	for b in pMap.BodyList:
		b.Highlighted = (b.Name[0] == 'd')
	pMap.GlyphOpacity = 0.4
	pMap.StartAnimation()
	for k, sz in enumerate(szList):
		f = sz/loopSize
		pMap.GlyphSize = 2.0 * f + 0.3
		pMap.HiddenBodySize = int(15.0*(1-f)/pp.GlyphSize)
		pMap.Redraw()
		if vv.ModifierKeys.ControlPressed:
			break
		vv.DoEvents()
		vv.Sleep(2000 if sz%loopSize==0 else 50)
		if k == int(0.5*len(szList)):
			ss.SwapHiddenBodies(pMap.BodyList)
	pMap.GlyphSize = 1.0
	pMap.HiddenBodySize = 4
	ss.SwapHiddenBodies(pMap.BodyList)
	pMap.Redraw()	

def Merge3DList(pList):
	bs = New.BodyList()
	ds = vv.Dataset
	for k, pId in enumerate(pList):
		bsList = LoadMainChain0(pId)
		cs.PcaNormalize2(bsList)
		bsList = Interporlate(bsList, 4, 0.1, smtRatio=0.0)
		bsList = ss.SetBodyType(bsList, pId, k)
		bs.AddRange(bsList)
	mp = New.Map3DView(bs).Show()
	mp.ReadOnly = True
	mp.GlyphSet = '36 Clusters|||'
	mp.ShowBoundingBox = False
	mp.GlyphSize = 1.0
	mp.GlyphOpacity = 0.75
	mp.NormalizeView()
	mp.NormalizeView()


def LoopingChains(m3dView, secLen):
	ss.LoopSection(m3dView, secLen)

def NormalizeBodyTypes():
	for b in vv.Dataset.BodyList:
		bs = LoadMainChain0(b.Id)
		n = bs.Count
		match bs[0].Name[0]:
			case 'd':
				b.Type = 97
			case 'r':
				b.Type = 99
			case _:
				b.Type = 2 if n < 250 else ( 4 if n < 500 else 84 )
	vv.Map.Redraw()

def SelectUniqSeq():
	idSet = set()
	seqSet = set()
	for id in pp.AllItems:
		seq = vv.Dataset.StringAt(id, 2)
		if seq not in seqSet:
			idSet.add(id)
			seqSet.add(seq)
	vv.SelectedItems = list(idSet)

def AlignSeqPair(parentWin):
	from Bio.Align import PairwiseAligner
	if parentWin.Name == 'Atlas':
		pIds = [item.Id for item in parentWin.SelectedItems]
	else:
		pIds = parentWin.SelectedItems
	if len(pIds) < 2:
		vv.Message(f'Please select a pair of proteins!')
		return
	s0 = vv.Dataset.StringAt(pIds[0], 2)
	s1 = vv.Dataset.StringAt(pIds[1], 2)

	isAASeq = s0[0].isupper()
	if s0[0].islower(): s0 = s0.upper()
	if s1[0].islower(): s1 = s1.upper()
	if not isAASeq:
		s0 = s0.replace('U', 'T')
		s1 = s1.replace('U', 'T')
	scType = 'blastp' if isAASeq else 'blastn'

	aligner = PairwiseAligner(scoring=scType)
	for k, ag in enumerate(aligner.align(s0, s1)):
		ratio = ag.score/max(len(s0), len(s1))
		New.TextPanel(f'Alignment-{k+1}: {pIds[0]}:{pIds[1]}; Score={int(ag.score)}; Ratio={ratio:.3g}', str(ag)).Show()
		if k >= 0: break

def ResetAtlas():
	if vv.EventSource.Form.Name == 'D3dRender': 
		return
	mk = vv.ModifierKeys
	sn=pp.SelectedItems.Count
	if mk.AltPressed or mk.ControlPressed or (sn>0 and sn<6):
		return
	pp.ResetView()

'''


'''