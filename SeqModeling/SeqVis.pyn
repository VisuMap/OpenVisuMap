import numpy as np
import math

ALPHABET = 'ARNDCEQGHILKMFPSTWYV'
PROTEIN_TABLE = 'Protein Table'

def FilterSeq(D, P):
	return ''.join([ c for c in D.upper() if c in P ])

def OpenProteinTable():
	if vv.Dataset.Name != PROTEIN_TABLE:
		vv.Folder.OpenDataset(PROTEIN_TABLE)

def GetProteinTable():
	if vv.Dataset.Name != PROTEIN_TABLE:
		pTable = vv.Folder.ReadDataset(PROTEIN_TABLE)
	else:
		pTable = vv.Dataset
	return pTable

def GetProteinSeq(pTable, pId):
	rowIdx = pTable.IndexOfRow(pId)
	return pTable.GetDataAt(rowIdx, 2)

#-----------------------------------------------------------

def GetProteinIds(gSymbol):
	ds = vv.Folder.ReadDataset('Gene Features')	
	for row in range(ds.Rows):
		if ds.GetDataAt(row, 5) == gSymbol:
			pList = ds.GetDataAt(row, 17)
			return pList.split(',')
	print('Cannot find gene ' + gSymbol)
	return None

# protein embedding map information
class MapInfo():
	def __init__(self, initStr = None):
		self.pId = None
		self.Gene = None
		self.pLen = None
		self.Epochs = None
		self.InitE = None
		self.FinalE = None
		self.PP = None
		self.WinSize = None
		self.SFactor = None
		if initStr is not None:
			self.ParseStr(initStr)
	def ToStr(self):
		dic = self.__dict__
		return ';'.join([f'{key}:{str(dic[key])}' for  key in dic if dic[key] is not None])
	def ParseStr(self, initStr):
		dic = self.__dict__
		for f in initStr.split(';'):
			if f is not None:
				fs = f.split(':')
				if len(fs) == 2:
					dic[fs[0]] = fs[1]

def AddProteins(gSymbol):
	import urllib.request
	getUrl = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=protein&rettype=fasta&retmode=text&id='
	pList = GetProteinIds(gSymbol)
	OpenProteinTable()
	P = {a:k for k,a in enumerate(ALPHABET)}
	typeIdx = max([b.Type for b in vv.Dataset.BodyList]) + 1
	for id in pList:
		sFasta = urllib.request.urlopen(getUrl+id).read().decode('utf-8')
		idx = sFasta.index('\n')
		desc = sFasta[1:idx]
		pSeq = FilterSeq(sFasta[idx:], P)
		vv.Dataset.AddRow(id, gSymbol, typeIdx, [desc,gSymbol,pSeq,str(len(pSeq))])
	vv.Dataset.CommitChanges()

def ShowMapData(pMap):
	info = MapInfo(pMap.Description)
	pTable = GetProteinTable()
	pSeq = GetProteinSeq(pTable, info.pId)
	nt = NewDataset(pSeq, winSize=int(info.WinSize), stretchFactor=float(info.SFactor))
	nt.ShowHeatMap().NormalizeView()


def CreateMaps(pList, epochs, winSize, stretchFactor, repeats, saveTo, glyphSize, glyphOpacity, is3D, initExag, finalExag):
	if len(pList) <= 0:
		vv.Message("No protein group selected")
		vv.Return(0)
	pTable = GetProteinTable()
	mds = NewMds(None, epochs=epochs, is3D=is3D, initExag=initExag, finalExag=finalExag)
	info = MapInfo()
	info.Epochs = epochs
	info.InitE = initExag
	info.FinalE = finalExag
	info.PP = mds.PerplexityRatio
	info.SFactor = stretchFactor
	info.WinSize = winSize
	for k, pId in enumerate(pList):
		pSeq = GetProteinSeq(pTable, pId)
		nt = NewDataset(pSeq, winSize=winSize, stretchFactor=stretchFactor)
		mds.SetTrainingData(nt)
		RunMds(mds, repeats=repeats, glyphSize=glyphSize, glyphOpacity=glyphOpacity)
		info.pId = pId
		info.pLen = len(pSeq)
		map = vv.LastView
		map.Title = f'{k}: {pId}, N: {nt.Rows}'
		map.Description = info.ToStr()
	mds.Close()
	SaveToAtlas(saveTo)

def CreateProteinMap(idList):	
	from collections import Counter
	pTable = GetProteinTable()
	rows, columns = len(idList), len(ALPHABET)
	if rows == 0:
		bsList = pTable.BodyListEnabled()
		rows = bsList.Count
		idList = [b.Id for b in bsList]
		print(bsList.Count, rows, len(idList))
	else:
		bsList = pTable.BodyListForId(idList)
	nt = New.NumberTable(bsList, columns)
	for row in range(rows):
		pSeq = GetProteinSeq(pTable, idList[row])
		pCnt = Counter(pSeq)
		R = nt.Matrix[row]
		fct = 10000/len(pSeq)
		for c, a in enumerate(ALPHABET):
			R[c] =fct* pCnt[a]
	for c, a in enumerate(ALPHABET):
		nt.ColumnSpecList[c].Id = a
	mds = NewMds(nt, epochs=5000, initExag=5.0, finalExag=1.0)
	mds.PerplexityRatio = 0.2
	mds.RefreshFreq = 50
	mds.Reset().Start()

def SaveToAtlas(atName, x0=50, y0=50):
	if atName is not None:
		vv.AtlasManager.OpenAtlas(atName).CaptureAllOpenViews(x0, y0).Close()

def NewDataset(D, winSize=0, stretchFactor=1.0, alphbetList=ALPHABET):
	P = {a:k for k,a in enumerate(alphbetList)}
	dimP = len(P)

	if winSize == 0:
		#winSize = max(5, int(0.012727*len(pSeq) + 23.638))
		winSize = max(5, int(6.086 + 0.015652*len(D)))

	D = FilterSeq(D, P)
	ww = [1.0 - k/winSize for k in range(winSize)]  # window weights
	W = len(ww)
	L = len(D)
	

	dt = np.zeros([len(D), dimP+1], np.float32)
	for row, c in enumerate(D):
		col0 = P[c]
		#W0 = -W+1  # symmetric window
		W0 = -5
		for w in range(W0, W):
			row_w = row + w
			if row_w < 0 or row_w >= L:
				continue
			col = P[D[row_w]]
			dt[row, col] += ww[abs(w)]
	
	dt[:, -1] = [stretchFactor * t * winSize/4000.0 for t in range(L)]
	rowWeight = np.array([1+0.02*k for k in range(dimP)])
	dt2 = rowWeight * dt[:, :-1]
	dt[:, :-1] = dt2

	nt = mm.ToTable(dt)
	for k, c in enumerate(D):
		nt.RowSpecList[k].Name = c
		nt.RowSpecList[k].Type = P[c]
	for col in range(dimP):
		nt.ColumnSpecList[col].Id = alphbetList[col]
	return nt

def NewMds(nt, epochs=10000, is3D=False, initExag=10.0, finalExag=1.0):
	mds = New.MdsCluster(nt)
	mds.Show()
	mds.MaxLoops = epochs
	mds.RefreshFreq = 500
	mds.InitialExaggeration = initExag
	mds.FinalExaggeration = finalExag
	mds.PerplexityRatio = 0.05
	mds.Metric = 'EuclideanMetric'
	mds.Repeats = 1
	mds.ReadOnly = True
	mds.Is3D = is3D
	mds.AutoNormalizing =True
	mds.GlyphSet = '36 Clusters'
	return mds

def RunMds(mds, repeats=1, glyphSize=0.8, glyphOpacity=0.5):
	mds.Repeats = repeats
	mds.Reset().Start()
	if mds.Repeats == 1:
		mds.Show2DView()

	for frm in vv.FindFormList('MapSnapshot'):
		if mds.Is3D:
			frm.ClickMenu('3D Animation View...')		
			frm.Close()
			f3d = vv.LastView
			f3d.NormalizeView()
			f3d.GlyphOpacity = glyphOpacity
			f3d.GlyphSize = glyphSize
			f3d.Redraw()
		else:
			frm.GlyphOpacity = glyphOpacity
			frm.GlyphSize = glyphSize
			frm.Redraw()
			frm.NormalizeView()
	return mds


def Scanning(pMap):
	K = 100
	bsList = [b.Id for b in pMap.BodyList]
	for k in range(0, len(bsList), 10):
		#pMap.SelectedItems = bsList[k:k+K]
		vv.SelectedItems = bsList[k:k+K]
		vv.Sleep(50)
		if pMap.SelectedItems.Count == 0:
			break
#------------------
def ShowTracingSeq(pMap):
	info = MapInfo(pMap.Description)
	pSeq = GetProteinSeq(GetProteinTable(), info.pId)
	tp = New.TextPanel("Protein Sequence", pSeq)
	tp.Tag = pMap
	pMap.Tag = tp
	tp.OnSelection = '@OnSeqSelection()'
	pMap.AddEventHandler('ItemsSelected', '@OnSeqSelected()')
	tp.Show()

def OnSeqSelection():
	pMap = pp.Tag
	if pMap.TheForm.IsDisposed or not vv.MouseButtons.LeftButtonPressed:
		return
	iBegin = pp.TextBox.SelectionStart
	iEnd = pp.TextBox.SelectionStart + pp.TextBox.SelectionLength
	pMap.SelectedItems = [f'R{i}' for i in range(iBegin, iEnd)]

def OnSeqSelected():
	tp = pp.Tag	
	if tp.TheForm.IsDisposed: 
		return
	tb = tp.TextBox
	idxList = [int(id[1:]) for id in pp.SelectedItems]
	if len(idxList) == 0:
		tb.Select(0, 0)
		return				
	idxMax, idxMin = max(idxList), min(idxList)
	tb.Select(idxMin, idxMax - idxMin + 1)
	tp.TheForm.Activate()
#------------------

def ResetAtlasMaps(atlas, itemList, mpWidth=1000, mpHeight=700, gSize=0.35, gOpacity=0.5, hiddenSize=7, reset=False):
	for it in itemList:
		mp = it.Open()
		if reset:
			for b in mp.BodyListEnabled():
				b.Type = 0
				b.Hidden = False
				b.ShowName = False
		mp.GlyphSize = gSize
		mp.GlyphOpacity = gOpacity
		mp.HiddenBodySize = hiddenSize
		mp.NameLabelColor = New.Color('Yellow')
		mp.NameLabelFont = New.Font('Microsoft Sans Serif', 18.0)
		mp.Resize(0,0,mpWidth,mpHeight)
		mp.NormalizeView()
		info = MapInfo(mp.Description)
		it.LabelStyle = 2
		it.Name = info.pId
		mp.Close()

def CreateMapById(pMap): 
	info = MapInfo(pMap.Description)
	pTable = GetProteinTable()
	pSeq = GetProteinSeq(pTable, info.pId)
	nt = NewDataset(pSeq, winSize=int(info.WinSize), stretchFactor=float(info.SFactor))
	mds = NewMds(nt, epochs=int(info.Epochs), is3D=False, initExag=float(info.InitE), finalExag=float(info.FinalE))
	RunMds(mds)
	vv.LastView.Description = info.ToStr()

'''========================================================================================

'''
