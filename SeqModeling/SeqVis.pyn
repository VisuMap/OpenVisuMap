import numpy as np
import math, random, time

PROTEIN_TABLE = 'Protein Table'
ALPHABET = 'ARNDCEQGHILKMFPSTWYV'
P = {ALPHABET[k]:k for k in range(len(ALPHABET))}

def FilterSeq(D, P):
	return ''.join([ c for c in D.upper() if c in P ])

def OpenProteinTable():
	if vv.Dataset.Name != PROTEIN_TABLE:
		vv.Folder.OpenDataset(PROTEIN_TABLE)

def GetProteinTable():
	if vv.Dataset.Name != PROTEIN_TABLE:
		pTable = vv.Folder.ReadDataset(PROTEIN_TABLE)
	else:
		pTable = vv.Dataset
	return pTable

def GetProteinSeq(pTable, pId):
	rowIdx = pTable.IndexOfRow(pId)
	return pTable.GetDataAt(rowIdx, 2)

def SaveToAtlas(atName, x0=50, y0=50):	
	if atName is not None:
		vwName = vv.LastView.Name
		vv.AtlasManager.OpenAtlas(atName).CaptureAllOpenViews(x0, y0, vwName).Close()

def LoadSeqModeling(seqdll = 'SeqModeling.dll', className = 'VisuMap.SeqModeling'):
	from shutil import copy
	from os.path import exists
	from os import stat
	dllFile = vv.CurrentScriptDirectory + '/' + seqdll
	srcFile = vv.CurrentScriptDirectory + '/' + 'SeqModeling.cs'
	if not exists(dllFile) or stat(dllFile).st_mtime < stat(srcFile).st_mtime:
		msbuild = '"C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin/MSBuild.exe"'
		vv.StartProcess(msbuild, 'SeqModeling.csproj /p:Configuration=Release', False).WaitForExit(1000)
		copy(vv.CurrentScriptDirectory + '/bin/Release/' + seqdll, vv.CurrentScriptDirectory)
	#dllFile = vv.CurrentScriptDirectory + '/bin/Debug/SeqModeling.dll'
	vv.LoadLibrary(dllFile)
	return New.Instance(className)

if 'cs' not in globals():
	cs = LoadSeqModeling()

# protein embedding map information
class MapInfo():
	def __init__(self, initStr = None):
		for nm in 'pId,Gene,pLen,Epochs,InitE,FinalE,PP,WinSize,AugCfg,Is3D,Obo'.split(','):
			setattr(self, nm, None)
		if initStr is not None:
			self.ParseStr(initStr)
	def ToStr(self):
		dic = self.__dict__
		return ';'.join([f'{key}:{str(dic[key])}' for  key in dic if dic[key] is not None])
	def ParseStr(self, initStr):
		dic = self.__dict__
		for f in initStr.split(';'):
			if f is not None:
				fs = f.split(':')
				if len(fs) == 2:
					dic[fs[0]] = fs[1]

#-----------------------------------------------------------
# Code to maintain the protein table.
#-----------------------------------------------------------

def Sym2Id(ds, gSymbol):
	for row in range(ds.Rows):
		if ds.GetDataAt(row, 5) == gSymbol:
			return ds.BodyList[row].Id
	print('Cannot find gene ' + gSymbol)
	return None

def Id2Sym(ds, gId):
	rowIdx = ds.IndexOfRow(gId)
	if rowIdx >= 0:
		return ds.GetDataAt(rowIdx, 5);
	else:
		return None

def GetProteinIds(ds, gId):
	rowIdx = ds.IndexOfRow(gId)
	if rowIdx >= 0:
		pList = ds.GetDataAt(rowIdx, 17)
		return pList.split(',')
	else:
		return None

def AddProteins(ds, pId, maxCount=20, minLength=400):
	import urllib.request
	getUrl = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=protein&rettype=fasta&retmode=text&id='
	gSymbol = Id2Sym(ds, pId)
	pList = GetProteinIds(ds, pId)
	random.shuffle(pList)
	OpenProteinTable()
	P = {a:k for k,a in enumerate(ALPHABET)}
	typeIdx = max([b.Type for b in vv.Dataset.BodyList]) + 1
	cnt = 0
	cntSmall = 0
	cntDuplicate = 0
	newSeq = set()
	print(f'----- Fetching {len(pList)} proteins of gene: {pId}')	
	for id in pList:
		try:
			sFasta = urllib.request.urlopen(getUrl+id).read().decode('utf-8')
		except:
			print('Exception: ', id)
			time.sleep(2.0)
			continue
		vv.DoEvents()
		if vv.GuiManager.StopFlag:
			vv.Return()
		idx = sFasta.index('\n')
		desc = pId + ': ' + sFasta[1:idx]
		pSeq = FilterSeq(sFasta[idx:], P)
		pLen = len(pSeq)
		if pLen < minLength:
			if pLen < minLength*0.75:
				cntSmall += 1
				if cntSmall > 20:
					print('Skipped short protein!')
					break
			print('Skipped: len:', pLen)
			continue
		if pSeq in newSeq:
			print('Skipped duplicate!')	
			cntDuplicate += 1
			if cntDuplicate > 30:
				print('Skipped bc too many duplicates!')
				break			
			continue
		newSeq.add(pSeq)
		vv.Dataset.AddRow(id, gSymbol, typeIdx, [desc,gSymbol,pSeq,str(pLen)])
		print('     ', id, gSymbol, pLen)
		cnt += 1
		if cnt >= maxCount:
			break
	vv.Dataset.CommitChanges()

def SetRandomSeq():
	import random
	OpenProteinTable()
	'''
	# aaList is string filled with AA distribution of all proteins.
	aaDist = list(vv.AtlasManager.ReadValueList('TestMaps', 'i2'))
	aaList = ''.join([x.Id*int(x.Value*10000) for x in aaDist])
	'''
	N, aaL, row, ds = 20, len(aaList)-1, 1, vv.Dataset
	for n in range(N):
		L = random.randint(500, 5000)
		s = ''.join([aaList[random.randint(0, aaL)] for k in range(L)])
		ds.SetDataAt(row, 2, s)
		ds.SetValueAt(row, 3, len(s))
		row += 1
	ds.CommitChanges()

#SetRandomSeq()

def GroupByType(bList):
	G = {}
	for b in bList:
		if b.Type not in G: 
			G[b.Type] = []
		G[b.Type].append(b)
	return G.values()

def CreateProteinMapByCounts(idList, repeats=1):	
	from collections import Counter
	pTable = GetProteinTable()
	rows = len(idList)
	columns = len(ALPHABET)
	if rows == 0:
		bsList = pTable.BodyListEnabled()
		rows = bsList.Count
		idList = [b.Id for b in bsList]
		print(bsList.Count, rows, len(idList))
	else:
		bsList = pTable.BodyListForId(idList)
	nt = New.NumberTable(bsList, columns)
	for row in range(rows):
		pSeq = GetProteinSeq(pTable, idList[row])
		pCnt = Counter(pSeq)
		R = nt.Matrix[row]
		fct = 10000/len(pSeq)
		for c, a in enumerate(ALPHABET):
			R[c] =fct* pCnt[a]
	for c, a in enumerate(ALPHABET):
		nt.ColumnSpecList[c].Id = a
	mds = NewMds(nt, epochs=5000, initExag=3.0, finalExag=1.0)
	mds.PerplexityRatio = 0.1
	mds.RefreshFreq = 50
	mds.Repeats = repeats
	mds.Reset().Start()

def ProteinMapByPairs(idList):	
	pTable = GetProteinTable()
	rows, columns = len(idList), len(ALPHABET)
	if rows == 0:
		bsList = pTable.BodyListEnabled()
		rows = bsList.Count
		idList = [b.Id for b in bsList]
	else:
		bsList = pTable.BodyListForId(idList)
	dt = np.zeros((rows, columns*columns), np.float32)
	aaCnt = {}
	for c1 in ALPHABET:
		for c2 in ALPHABET:
			aaCnt[c1+c2] = 0
	for row in range(rows):
		pSeq = GetProteinSeq(pTable, idList[row])
		pLen = len(pSeq)
		for pp in aaCnt:
			aaCnt[pp] = 0
		for k in range(0, pLen-1, 1):
			aaCnt[pSeq[k:k+2]] += 1
		ppCnt = list(aaCnt.values())
		for col in range(dt.shape[1]):
			dt[row, col] = float( ppCnt[col] ) 
	nt = mm.ToTable(dt, bsList)
	for k, key in enumerate(aaCnt.keys()):
		nt.ColumnSpecList[k].Id = key
	mds = NewMds(nt, epochs=5000, initExag=3.0, finalExag=1.0)
	mds.PerplexityRatio = 0.1
	mds.RefreshFreq = 50
	mds.Repeats = 1
	mds.Reset().Start()

def AddClusterLabel(pMap):
	for b in pMap.BodyList: 
		b.ShowName = False
	for B in GroupByType(pMap.BodyList):
		cs.MeanPoint(B).ShowName = True
	pMap.RedrawAll()


def CreateProteinMap(idList, epochs=5000, is3D=False, initExag=10.0, 
		finalExag=1.0, ppl=0.1, repeats=1, saveTo=None):
	pTable = GetProteinTable()	
	dt = cs.VectorizeProtein1(ALPHABET, 100, idList, pTable)
	for k, b in enumerate(vv.Dataset.BodyListForId(idList)):
		dt.RowSpecList[k].CopyFromBody(b)
	mds = NewMds(dt, epochs=epochs, is3D=is3D, initExag=initExag, finalExag=finalExag, ppl=ppl)
	RunMds(mds, repeats=repeats, glyphSize=0.75, glyphOpacity=0.5)
	SaveToAtlas(saveTo)
	mds.Close()

def CreateProteinMap2(idList, epochs=10000, is3D=False, initExag=6.0, ppList=None, finalExag=1.0, ppl=0.1, repeats=1):
	pTable = GetProteinTable()
	dt = cs.VectorizeProtein2(ppList, 50, idList, pTable)
	mds = NewMds(dt, epochs=epochs, is3D=is3D, initExag=initExag, finalExag=finalExag, ppl=ppl)
	RunMds(mds, repeats=repeats, glyphSize=0.8, glyphOpacity=0.5)
	if repeats > 0:
		mds.Close()

def CreateProteinMap3(pList,  epochs=5000, is3D=False, repeats=1, initExag=4.0, ppl=0.1, finalExag=1.0):
	pTable = GetProteinTable()
	#dt = cs.GetMarkovCoding1(pTable, pList)
	dt = cs.GetMarkovCoding2(pTable, pList)
	mds = NewMds(dt, epochs=epochs, is3D=is3D, initExag=initExag, finalExag=finalExag, ppl=ppl)
	RunMds(mds, repeats=repeats, glyphSize=0.8, glyphOpacity=0.5)
	if repeats > 0:
		mds.Close()

#-----------------------------------------------------------------------------

def ShowSeqInfo(pMap, showSeq=False, showTable=True, barView=True, useAApair=True, markovTrans=False):
	if pMap.SelectedItems.Count == 0:
		vv.Message('No protein selected')
		return
	pId = pMap.SelectedItems[0]
	ds = vv.Dataset
	rIdx = ds.IndexOfRow(pId)
	pSeq = ds.GetDataAt(rIdx, 2)
	pGene = ds.BodyList[rIdx].Name			
	pLen = int(ds.GetDataAt(rIdx, 3))
	ppList = vv.GroupManager.GetGroupLabels("KeyPairs400") if useAApair else list(ALPHABET)
	sTitle = f'Protein: {pGene}, {pId}, L:{pLen}'
	if showSeq:
		tp = New.TextPanel(sTitle, pSeq)
		tp.Show()
	if showTable:
		maxWaveLen = 1000 if useAApair else 100
		nt = cs.ToWaveTable(pSeq, ppList, maxWaveLen)
		for rs in nt.RowSpecList:
			rs.Type = P[rs.Id[0]]
		hm = nt.ShowHeatMap()
		hm.Title = sTitle
		hm.SpectrumType = 4
		hm.ColorPaletteName = 'rP8'
		hm.ScrollingSteps = 1
		hm.BaseLineType = 0
		hm.SpectrumType = 4
		hm.ReadOnly = True
		hm.Redraw()
	if barView:
		bv = New.BarView(pLen)
		for k, item in enumerate(bv.ItemList):
			item.Group = P[pSeq[k]]
			item.Value = 1.0
		bv.Horizontal = False
		bv.BarLabelType = 0
		bv.HighlightColor = New.Color('White')
		bv.Show()
		bv.Tag = (pSeq, 0, ppList)
		bv.SetMouseWheelHandler('@FilterSq2(vv.EventSource.Form)')
		bv.AutoScaling = True
		bv.ReadOnly = True
		if showTable:
			hm.Tag = bv
			hm.AddEventHandler('ItemsSelected', '@SetFilterIdx()')
		bv.Title = sTitle
	if markovTrans:
		nt = New.NumberTable(cs.MarkovianMatrix0(pSeq))
		for k, rs in enumerate(nt.RowSpecList):
			rs.Id = ALPHABET[k]
			rs.Type = k
			nt.ColumnSpecList[k].Type = k
			nt.ColumnSpecList[k].Id = rs.Id
		bb = New.BarBand(nt)
		bb.UsingColorPalette = True
		bb.AutoScaling = True
		bb.AttributeMode = False
		bb.Title = sTitle
		bb.Show()

def UpdateBv(bv, pSeq, filterIdx, filterList):
		bv.Tag = (pSeq, filterIdx, filterList)
		a2 = filterList[filterIdx]
		for k, item in enumerate(bv.ItemList):
			item.Value = 1.0 if pSeq[k:k+2].startswith(a2) else 0.0
		bv.Title = f'AA key: #{filterIdx}:{a2} of {len(filterList)}'
		bv.Redraw()

def SetFilterIdx():
	if vv.EventSource.Item.Name == 'HeatMap':
		hm = pp
		if hm.SelectionMode != 0 : return
		if hm.SelectedItems.Count == 0: return
		bv = hm.Tag
		(pSeq, filterIdx, filterList) = bv.Tag
		filterIdx = filterList.index(hm.SelectedItems[0])
		UpdateBv(bv, pSeq, filterIdx, filterList)

def FilterSq2(bv):
	(pSeq, filterIdx, filterList) = bv.Tag
	L = len(filterList)
	filterIdx = (filterIdx + vv.EventSource.Argument + L) % L
	UpdateBv(bv, pSeq, filterIdx, filterList)
	vv.SelectedItems = [ filterList[filterIdx] ]

#-----------------------------------------------------------------------------

def NewDataset1(P, pSeq, decay):
	L = len(P)
	hv = np.zeros((L))  # head-vector.
	stepSz = np.ones((L))
	dt = np.zeros([len(pSeq), len(P)], np.float32)
	for k, c in enumerate(pSeq):
		hv += stepSz
		hv[P[c]] = 0
		dt[k] = hv
	dt = np.reciprocal(decay+dt)
	for k in range(1, dt.shape[0]):
		dt[k, :] = 0.8*dt[k-1] + 0.2*dt[k]
	return dt

def NewDataset0(P, pSeq, winSize=0):
	pSeq = FilterSeq(pSeq, P)
	if winSize == 0: 
		winSize = int(6.086+0.015652*len(pSeq))
		winSize = max(5, int(0.5*winSize))
	ww = [1.0 - k/winSize for k in range(winSize)]  # window weights
	W, L = len(ww), len(pSeq)
	dt = np.zeros([len(pSeq), len(P)], np.float32)
	for row, c in enumerate(pSeq):
		col0 = P[c]
		W0 = -W+1  # symmetric window
		for w in range(W0, W):
			row_w = row + w
			if row_w < 0 or row_w >= L:
				continue
			col = P[pSeq[row_w]]
			dt[row, col] += ww[abs(w)]	
	return dt

def AugmentData(nt, augCfg='a|500|2.0|2.0'):
	fs = augCfg.split('|')
	N = nt.shape[0]
	match fs[0][0]:
		case 'a': # spiral augmentation
			nC = int(fs[1])   # point-per-circle
			R  = float(fs[2]) # radius of circle
			sC = float(fs[3]) # width of circle
			phase = float(fs[4]) if len(fs)==5 else 0
			a = 2.0*math.pi/nC  # angular speed
			sX = sC/nC  # speed in X direction.
			A = np.zeros((N, 3), np.float32 )
			for n in range(N):
				A[n] = R*math.sin(n*a+phase), R*math.cos(n*a+phase), n*sX
		case 'b':  # simple linear augmentation
			sf = float(fs[1])/1000.0
			A = np.zeros((N, 1), np.float32 )
			for n in range(N):
				A[n] = sf * n
		case 'c':  # circle augmentation
			R = float(fs[1])
			A = np.zeros((N, 2), np.float32 )
			a = 2.0*math.pi/N
			phase = float(fs[2]) if len(fs)==3 else 0
			for n in range(N):
				A[n] = R*math.sin(n*a+phase), R*math.cos(n*a+phase)
		case 'm':
			mom = float(fs[1])
			g = 1.0 - mom
			for k in range(1, N):
				nt[k, :] = mom*nt[k-1, :] + g*nt[k, :]
			return nt
		case 'x':
			return nt
	return np.hstack((nt, A))


def NewDataset(S, winSize=0, decay=1.0, alphbetList=ALPHABET, augCfg='a|500|2.0|2.0'):
	P = {a:k for k,a in enumerate(alphbetList)}
	if winSize>= 0:
		dt = AugmentData(NewDataset0(P, S, winSize), augCfg)
	else:
		dt = AugmentData(NewDataset1(P, S, decay=decay), augCfg)
	nt = mm.ToTable(dt)
	for k, c in enumerate(S):
		nt.RowSpecList[k].Name = c
		nt.RowSpecList[k].Type = P[c]
	for col in range(len(P)):
		nt.ColumnSpecList[col].Id = alphbetList[col]
	return nt

#-----------------------------------------------------------------------------

def NewMds(nt, epochs=10000, is3D=False, initExag=10.0, finalExag=1.0, ppl=0.1, repeats=1, metric='EuclideanMetric'):
	mds = New.MdsCluster(nt)
	mds.Show()
	mds.MaxLoops = epochs
	mds.RefreshFreq = 500
	mds.InitialExaggeration = initExag
	mds.FinalExaggeration = finalExag
	mds.PerplexityRatio = ppl
	mds.Metric = metric
	mds.Repeats = repeats
	mds.ReadOnly = True
	mds.Is3D = is3D
	mds.AutoNormalizing =True
	#mds.GlyphSet = 'C12|||||||||||'
	mds.GlyphSet = vv.Map.GlyphType
	return mds

def RunMds(mds, repeats=1, glyphSize=0.8, glyphOpacity=0.5):
	mds.Repeats = repeats
	mds.Reset().Start()
	if not mds.Completed: vv.Return(0)
	if repeats == 1:
		mp = mds.ShowSnapshot()
	if repeats >= 1:
		mpName = vv.LastView.Name
		for mp in vv.FindFormList(mpName):
			mp.GlyphOpacity = glyphOpacity
			mp.GlyphSize = glyphSize
			mp.Redraw()
	return mds

#-------------------------------------------------------------------

def ShowMapData(pMap):
	info = MapInfo(pMap.Description)
	pTable = GetProteinTable()
	pSeq = GetProteinSeq(pTable, info.pId)
	nt = NewDataset(pSeq, winSize=int(info.WinSize), augCfg=info.AugCfg)
	nt.ShowHeatMap().NormalizeView()

def CreateMaps(pList, epochs=10000, winSize=0, decay=1.0, repeats=1, saveTo=None, glyphSize=0.8, ppl=0.05,
		glyphOpacity=0.5, is3D=False, initExag=10.0, finalExag=1.0, augCfg='a|500|2.0|2.0'):
	if len(pList) <= 0:
		vv.Message("No protein group selected")
		vv.Return(0)
	pTable = GetProteinTable()
	mds = NewMds(None, epochs=epochs, is3D=is3D, initExag=initExag, finalExag=finalExag, ppl=ppl)
	info = MapInfo()
	info.Epochs = epochs
	info.InitE = initExag
	info.FinalE = finalExag
	info.PP = mds.PerplexityRatio
	info.WinSize = winSize	
	info.Is3D = is3D
	info.AugCfg = augCfg
	info.Obo = 'Frg'
	for k, pId in enumerate(pList):
		pSeq = GetProteinSeq(pTable, pId)
		if pSeq is None:
			vv.Message("Cannot get aa-seq of: " + pId)
			continue
		nt = NewDataset(pSeq, winSize=winSize, decay=decay, augCfg=augCfg)
		SeqLabeling(nt, pSeq)
		mds.SetTrainingData(nt)
		RunMds(mds, repeats=repeats, glyphSize=glyphSize, glyphOpacity=glyphOpacity)
		info.pId = pId
		info.pLen = len(pSeq)
		map = vv.LastView
		map.Title = f'{k}: {pId}, N: {nt.Rows}'
		map.Description = info.ToStr()
		if (k+1)%8 == 0:
			SaveToAtlas(saveTo)
	SaveToAtlas(saveTo)
	if saveTo is not None:
		mds.Close()

def Scanning(pMap, stepSize=20):
	bsList = [b.Id for b in pMap.BodyList]
	inc = max(1, int(stepSize/2))
	for pause in [50, 150]:
		for k in range(0, len(bsList), inc):
			vv.SelectedItems = bsList[k:k+stepSize]
			vv.Sleep(pause)
			if pMap.SelectedItems.Count == 0: return
		vv.Sleep(1000)

def NewDatasetMkv(tm, pSeq, augCfg):
	L = len(pSeq)
	nt = np.zeros((L, len(ALPHABET)), np.float64)
	for n in range(L):
		nt[n] = tm[ P[pSeq[n]] ]
	nt = AugmentData(nt, augCfg)
	dt = mm.ToTable(nt)
	return dt

def SeqLabeling(dt, pSeq):
	aaIdx, aaNr = {}, {ch:0 for ch in ALPHABET}
	for n, rs in enumerate(dt.RowSpecList):
		ch = pSeq[n]
		rs.Name, rs.Type = ch, P[ch]
		if ch not in aaIdx:
			rs.ShowName = True
		aaIdx[ch] = n
		rs.Id = ch + str(aaNr[ch])
		aaNr[ch] += 1
	for n in aaIdx.values():
		rs = dt.RowSpecList[n]
		rs.ShowName = True
		rs.Name = rs.Name.lower()


def SeqMapByMarkovian(pList, epochs=10000, repeats=1, saveTo=None, glyphSize=0.8, ppl=0.05,
		glyphOpacity=0.5, is3D=False, initExag=10.0, finalExag=1.0, augCfg='a|500|2.0|2.0'):
	tm = mm.ToNumpy(vv.AtlasManager.ReadNumberTable('TestMaps', 'MkvTrans'))
	if len(pList) <= 0:
		vv.Message("No protein group selected")
		vv.Return(0)
	pTable = GetProteinTable()
	mds = NewMds(None, epochs=epochs, is3D=is3D, initExag=initExag, finalExag=finalExag, ppl=ppl)
	mds.GlyphSet = '36 Clusters'
	mds.GlyphSize = glyphSize
	mds.GlyphOpacity = glyphOpacity

	info = MapInfo()
	info.Epochs = epochs
	info.InitE = initExag
	info.FinalE = finalExag
	info.PP = mds.PerplexityRatio
	info.Is3D = is3D
	info.AugCfg = augCfg
	info.Obo = 'Mkv'

	for k, pId in enumerate(pList):
		pSeq = GetProteinSeq(pTable, pId)
		if pSeq is None:
			vv.Message("Cannot get aa-seq of: " + pId)
			continue
		nt = NewDatasetMkv(tm, pSeq, augCfg)
		SeqLabeling(nt, pSeq)
		mds.SetTrainingData(nt)
		RunMds(mds, repeats=repeats, glyphSize=glyphSize, glyphOpacity=glyphOpacity)
		info.pId = pId
		info.pLen = len(pSeq)
		map = vv.LastView
		map.Title = f'{k}: {pId}, N: {nt.Rows}'
		map.Description = info.ToStr()
		if (k+1)%8 == 0:
			SaveToAtlas(saveTo)

	SaveToAtlas(saveTo)
	if repeats > 0:
		mds.Close()


#-------------------------------------------------------------------

def ShowTracingSeq(pMap):
	pSeq = ''.join([b.Name for b in pMap.BodyList])
	info = MapInfo(pMap.Description)
	tp = New.TextPanel(f'Protein: {info.pId}, {len(pSeq)}', pSeq)
	tp.Tag = pMap
	pMap.Tag = tp
	tp.OnSelection = '@OnSeqSelection()'
	pMap.AddEventHandler('ItemsSelected', '@OnSeqSelected()')
	tp.Show()

def OnSeqSelection():
	pMap = pp.Tag
	if pMap.TheForm.IsDisposed or not vv.MouseButtons.LeftButtonPressed:
		return
	tb = pp.TextBox
	iBegin = tb.SelectionStart
	iEnd = tb.SelectionStart + tb.SelectionLength
	pMap.SelectedItems = [f'R{i}' for i in range(iBegin, iEnd)]

def MarkSeq(tb, idxBegin, idxEnd):
	if idxEnd<=idxBegin: 
		return
	tb.Select(idxBegin, idxEnd-idxBegin)
	tb.SelectionBackColor = New.Color('Green')	

def OnSeqSelected():
	tp = pp.Tag	
	if tp.TheForm.IsDisposed: 
		return
	L = sorted( [int(id[1:]) for id in pp.SelectedItems] )
	tb = tp.TextBox
	tb.SelectAll()
	tb.SelectionBackColor = tb.BackColor	
	tb.SelectionLength = 0
	N = len(L)
	i = 0
	while i < N:
		j = i+1
		while j < N:
			if L[j] - L[j-1] > 1:
				MarkSeq(tb, L[i], L[j-1]+1)
				break
			else:
				j += 1
		if j == N:
			MarkSeq(tb, L[i], L[j-1]+1)
		i = j

def ShowProteinSeq(pMap):
	pId = pMap.SelectedItems[0]
	rowIdx = vv.Dataset.IndexOfRow(pId)
	pSeq = vv.Dataset.GetDataAt(rowIdx, 2)
	pSym = vv.Dataset.GetDataAt(rowIdx, 1)
	pLen = int(vv.Dataset.GetDataAt(rowIdx, 3))
	tb = New.TextPanel(f'{pId}: {pSym}, {pLen}', pSeq)
	tb.Show()

#-----------------------------------------------------------------------

def ConfigAtlasMaps(atlas, itemList, mpWidth=1000, mpHeight=700, gSize=0.35, gOpacity=0.5, hiddenSize=7, reset=False):
	for it in itemList:
		mp = it.Open()
		if reset:
			for b in mp.BodyListEnabled():
				b.Type = 0
				b.Hidden = False
				b.ShowName = False
		mp.GlyphSize = gSize
		mp.GlyphOpacity = gOpacity
		mp.HiddenBodySize = hiddenSize
		mp.NameLabelColor = New.Color('Yellow')
		mp.NameLabelFont = New.Font('Microsoft Sans Serif', 18.0)
		mp.Resize(0,0,mpWidth,mpHeight)
		#mp.NormalizeView()
		info = MapInfo(mp.Description)
		it.LabelStyle = 2
		it.Name = info.pId
		mp.Close()

def ReCreateMap(pMap, repeats=1):
	info = MapInfo(pMap.Description)
	pTable = GetProteinTable()
	pSeq = GetProteinSeq(pTable, info.pId)
	if info.Obo == 'Mkv':
		tm = mm.ToNumpy(vv.AtlasManager.ReadNumberTable('TestMaps', 'MkvTrans'))
		nt = NewDatasetMkv(tm, pSeq, augCfg=info.AugCfg)
	else:
		nt = NewDataset(pSeq, winSize=int(info.WinSize), augCfg=info.AugCfg)
	mds = NewMds(nt, epochs=int(info.Epochs), is3D=eval(info.Is3D), 
		initExag=float(info.InitE), finalExag=float(info.FinalE), ppl=float(info.PP))
	mds.GlyphSet = pMap.GlyphSet
	mds.GlyphSize = pMap.GlyphSize
	mds.GlyphOpacity = pMap.GlyphOpacity
	RunMds(mds, repeats=repeats,)
	vv.LastView.Description = info.ToStr()

'''========================================================================================
ppList = vv.GroupManager.GetGroupLabels("KeyPairs400")
PP = {aa:k for k, aa in enumerate(ppList)}
pSeq = vv.Dataset.GetDataAt(0, 2)


def ShowProteinPair(pSeq):
	pLen = len(pSeq)
	aaCnt = {}
	for c1 in ALPHABET:
		for c2 in ALPHABET:
			aaCnt[c1+c2] = 0
	for k in range(0, pLen-1, 1):
		aaCnt[pSeq[k:k+2]] += 1
	bv = New.BarView(len(aaCnt))
	for k, pp in enumerate(aaCnt):
		bv.ItemList[k].Id = pp
		bv.ItemList[k].Value = float(aaCnt[pp])
	bv.BaseLineType = 0
	bv.AutoScaling = True
	bv.Show()
	return bv

def GetPairTable(alphabet):
	aaCnt = {}
	for c1 in alphabet:
		for c2 in alphabet:
			aaCnt[c1+c2] = 0
	for k in range(21, vv.Dataset.Rows):
		pSeq = vv.Dataset.GetDataAt(k, 2)
		pLen = len(pSeq)
		for k in range(0, pLen-1, 1):
			aaCnt[pSeq[k:k+2]] += 1
	return aaCnt

def ShowAA():
	ds = vv.Dataset
	cnt = 20*[0.0]
	for k in range(21, ds.Rows):
		for c in ds.GetDataAt(k, 2):
			cnt[P[c]] += 1.0
	bv = New.BarView(20)
	for k, item in enumerate(bv.ItemList):
		item.Id = ALPHABET[k]
		item.Value = cnt[k]
	bv.Show()

def ShowStatistics():
	aaCnt = GetPairTable(ALPHABET)
	bv = New.BarView(len(aaCnt))
	for k, pp in enumerate(aaCnt):
		bv.ItemList[k].Id = pp
		bv.ItemList[k].Value = float(aaCnt[pp])
	bv.BaseLineType = 0
	bv.AutoScaling = True
	bv.BarLabelType=4
	bv.NumberFormat = 'g8'
	bv.Show()

def ShowPairTable():
	aaCnt = GetPairTable(ALPHABET)
	nt = New.NumberTable(20, 20)
	for k1, c1 in enumerate(ALPHABET):
		R = nt.Matrix[k1]
		for k2, c2 in enumerate(ALPHABET):
			R[k2] = aaCnt[c1+c2]
	for k, c in enumerate(ALPHABET):
		nt.RowSpecList[k].Id = c
		nt.ColumnSpecList[k].Id = c
	M = nt.Matrix
	for k in range(20):
		for cl in range(0, k):
			v = 0.5 * (M[k][cl] + M[cl][k])
			if cl > 0:
				vv.Echo2(' ')
			vv.Echo2( f'{(100000.0/v):.8g}' )
		vv.Echo('')
	nt.ShowHeatMap()

ShowPairTable()

def ShowPP(pId):
	pIdx = vv.Dataset.IndexOfRow(pId)
	pSeq = vv.Dataset.GetDataAt(pIdx, 2)
	bv = ShowProteinPair(pSeq)
	bv.Title = f'{pId}: L:{len(pSeq)}'

tb = cs.GetPairLinkage(True)
tb.ShowHeatMap()

M = tb.Matrix
vList = []
for row in range(1, 400):
	for col in range(row):
		vList.append(M[row][col])
print( ' '.join([str(v) for v in vList]) )

nt = cs.GetMarkovCoding2()
nt.ShowHeatMap()


ShowPP('XP_054199642.1')
ShowPP('EAX11017.1')
for pId in vv.SelectedItems:
	ShowPP(pId)

ShowProteinPair(pp.Text)

ppList = []
for c1 in ALPHABET:
	for c2 in ALPHABET:
		ppList.append(c1+c2)

g1 = list(vv.GroupManager.GetGroupLabels('L20'))

g2 = [g[::-1] for g in g1]
vv.GroupManager.SetGroupLabels('L20r', g2)

ppList = [ 'E'+c for c in ALPHABET ]
vv.GroupManager.SetGroupLabels('E20', ppList)
vv.GroupManager.SetGroupLabels('ALPHABET', list(ALPHABET))

ret = vv.LoadLibrary('C:/temp/SeqModeling/bin/Release/SeqModeling.dll')
cs = New.Instance('VisuMap.SeqModeling')
cs.Init(vv, vv.New)
values = New.NumberArray([1.1,2.2]).ToArray()
print(tt.Sum(values))

aaSum = sum([aaD[aa] for aa in aaD])
for aa in aaD:	aaD[aa] = aaD[aa]/aaSum

aaList = []
for aa in aaD:
	aaList.append( aa * int(10000*aaD[aa]) )

aaList = ''.join(aaList)
len(aaList)


nt = cs.MarkovianMatrix1(vv.Dataset)
nt.ShowHeatMap()

nt = vv.AtlasManager.ReadNumberTable('TestMaps', 'MkvTrans')

'''
