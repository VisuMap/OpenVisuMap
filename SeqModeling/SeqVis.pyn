import numpy as np
import math, random, time
vv.Import('PdbLoad.pyn')

GENE_TABLE = 'Gene Features'
ALPHABET = 'ARNDCEQGHILKMFPSTWYV'
P = {ALPHABET[k]:k for k in range(len(ALPHABET))}
P3 = {'ALA':'A', 'ARG':'R', 'ASN':'N', 'ASP':'D', 'CYS':'C',
      'GLU':'E', 'GLN':'Q', 'GLY':'G', 'HIS':'H', 'ILE':'I',
		'LEU':'L', 'LYS':'K', 'MET':'M', 'PHE':'F', 'PRO':'P',
		'SER':'S', 'THR':'T', 'TRP':'W', 'TYR':'Y', 'VAL':'V'}
SeqMap_GLYPHSET = '36 Clusters||||Colored Balls|Ordered Glyphs'
SeqMap_HEAD = 155
SeqMap_TAIL = 171
PMap_GLYPHSET = 'Ordered 64|36 Clusters|Red Green'
BOND_LENGTH = 3.8015
ALPHA_ANGLE = 2*math.pi/3.6   # angle between two alpha atoms in the axis direction.
ALPHA_DIAM = 5.4    # the average diameter of alpha hex.
HELIX_TRANSLATION = 1.5   # translation per residue alone helix direction

vv.RightHanded3D = True


def AssertProteinTable():
	if (vv.Dataset.Columns < 4) or ( vv.Dataset.ColumnSpecList[2].Id != 'ProteinSeq'):
		vv.Message('The current dataset is not a protein table')
		vv.Return()
	return vv.Dataset

def AssertSeqMap(pMap):
	info = MapInfo(pMap.Description)
	if info.pId != None:
		return
	else:
		vv.Message('The view is not a protein seq map')
		vv.Return()

def LoadSeqModeling(seqdll = 'SeqModeling.dll', className = 'VisuMap.SeqModeling'):
	from shutil import copy
	from os.path import exists
	from os import stat
	dllFile = vv.CurrentScriptDirectory + '/' + seqdll
	srcFile = vv.CurrentScriptDirectory + '/' + 'SeqModeling.cs'
	if not exists(dllFile) or stat(dllFile).st_mtime < stat(srcFile).st_mtime:
    	#msbuild = '"C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin/MSBuild.exe"'
		#vv.StartProcess(msbuild, 'SeqModeling.csproj /p:Configuration=Release', False).WaitForExit(1000)
		copy(vv.CurrentScriptDirectory + '/bin/Release/' + seqdll, vv.CurrentScriptDirectory)
		#copy(vv.CurrentScriptDirectory + '/bin/Debug/' + seqdll, vv.CurrentScriptDirectory)
	if not exists(vv.CurrentScriptDirectory + '/' + 'MathNet.Numerics.dll'):
		copy(vv.CurrentScriptDirectory + '/packages/MathNet.Numerics.5.0.0/lib/net48/' + 'MathNet.Numerics.dll', vv.CurrentScriptDirectory)
	vv.LoadLibrary(dllFile)
	return New.Instance(className)

if 'cs' not in globals():
	cs = LoadSeqModeling()

ss = New.CsObject('''

public void SwapHiddenBodies(List<IBody> bsList) {
    foreach(var b in bsList)
		b.Hidden = !b.Hidden;
}

public List<IBody> SetBodyType(List<IBody> bList, string pId=null, int bType=1) {
	foreach(var b in bList){
		if (pId == null) {
			b.Type = (short)bType;
			b.Disabled = false;
			b.Hidden = false;
		} else {
			b.Id = pId ;
			b.Type = (short)bType;
		}
	}
	return bList;
}

public List<IBody> NewHelix(int residues) {
	double angleSpeed = 2*Math.PI/3.6;
	double R = 5.4/2;
	double dx = 1.5;  // Translation per residue
	List<IBody> bList = New.BodyList();
	for(int k=0; k<residues; k++) {
		IBody b = New.Body("A"+k);
		b.Type = 1;
		b.Name = "..Hlx";
		double a = -k * angleSpeed;
		b.SetXYZ(k*dx, R*Math.Sin(a), R*Math.Cos(a));
		bList.Add(b);
	}
	return bList;
}

public List<IBody> ShiftChain(List<IBody> bList, double dx, double dy, double dz) {
	foreach(var b in bList)
		b.Add(dx, dy, dz);
	return bList;
}

public List<IBody> Concatenate(List<IBody> bList1, List<IBody> bList2) {
	var last = bList1[bList1.Count-1];
	bList2 = bList2.GetRange(1, bList2.Count-1);
	ShiftChain(bList2, last.X, last.Y, last.Z);
	bList1.AddRange(bList2);
	return bList1;
} 

''')


# protein embedding map information
class MapInfo():
	def __init__(self, initStr = None):
		for nm in 'pId,Gene,pLen,DS,Epochs,InitE,FinalE,PP,AugCfg,Is3D,Mtd,SF,CF,PT'.split(','):
			setattr(self, nm, None)
		if initStr is not None:
			self.ParseStr(initStr)
	def Set(self, name, value):
		setattr(self, name, value)
		return self
	def Get(self, name):
		return getattr(self, name)
	def Extend(self, name, value):
		if self.Has(name):
			newV = self.Get(name) + ',' + str(value)
		else:
			newV = str(value)
		self.Set(name, newV)
		return self
	def Has(self, attrName):
		return hasattr(self, attrName)
	def Init(self, epochs, is3D, initExag, finalExag, ppl):
		self.Epochs = epochs
		self.Is3D = is3D
		self.InitE = initExag
		self.FinalE = finalExag
		self.PP = ppl
		return self
	def SetMds(self, mds):
		self.Epochs = mds.MaxLoops
		self.InitE = mds.InitialExaggeration
		self.FinalE = mds.ExaggerationFinal
		self.PP = mds.PerplexityRatio
		self.Is3D = mds.Is3D
		return self		
	def ToStr(self):
		dic = self.__dict__
		return ';'.join([f'{key}:{str(dic[key])}' for  key in dic if dic[key] is not None])
	def ParseStr(self, initStr):
		dic = self.__dict__
		for f in initStr.split(';'):
			if f is not None:
				fs = f.split(':')
				if len(fs) == 2:
					dic[fs[0]] = fs[1]

class AtlasMapStore():	
	def __init__(self, atName, clearAtlas=True):
		self.atlas = New.Atlas(atName)
		self.atlas.EventEnabled = True
		self.atlas.OnItemsSelected = "ResetAtlas()"
		self.atlas.HiddenItemSize = 3
		self.rawMap = None
		if clearAtlas:
			self.atlas.Clear()
	def AddMap(self, viewName):
		fmList = vv.FindFormList(viewName)
		if fmList.Count > 0:
			fm = fmList[fmList.Count - 1]
			info = MapInfo(fm.Description)
			item = self.atlas.CaptureItem(fm)
			item.Name = info.pId
			item.Id = info.pId
			item.CacheImage = True
			return fm
		else:
			return None
	def AddRawMap(self, id, bList, scale):
		mp = self.rawMap
		if mp == None: 
			mp = New.MapSnapshot(bList)
			self.rawMap = mp
		else:
			mp.BodyList = bList
		ConfigSeqMap(mp, id, gsize=6.0)
		cs.FitByPCA(mp, scale)
		item = self.atlas.CaptureItem(mp)
		item.Name = id
		item.Id = id
		item.CacheImage = True
		csz = mp.TheForm.ClientSize
		ratio = csz.Width/csz.Height
		item.IconWidth = int(0.06*mp.Width)
		item.IconHeight = 0
		return None

	def __del__(self):
		self.atlas.Close()
		if self.rawMap != None:
			self.rawMap.Close()

class FastTsne():
	def __init__(self, maxRows=0, maxColumns=5, outDim=2, epoches=1000, ppl=0.05, initExag=4.0, finalExag=1.0):
		self.tsne = New.FastTsne(maxRows, maxColumns, outDim)
		self.tsne.Configure(epoches, ppl, initExag, finalExag)
	def __del__(self):
		self.tsne.Dispose()
	def Fit(self, nt):
		return self.tsne.Fit(nt)

def ConfigSeqMap(map, pId, gsize=6.0, redrawMap=False):
	map.GlyphSet = SeqMap_GLYPHSET
	map.GlyphSize = gsize
	map.Description = f'pId:{pId}'
	map.GlyphOpacity = 1.0
	cs.NormalizeChain(map.BodyList, 184)						
	if redrawMap:
		map.ReloadGlyphSet()
		map.RedrawAll()

def NewMapStore(atName):
	return AtlasMapStore(atName, True) if atName!=None else None

def Siblings(chList):
	pSet = set([pId[:4] for pId in chList])
	chList = [b.Id for b in vv.Dataset.BodyListEnabled() if b.Id[:4] in pSet]
	return chList, len(pSet)

#-----------------------------------------------------------
# Code to maintain the protein table.
#-----------------------------------------------------------

def GetFourier(waveLen, waveCount):
	ft = vv.FindPluginObject('WaveTransforms')
	if ft == None:
		vv.Message('Wave-Transforms plugin not installed!')
		vv.Return()
	#ft = ft.NewHaar(waveLen)
	#ft = ft.NewWaveletD4(waveLen)
	ft = ft.NewFourier(waveLen)
	tm = ft.BaseMatrix
	# The columns of tm are the based vectors. The first half are real; the second half are imaginary.
	# The column type are the frequency of the base vectors. Sorting columns-by-type will move all
	# low frequency columns to the beginning of the table; so that the next stmt will select
	# the low frequency (real and imaginary) bases.
	tm = tm.SortColumnsOnType(True)
	coList = list(range(tm.Columns))[0:waveCount]
	return tm.SelectColumns(coList)

def SelectHelixAA(nt):
	rsList = nt.RowSpecList
	idxList = [ k for k in range(nt.Rows) if rsList[k].Name[-1] in set(['h', 'b']) ]
	#idxList = [ k for k in range(nt.Rows) if rsList[k].Name[-1] == 'h' ]
	if len(idxList) > 20:
		nt = nt.SelectRows(idxList)
	return nt

def GetMeanFieldTrans(pList, L=20):
	bList = vv.Dataset.BodyListForId(pList)
	D = New.NumberTable(bList, L*3)
	for k, pId in enumerate(pList):
		if (k>0) and (k%200 == 0):
			vv.Title = f'Reading: {k}:{pId}'
			vv.DoEvents()
		nt = LoadChain(pId)
		#nt = SelectHelixAA(nt)
		#cs.LocalSmoothen2(nt.Matrix, smoothenRatio=0.1, repeats=2)
		cs.PcaNormalizePositive(nt)
		cs.RowDifferentiation(nt)
		cs.MeanFieldTrans(nt, D.Matrix[k])
	return D

# t-SNE reduced data

def GetTsneRD_old(pList, vType, tP):
	epochs, waveN, intRp, stretch, ppl, initExag, finalExag = tP
	mds = NewMds(nt=None, epochs=epochs, is3D=False, initExag=initExag, finalExag=finalExag, 
		ppl=ppl, repeats=0, metric='EuclideanMetric', refreshFreq=0, glyphSet=vv.Map.GlyphSet, 
		glyphSize=6.0, glyphOpacity=1.0)
	mds.GlyphScale = 5.0
	mds.Resize(0,0,800,800)
	mds.AutoNormalizing = False
	#mds.Force1DtSNE()
	outDim = 2

	if vType == 'tFT':
		tm = GetFourier(1024, waveN+1)
		tm = tm.RemoveColumns(New.IntArray(0))
	D = New.NumberTable(vv.Dataset.BodyListForId(pList), waveN*outDim)
	L = len(pList)

	for k, pId in enumerate(pList):
		bList = LoadChain0(pId)
		if bList.Count <= 2:	continue
		if (k+1) % 10 == 0:
			vv.Title = f'Calculating: {pId}/{bList.Count}: {k+1}-th of {L}'
		ss.SetBodyType(bList, None, vv.Dataset.BodyForId(pId).Type)
		bList = Interpolate1Chain(bList, rp=intRp)
		nt = cs.AugmentByStretch(bList, stretch, intRp)
		mds.Description = f'pId:{pId}'
		RunMds(mds, repeats=0, nt=nt)	

		nt = New.NumberTable(mds.BodyList, outDim)
		cs.PcaNormalize2D(nt)
		if vType == 'tMF':
			cs.MeanFieldTrans(nt, D.Matrix[k])
		else:
			cs.FourierTrans(tm, nt, D.Matrix[k])
	mds.Close()
	return D

def MaxRows(ds, pList, intRp):
	maxV = max([ds.IntAt(p, 3) for p in pList])
	return min(vv.GpuCacheLimit, 2**intRp*(maxV - 1) + 1)

def GetTsneRD(pList, vType, tP):
	epochs, waveN, intRp, stretch, outDim, ppl, initExag, finalExag = tP
	ds = vv.Dataset

	tsne = FastTsne(MaxRows(ds, pList, intRp), 4, outDim, epochs, ppl, initExag, finalExag)

	if vType == 'tFT':
		tm = GetFourier(1024, waveN+1)
		tm = tm.RemoveColumns(New.IntArray(0))
	D = New.NumberTable(ds.BodyListForId(pList), waveN*outDim)
	L = len(pList)

	for k, pId in enumerate(pList):
		bList = LoadChain0(pId)
		if bList.Count <= 2:	
			continue
		if (k+1) % 10 == 0:
			vv.Title = f'Calculating: {pId}/{bList.Count}: {k+1}-th of {L}'
		ss.SetBodyType(bList, None, ds.BodyForId(pId).Type)
		bList = Interpolate1Chain(bList, rp=intRp)
		nt = cs.AugmentByStretch(bList, stretch, intRp)
		vv.DoEvents()

		nt = tsne.Fit(nt)
		if nt == None:
			continue

		if outDim == 2:
			cs.PcaNormalize2D(nt)
		else:
			cs.PcaNormalize3D(nt)
		if vType == 'tMF':
			cs.MeanFieldTrans(nt, D.Matrix[k])
		else:
			cs.FourierTrans(tm, nt, D.Matrix[k])
	return D

def GetS2MF(pList, tP):
	L, sf, doTSNE, epochs, ppl, initExag, finalExag = tP
	bList = vv.Dataset.BodyListForId(pList)
	D = New.NumberTable(bList, L*2)

	tsne = None
	if doTSNE:
		outDim = 2
		ds = vv.Dataset
		maxV = max([ds.IntAt(p, 3) for p in pList])
		maxPoints = min(vv.GpuCacheLimit, maxV)
		tsne = FastTsne(maxPoints, 3, outDim, epochs, ppl, initExag, finalExag)

	for k, pId in enumerate(pList):
		if k>0 and k%200==0:
			vv.Title = f'Reading: {k}:{pId}'
		nt = LoadChain(pId)
		cs.ToSphere(nt, sf)
		if tsne!=None and nt.Rows>1:
			if (k+1)%10==0:	
				vv.Title = f'tSNE normalizing: {pId}/{nt.Rows}: {k+1}-th of {len(pList)}'
			nt = tsne.Fit(nt)
			if nt == None:
				continue
			vv.DoEvents()
		cs.PcaNormalize2D(nt)
		cs.MeanFieldTrans(nt, D.Matrix[k])
	return D

def GetFourierTrans(pList, waveLen, waveCount):
	# The first component of the FT is the sume of all components which
	# will be zero because of the centerization before apply FT. Thus, we remove
	# the useless first FT component.
	tm = GetFourier(waveLen, waveCount+1)
	tm = tm.RemoveColumns(New.IntArray(0))
	L = 3*waveCount
	pD = New.NumberTable(vv.Dataset.BodyListForId(pList), L)
	for k, pId in enumerate(pList):
		if (k>0) and (k%200 == 0):
			vv.Title = f'Reading: {k}:{pId}'
			vv.DoEvents()
		nt = LoadChain(pId)
		#nt = SelectHelixAA(nt)
		#cs.LocalSmoothen2(nt.Matrix, smoothenRatio=0.1, repeats=2)
		cs.PcaNormalizePositive(nt)
		#cs.RowDifferentiation(nt)
		cs.FourierTrans(tm, nt, pD.Matrix[k])
	return pD

def GetFourierTransSeq(pList, aaGroups, waveLen, waveCount):
	tm = GetFourier(waveLen, waveCount)	
	#Scaling base vectors to reduce dominance of the first base that reflect the seq-length.
	for R in tm.Matrix:
		for k, f in enumerate([1.0, 4.0, 4.0, 2.0, 2.0]): 
			R[k] *= f
	seqList = []
	pTable = vv.Dataset
	for pId in pList:
		rowIdx = pTable.IndexOfRow(pId)
		if rowIdx >= 0:
			seqList.append( pTable.GetDataAt(rowIdx, 2) )
	return cs.VectorizeProtein(seqList, aaGroups, tm)

def GetMFSeq(pList, aaGroups, mfL):
	seqList = []
	ds = vv.Dataset
	for pId in pList:
		rowIdx = ds.IndexOfRow(pId)
		if rowIdx >= 0:
			seqList.append( ds.GetDataAt(rowIdx, 2) )
	return cs.MFVectorize(seqList, aaGroups, mfL)


def ProteinMap2(pList, vType='sMF', epochs=2000, is3D=False, tSNE=None, tP=None,
		aaGroups='A', waveLen=1024, waveCount=33, mfL=20, staged=False, filterP=(0.0,2,0)):
	pTable = AssertProteinTable()	
	ppl, initExag, finalExag = tSNE
	t0 = time.time()

	samplingDist, minLen, maxLen = filterP
	if minLen > 0:
		pList = [ pId for pId in pList if vv.Dataset.IntAt(pId, 3) >= minLen ]
	if maxLen > 0:
		pList = [ pId for pId in pList if vv.Dataset.IntAt(pId, 3) <= maxLen ]
	if samplingDist > 0.0:
		pList = cs.FlatSampling(pList, samplingDist)
		vv.Title = f'Sampled {len(pList)} chains!'

	# vectorizing the sequence to a table.
	match vType:
		case 'pMF':
			dt = GetMeanFieldTrans(pList, L=mfL)
		case 'pFT':
			dt = GetFourierTrans(pList, waveLen, waveCount)
		case 'sFT': 
			dt = GetFourierTransSeq(pList, aaGroups, waveLen, waveCount)
		case 'sMF': 
			dt = GetMFSeq(pList, aaGroups, mfL)
		case 'rMF':
			dt = GetS2MF(pList, tP=tP)
		case 'tMF'|'tFT':
			dt = GetTsneRD(pList, vType, tP=tP)
		case _:
			vv.Message('Invalid vectorization type: ' + vType)
			return

	for k, b in enumerate(pTable.BodyListForId(pList)):
		dt.RowSpecList[k].CopyFromBody(b)

	mds = NewMds(dt, epochs=epochs, is3D=is3D, glyphSize=1.5, glyphOpacity=1.0, staged=staged, 
		initExag=initExag, finalExag=finalExag, ppl=ppl)

	info = MapInfo().Init(epochs, is3D, initExag, finalExag, ppl)
	info.Mtd = 'Hrm'  
	info.Set('vType', vType)
	info.Set('aaG', aaGroups)
	info.Set('wvL', waveLen)
	info.Set('wvCnt', waveCount)
	info.Set('mfL', mfL)
	info.Set('pCnt', dt.Rows)
	info.Set('tP', tP)	
	info.Set('fP', filterP)

	snMap = RunMds(mds, repeats=1, info=info)
	snMap.Dataset = dt.ToDataset()
	mds.Close()

	info.Set('TM', round(time.time()-t0, 3))
	snMap.Description = info.ToStr()
	return snMap

#-----------------------------------------------------------------------------

def ShowWeb(pId):
	pId = pId[:4]
	if vv.Dataset.ColumnSpecList[0].Id == 'ChainType':
		vv.StartProcess(f'https://rcsb.org/3d-view/{pId}')
	else:
		vv.StartProcess(f'https://www.ncbi.nlm.nih.gov/protein/{pId}')

def ShowChimeraX(pId):
	localPath = Download3DInfo(pId[:4])
	progPath = "C:\\Program Files\\ChimeraX 1.9.dev202408012149\\bin\\ChimeraX.exe"
	vv.StartProcess(progPath, localPath)

#-----------------------------------------------------------------------------

def AugmentData(nt, augCfg='a|400|0.02|0.02'):
	fs = augCfg.split('|')
	N = nt.shape[0]
	match fs[0][0]:
		case 'a': # spiral augmentation
			nC = int(fs[1])   # point-per-circle
			R  = float(fs[2]) # radius of circle
			sC = float(fs[3]) # width of circle
			phase = float(fs[4]) if len(fs)==5 else 0
			a = 2.0*math.pi/nC  # angular speed
			sX = sC/nC  # speed in X direction.
			A = np.zeros((N, 3), np.float32 )
			for n in range(N):
				A[n] = R*math.sin(n*a+phase), R*math.cos(n*a+phase), n*sX
		case 'b':  # simple linear augmentation
			sf = float(fs[1])/1000.0
			A = np.zeros((N, 1), np.float32 )
			for n in range(N):
				A[n] = sf * n
		case 'c':  # circle augmentation
			R = float(fs[1])
			A = np.zeros((N, 2), np.float32 )
			a = 2.0*math.pi/N
			phase = float(fs[2]) if len(fs)==3 else 0
			for n in range(N):
				A[n] = R*math.sin(n*a+phase), R*math.cos(n*a+phase)
		case 'm':
			mom = float(fs[1])
			g = 1.0 - mom
			for k in range(1, N):
				nt[k, :] = mom*nt[k-1, :] + g*nt[k, :]
			return nt
		case 'M':
			nt2 = np.copy(nt)
			mom = float(fs[1])
			g = 1.0 - mom
			for k in range(1, N):
				nt[k, :] = mom*nt[k-1, :] + g*nt[k, :]
			mom = float(fs[2])
			nt = mom*nt + (1-mom)*nt2			
			return nt
		case 's':
			A = np.zeros((N, 2), np.float32 )
			n0 = int(fs[1])   # number of points in the first ring.
			R = float(fs[2])  # the radius of the first ring 
			G = float(fs[3])  # the gape size relative to R
			a, r = 0, R
			for k in range(N):
				A[k] = r*math.cos(a), r*math.sin(a)
				n = n0*r/R
				r += R*G/n
				a += 2*math.pi/n					
		case 'x':
			return nt
	return np.hstack((nt, A))


def NewDataset(S, aaClusters, decay=1.0, augCfg='a|500|2.0|2.0'):
	L = max(aaClusters.values()) + 1
	hv = np.zeros((L))  # head-vector.
	stepSz = np.ones((L))
	dt = np.zeros([len(S), L], np.float32)
	for k, c in enumerate(S):
		hv += stepSz
		if c in aaClusters:
			dt[k] = hv
			hv[aaClusters[c]] = 0

	for i in range(dt.shape[0]):
		for j in range(dt.shape[1]):
			if dt[i, j] != 0:
				dt[i, j] = 1.0/(dt[i, j] + decay)

	#moment = 0.8
	#for k in range(1, dt.shape[0]): dt[k, :] = moment*dt[k-1] + (1.0 - moment)*dt[k]	

	dt = AugmentData(dt, augCfg)
	
	# add interpolation
	repeats = 3
	if repeats == 0:
		nt = mm.ToTable(dt)
		for k, c in enumerate(S):
			nt.RowSpecList[k].Name = c
			nt.RowSpecList[k].Type = aaClusters[c] if c in aaClusters else 35
		for col in range(L):
			nt.ColumnSpecList[col].Id = chr(col+ord('a'))
	else:
		EPS = 0.085
		nt = cs.InterpolateVector(mm.ToMatrix32(dt), repeats, EPS)
		secL = 2**repeats
		L2 = int(secL / 2)
		for k in range(0, nt.Rows, secL):
			k0 = int(k / secL)
			c = S[k0]
			rs0 = nt.RowSpecList[k]
			rs0.Id = f'R{k0}'
			rs0.Name = c
			rs0.Type = aaClusters[c] if c in aaClusters else 35
			for i in range(k-L2, k+L2, 1):
				if (i != k) and (i>=0) and (i<nt.Rows):
					rs = nt.RowSpecList[i]
					rs.Id = f'i{i}'
					rs.Name = rs0.Name
					rs.Type = rs0.Type
	return nt

#-----------------------------------------------------------------------------

def NewMds(nt=None, epochs=1000, is3D=False, initExag=10.0, finalExag=1.0, ppl=0.1, staged=False, zoomFactor=10.0,
		repeats=1, metric='EuclideanMetric', glyphSet=None, glyphSize=0.5, glyphOpacity=1.0, refreshFreq=50, glyphScale=10.0):
	mds = New.MdsCluster(nt)
	mds.Show()
	mds.MdsAlgorithm = 2
	mds.MaxLoops = epochs
	mds.RefreshFreq = refreshFreq
	mds.InitialExaggeration = initExag
	mds.FinalExaggeration = finalExag
	mds.PerplexityRatio = ppl
	mds.Metric = metric
	mds.Repeats = repeats
	mds.ReadOnly = True
	mds.Width = 1500
	mds.Height = 900
	mds.Is3D = is3D
	mds.AutoNormalizing =True
	mds.GlyphOpacity = glyphOpacity
	mds.GlyphSize = glyphSize
	mds.StagedTraining = staged
	mds.ExaggerationSmoothen = True
	mds.MapZoomFactor = zoomFactor
	mds.GlyphScale = glyphScale
	mds.GlyphSet = vv.Map.GlyphType if glyphSet==None else glyphSet
	mds.Description = ''	
	return mds

def RunMds(mds, repeats=1, info=None, nt=None):
	if nt != None:	
		mds.SetTrainingData(nt)
	mds.Repeats = repeats
	if info != None:
		info.DDM = mds.DataDim
		info.SetMds(mds)
		mds.Description = info.ToStr()
	mds.Reset().Start()
	if not mds.Completed: 
		raise Exception("MDS aborted")
	if info != None:
		info.Set('MSz', f'{mds.GlyphSpan:.2f}')
		mds.Description = info.ToStr()
	if repeats == 1:
		mds.SelectedItems = None
		return mds.ShowSnapshot()
	return mds

def ShowBodyList(bList, gSize=1.5, gOpacity=0.5, hSize=3, normalize=True):
	mp = New.Map3DView(bList)
	mp.GlyphSet = SeqMap_GLYPHSET
	mp.ReadOnly = True
	mp.ShowPerformance = False
	mp.ShowBoundingBox = False
	mp.GlyphSize = gSize
	mp.GlyphOpacity = gOpacity
	mp.HiddenBodySize = hSize
	mp.HiddenBodyColor = New.Color('White')
	mp.MapDepth = max(mp.MapHeight, mp.MapWidth)
	mp.Show()
	if normalize:
		mp.NormalizeView()
	return mp

#-------------------------------------------------------------------

def ShowMapData(pMap):
	pSeq = ''.join([b.Name for b in pMap.BodyList]).upper()	
	info = MapInfo(pMap.Description)
	nt = New.NumberTable(pMap.BodyListEnabled(), 3)
	nt.ShowHeatMap().NormalizeView()

def CreateSeqMaps(pList, aaGroups=None, epochs=1000, decay=1.0, saveTo=None, glyphSize=1.75, ppl=0.05,
		glyphOpacity=0.5, is3D=False, initExag=10.0, finalExag=1.0, augCfg='a|500|2.0|2.0'):
	if len(pList) <= 0:
		vv.Message("No protein group selected")
		vv.Return(0)
	pTable = AssertProteinTable()
	mds = NewMds(None, epochs=epochs, is3D=is3D, initExag=initExag, finalExag=finalExag, ppl=ppl)
	mds.GlyphSet = SeqMap_GLYPHSET
	mds.GlyphSize = glyphSize
	mds.GlyphOpacity = glyphOpacity
	mds.AutoNormalizing = True
	mds.RefreshFreq = 500
	info = MapInfo().Init(epochs, is3D, initExag, finalExag, ppl)
	info.AugCfg = augCfg
	info.Mtd = 'Frg'
	info.DS = vv.Dataset.Name
	mapStore = NewMapStore(saveTo)

	aaClusters = {}  # maps aa to cluster indexes.
	for k, aaG in enumerate(aaGroups.split('|')):
		for aa in aaG:
			aaClusters[aa] = k
	
	for k, pId in enumerate(pList):
		pSeq = pTable.StringAt(pId, 2)
		if pSeq is None:
			vv.Message("Cannot get protein seq of: " + pId)
			vv.Return()
		nt = NewDataset(pSeq, aaClusters, decay=decay, augCfg=augCfg)
		info.pId = pId
		info.pLen = len(pSeq)
		vv.Title = f'Embedding sequence {pId}: {k+1}-th of {len(pList)}'
		RunMds(mds, repeats=0, info=info, nt=nt)
		if mapStore != None:
			mapStore.AddMap('MdsCluster')
	mds.Close()
	if mapStore != None: 
		ma = mapStore.atlas
		ma.Description = info.ToStr()
		MatchProteinMap(ma, 50)
		ma.Show()

def Scanning(pMap, stride=100, stepSize=20, broadcasting=False):
	bsList = [b.Id for b in pMap.BodyList]
	for rp in [0,1]:
		for k in range(0, len(bsList), stepSize):
			selected = bsList[k:k+stride]
			if broadcasting:
				vv.EventManager.RaiseItemsSelected(selected)
			else:
				pMap.SelectedItems = selected
			vv.Sleep(10)
			if vv.ModifierKeys.AltPressed or pMap.SelectedItems.Count == 0: 
				return
		vv.Sleep(1000)

#-------------------------------------------------------------------

def ShowAASeq(pMap):
	info = MapInfo(pMap.Description)
	pSelected = pMap.GetSelectedBodies()
	if pSelected.Count == 0:
		pSelected = pMap.BodyListEnabled()
	if info.Mtd == 'PDB':
		pSeq = []
		preType = -1
		for b in pSelected:
			if b.Type != preType:
				if len(pSeq) > 0:
					pSeq.append('\n')
				preType = b.Type
				pSeq.append(f'[{b.Type}]:')
			if (b.Id[0] == 'A'):
				nm = b.Name
				if (nm[0] == 'r') or (nm[0] == 'd'):
					pSeq.append(nm[2])
				else:
					pSeq.append(nm[0])
		pSeq = ''.join(pSeq)
		tp = New.TextPanel(f'Protein: {info.pId}, {len(pSeq)}: {info.PT}', pSeq)
	else:
		pSeq = ''.join([b.Name[0] for b in pSelected]).upper()
		tp = New.TextPanel(f'Protein: {info.pId}, {len(pSeq)}', pSeq)
		tp.Tag = pMap
		tp.OnSelection = '@OnSeqSelection()'
		pMap.AddEventHandler('ItemsSelected', '@OnSeqSelected()')
		bId2Idx = {pMap.BodyList[k].Id:k for k in range(pMap.BodyList.Count)}
		pMap.Tag = (tp, bId2Idx)
	tp.AddLine('\n')
	for pn, pv in info.__dict__.items():
		if pv != None:
			tp.AddLine(f'{pn}\t{pv}')
	tp.Show()


def OnSeqSelection():
	pMap = pp.Tag
	if pMap.TheForm.IsDisposed or not vv.MouseButtons.LeftButtonPressed:
		return
	tb = pp.TextBox
	iBegin = tb.SelectionStart
	iEnd = tb.SelectionStart + tb.SelectionLength
	bsList = pMap.BodyList
	pMap.SelectedItems = [bsList[k].Id for k in range(iBegin, iEnd)]

def MarkSeq(tb, idxBegin, idxEnd):
	if idxEnd<=idxBegin: 
		return
	tb.Select(idxBegin, idxEnd-idxBegin)
	tb.SelectionBackColor = New.Color('Skyblue')	

def OnSeqSelected():
	(tp, bId2Idx) = pp.Tag	
	if tp.TheForm.IsDisposed: 
		return
	L = sorted( [bId2Idx[id] for id in pp.SelectedItems] )
	tb = tp.TextBox
	tb.SelectAll()
	tb.SelectionBackColor = tb.BackColor	
	tb.SelectionLength = 0
	N = len(L)
	i = 0
	while i < N:
		j = i+1
		while j < N:
			if L[j] - L[j-1] > 1:
				MarkSeq(tb, L[i], L[j-1]+1)
				break
			else:
				j += 1
		if j == N:
			MarkSeq(tb, L[i], L[j-1]+1)
		i = j

def ConfigAtlasMaps(atlas, mpWidth=1000, mpHeight=700, gSize=0.35, iconWidth=75, gOpacity=0.5, hiddenSize=7, reset=False):
	itemList = atlas.GetSelectedItems()
	if itemList.Count == 0:
		itemList = atlas.Items
	for it in itemList:
		mp = it.Open()
		if reset:
			for b in mp.BodyListEnabled():
				b.Type = 0
				b.Hidden = False
				b.ShowName = False
		mp.GlyphSize = gSize
		mp.GlyphOpacity = gOpacity
		mp.HiddenBodySize = hiddenSize
		mp.NameLabelColor = New.Color('Yellow')
		mp.NameLabelFont = New.Font('Microsoft Sans Serif', 18.0)
		info = MapInfo(mp.Description)
		mp.Title = f'{info.pId}: {info.PT}'

		bList = mp.BodyList
		allHidden = True
		for b in bList:
			if not b.Hidden:
				allHidden = False
				break
		if allHidden:
			for b in bList: 
				b.Hidden = False
		
		# Mark the head AA.
		bList[0].Type = SeqMap_HEAD
		bList[bList.Count-1].Type = SeqMap_TAIL

		try:										
			mp.ResetSize()
			mp.NormalizeView()
			mp.ZoomingFactor = 0.95
		except:
			mp.Close()
			continue

		info = MapInfo(mp.Description)
		it.LabelStyle = 0
		#it.Name = info.pId + ': ' + str(info.pLen)
		#it.Name = info.pId
		it.Name = str(info.pLen)
		it.IconHeight = 0
		if iconWidth != None:
			it.IconWidth = iconWidth
		it.ShowBorder = False
		it.BorderColor = New.Color(28, 28, 28)

		mp.Close()


# arrange the map items to match the positions in the main map
def MatchProteinMap(pAtlas, iconWidth=50):
	pAtlas.BackgroundColor = New.Color(255, 0, 0, 64)	
	pAtlas.SelectorColor = New.Color('DimGray')
	info = MapInfo(pAtlas.Description)
	if (info.DS != None) and (info.DS != vv.Dataset.Name):
		vv.Folder.OpenDataset(info.DS)
	if pAtlas.Items.Count == 0:
		raise Exception('Empty atlas!')
	minX, minY, maxX, maxY = 10000.0, 10000.0, 0.0, 0.0
	for item in pAtlas.Items:
		b = vv.Dataset.BodyForId(item.Id)
		if b == None: 
			continue
		minX, minY = min(minX, b.X), min(minY, b.Y)
		maxX, maxY = max(maxX, b.X+0.1), max(maxY, b.Y+0.1)
	if (maxX == minX) or (maxY == minY):
		raise Exception('No atlas item present')

	scaleX = (pAtlas.Width - 80)/(maxX-minX)
	scaleY = (pAtlas.Height - 80)/(maxY-minY)	
	scale = min(scaleX, scaleY)

	itemChanged = False
	for item in pAtlas.Items:
		b = vv.Dataset.BodyForId(item.Id)
		if b == None: 
			continue
		item.Left = float(scale*(b.X - minX) + 20.0)
		item.Top = float(scale*(b.Y - minY) + 20.0)
		if iconWidth != None:
			item.IconWidth = iconWidth
		item.LabelStyle = 0
		item.Transparent = True
		if abs(item.Opacity - 0.7) > 0.0001:
			item.Opacity = 0.7
			itemChanged = True
		item.ShowBorder = False
		item.BorderColor = New.Color(32, 32, 32)
	info = MapInfo()
	info.Set('Mnm', vv.Map.Name)
	pAtlas.Description = info.ToStr()
	if itemChanged:
		pAtlas.Redraw()
	else:
		pAtlas.Refresh()
	pAtlas.DataChanged = True

def ReCreateMap(pMap):
	pSeq = ''.join([b.Name for b in pMap.BodyList]).upper()	
	info = MapInfo(pMap.Description)
	nt = NewDataset(pSeq, augCfg=info.AugCfg)

	for k, b in enumerate(pMap.BodyList):
		nt.RowSpecList[k].CopyFromBody(b)

	mds = NewMds(nt, epochs=int(info.Epochs), is3D=eval(info.Is3D), 
		initExag=float(info.InitE), finalExag=float(info.FinalE), ppl=float(info.PP))
	mds.GlyphSet = pMap.GlyphSet
	mds.GlyphSize = pMap.GlyphSize
	mds.GlyphOpacity = pMap.GlyphOpacity
	RunMds(mds, info=info)
	mds.Close()


def SmoothenCurve(pMap, repeats):
	bsList = [b for b in pMap.BodyListEnabled() if b.Id[0] != 'H']
	info = MapInfo(pMap.Description)
	info.Extend('SRpts', repeats)
	for n in range(repeats):
		cs.SmoothenBodyList(bsList)
	pMap.Description = info.ToStr()
	pMap.RedrawAll()

def AtlasTileAll(atlas, aaGroups, using3DInfo=False, waveLen=128, waveCount=16):
	pTable = AssertProteinTable()	
	pList = [item.Name for item in atlas.Items]
	if using3DInfo:
		dt = GetFourierTrans(pList, waveLen, waveCount)
	else:
		tm = GetFourier(waveLen, waveCount)
		seqList = [LoadSeq(pId) for pId in pList]
		dt = cs.VectorizeProtein(seqList, aaGroups, tm)	
		for k, b in enumerate(pTable.BodyListForId(pList)):
			dt.RowSpecList[k].CopyFromBody(b)
	mds = New.TsneSorter(dt, "EuclideanMetric")
	mds.MaxLoops = 10000
	mds.InitExaggeration = 10
	mds.FinalExaggeration = 1.0
	mds.PerplexityRatio = 0.15
	mds.RefreshFreq = 100
	mds.StagedTraining = True
	mds.Show()
	mds.Reset().Start()
	itemSet = {item.Name:item for item in atlas.Items}
	atlas.Items.Clear()
	for item in [itemSet[id] for id in mds.GetSortedItemList()]:
		atlas.Items.Add(item)
	atlas.ArrangeItems(False)
	mds.Close()


def TypeProteinList(pList):
	ft = New.FreeTable()
	ft.AddColumn('Len', True)
	ft.AddRows('A', len(pList))
	for k, pId in enumerate(pList):
		if k % 500 == 0:
			vv.Title = f'Loading: {k}-th seq. of {len(pList)}'
			vv.DoEvents()
		sLen = len( LoadSeq(pId) )
		ft.RowSpecList[k].Id = pId
		ft.Matrix[k][0] = str(sLen)
	tb = ft.ShowAsTable()
	tb.SortOnColumn('Len', True)
	tb.SelectedItems = [ 'Len' ]
	tb.AssignMethod = 0
	tb.ClusterData()
	tb.Close()

def SeqMod(op, seq):
	return ''.join( [modOp[c] for c in seq] )

def LookupKey(key2type, ckey):
	for k in key2type:
		if cs.NWDistance(ckey, k) < 20:
			return k
	key2type[ckey] = 1+len(key2type)
	return ckey

def FlippingChains(pMap, loopSize=60, loops=5):
	szList = loops * ( list(range(loopSize+1)) + list(range(loopSize, -1, -1)) )
	pMap.HiddenBodyColor = New.Color('White')
	for b in pMap.BodyList:
		b.Highlighted = (b.Name[0] == 'd')
	pMap.GlyphOpacity = 0.4
	pMap.StartAnimation()
	for k, sz in enumerate(szList):
		f = sz/loopSize
		pMap.GlyphSize = 2.0 * f + 0.3
		pMap.HiddenBodySize = int(15.0*(1-f)/pp.GlyphSize)
		pMap.Redraw()
		if vv.ModifierKeys.ControlPressed:
			break
		vv.DoEvents()
		vv.Sleep(2000 if sz%loopSize==0 else 50)
		if k == int(0.5*len(szList)):
			ss.SwapHiddenBodies(pMap.BodyList)
	pMap.GlyphSize = 1.0
	pMap.HiddenBodySize = 4
	ss.SwapHiddenBodies(pMap.BodyList)
	pMap.Redraw()	

def Merge3DList(pList):
	bs = New.BodyList()
	ds = vv.Dataset
	for k, pId in enumerate(pList):
		bList = LoadChain0(pId)
		bList = cs.PcaNormalizePositive(New.NumberTable(bList, 3)).ToBodyList()	
		bList = Interpolate(bList, 4)
		if k == 0:
			xc = np.average([b.X for b in bList])
			yc = np.average([b.Y for b in bList])
			zc = np.average([b.Z for b in bList])
		else:
			cs.CenteringBodyList(bList, xc, yc, zc)
		bList = ss.SetBodyType(bList, pId=pId, bType=k)
		bList[0].Type = SeqMap_HEAD
		bList[bList.Count-1].Type = SeqMap_TAIL
		bs.AddRange(bList)
	ShowBodyList(bs, gSize=1.0, gOpacity=0.75)

def Merge2DList(atlas):
	bs = New.BodyList()
	ds = vv.Dataset
	for k, item in enumerate(atlas.SelectedItems):
		mp = item.Load()
		bList = New.BodyListClone(mp.BodyList)
		cs.NormalizeByFlipping(bList)
		if k == 0:
			xc = np.average([b.X for b in bList])
			yc = np.average([b.Y for b in bList])
		else:
			cs.CenteringBodyList(bList, xc, yc, 0)
		cs.NormalizeChain(bList, chType=-1, hidIntp=True)
		bList = ss.SetBodyType(bList, item.Id, k)
		cs.NormalizeChain(bList, chType=-1, hidIntp=False)
		bs.AddRange(bList)
		mp.Close()
	mp = New.MapSnapshot(bs)
	mp.ReadOnly = True
	mp.GlyphSet = SeqMap_GLYPHSET
	mp.GlyphSize = 0.75
	mp.GlyphOpacity = 0.75
	mp.HiddenBodySize = 4
	mp.CentralizeView()
	mp.Show()

def SelectUniqSeq():
	idSet = set()
	seqSet = set()
	for id in pp.AllItems:
		seq = vv.Dataset.StringAt(id, 2)
		if seq not in seqSet:
			idSet.add(id)
			seqSet.add(seq)
	vv.SelectedItems = list(idSet)

def VisChainSize(szType=2):
	if szType < 2:
		pDS = vv.Folder.ReadDataset("P-Info")
		p2sz = {}			
		for k, b in enumerate(pDS.BodyList):
			if b.Id not in p2sz:
				p2sz[b.Id] = pDS.IntAt(k, szType)
	if pp.Name == 'MainForm':
		vv.GuiManager.RememberCurrentMap()
		bList = vv.Map.BodyListEnabled()
	else:
		bList = pp.BodyListEnabled()
	ds = vv.Dataset
	for b in bList:
		match szType:
			case 0: # chains
				typeIdx = int(p2sz[b.Id[:4]])
				b.Type = min(63, typeIdx)
			case 1: # complex size
				typeIdx = int(p2sz[b.Id[:4]]/500)
				b.Type = min(63, typeIdx)
			case 2: # the chain length
				typeIdx = ds.IntAt(b.Id, 3)//100
				b.Type = min(63, typeIdx)
			case 3: # entity-id
				typeIdx = ds.IntAt(b.Id, 1)
				b.Type = 64 + typeIdx
			case 4: # default initial
				chType = ds.StringAt(b.Id, 0)
				typeIdx = 0 if chType=='A' else ( 99 if chType=='r' else 97 )
				b.Type = typeIdx		
	pp.Map.Redraw()

def AlignSeqPair(parentWin):
	from Bio.Align import PairwiseAligner
	if parentWin.Name == 'Atlas':
		pIds = [item.Id for item in parentWin.SelectedItems]
	else:
		pIds = parentWin.SelectedItems
	if len(pIds) < 2:
		vv.Message(f'Please select a pair of proteins!')
		return
	s0 = vv.Dataset.StringAt(pIds[0], 2)
	s1 = vv.Dataset.StringAt(pIds[1], 2)

	isAASeq = s0[0].isupper()
	if s0[0].islower(): s0 = s0.upper()
	if s1[0].islower(): s1 = s1.upper()
	if not isAASeq:
		s0 = s0.replace('U', 'T')
		s1 = s1.replace('U', 'T')
	scType = 'blastp' if isAASeq else 'blastn'

	aligner = PairwiseAligner(scoring=scType)
	for k, ag in enumerate(aligner.align(s0, s1)):
		ratio = ag.score/max(len(s0), len(s1))
		New.TextPanel(f'Alignment-{k+1}: {pIds[0]}:{pIds[1]}; Score={int(ag.score)}; Ratio={ratio:.3g}', str(ag)).Show()
		if k >= 0: break

def ResetAtlas():
	srcName = vv.EventSource.Form.Name
	mk = vv.ModifierKeys
	n=pp.SelectedItems.Count
	if srcName not in ['MainForm', 'MdsCluster', 'Atlas']: 
		return
	if mk.AltPressed or mk.ControlPressed:
		return
	if n!=0 and n<6:
		return
	pp.ResetView()

'''
at = New.Atlas().Show()
at.Close()
'''