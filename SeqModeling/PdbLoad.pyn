# functions to import and process pdb/cif files.
import time
import math

vv.Import('SeqVis.pyn')

# get the path for the cached (PDB) CIF file.
def PidToPath(pId):
	if len(pId)<4:
		raise Exception('invalid protein ID')
	return f'c:/temp/PdbCache/{pId[:4]}.cif'

# get cache npy file for the main chain.
def PidToMainChain(pId):
	if len(pId)<4:
		raise Exception('invalid protein ID')
	return f'c:/temp/MainChain/{pId}.pmc'

csLoad = New.CsObject('''
public List<IBody> LoadMainChain(string cacheFile) {
	string[] lines = File.ReadAllLines(cacheFile);	
	IBody[] bList = new IBody[lines.Length];	
	MT.Loop(0, lines.Length, lineIdx=>{
			string line = lines[lineIdx];
			if (line == null) 
				return;
			string[] fs = line.Split('|');
			Body b = new Body(fs[0]);
			b.Name = fs[1];
			b.Type = short.Parse(fs[2]);
			b.X = float.Parse(fs[3]);
			b.Y = float.Parse(fs[4]);
			b.Z = float.Parse(fs[5]);
			bList[lineIdx] = b;
	});
	return bList.ToList();
}

public string LoadMainSeq(string cacheFile) {
	StringBuilder sb = new StringBuilder();
	using( TextReader tr = new StreamReader(cacheFile) ) {
		while(true) {
			string line = tr.ReadLine();
			if (line == null) 
				break;
			int idx = line.IndexOf('|');
			sb.Append(line[idx+1]);
		}
	}
	return sb.ToString();
}
''')

def ShowPDB(pId, rp=3, eps=0.1, mainChain=False, chainNames=None, includeHA=True, smtRatio=0, glyphSize=1.0, glyphOpacity=0.75):
	localPath, bsList, bsList2, pdbTitle = LoadCifData(pId, mainChain=mainChain, chainNames=chainNames)
	bsList = Interporlate(bsList, rp, eps, smtRatio=smtRatio)
	if includeHA:
		bsList.AddRange(bsList2)
	mp = New.Map3DView(bsList)
	info = MapInfo()
	info.pId = pId
	info.pLen = bsList.Count
	info.Mtd = 'PDB'
	info.PT = SimplifyTitle(pdbTitle)
	info.Set('SmR', smtRatio)
	info.Set('HA', includeHA)
	info.Set('Eps', eps)
	info.Set('MC', mainChain)
	mp.Description = info.ToStr()
	mp.Title = f'{pId}, Len:{bsList.Count}:  {info.PT}'
	mp.GlyphSet = '36 Clusters||||Colored Balls'
	mp.ReadOnly = True
	mp.ShowPerformance = False
	mp.ShowBoundingBox = False
	mp.GlyphSize = glyphSize
	mp.GlyphOpacity = glyphOpacity
	mp.Show()
	mp.HiddenBodySize = 6
	mp.HiddenBodyColor = New.Color('White')
	mp.NormalizeView()
	return mp

def SelectChain(pId, bsList, acc2chain):
	b = vv.Dataset.BodyForId(pId)
	if b == None:
		vv.Message(f'Cannot find {pId} protein in current dataset')
		vv.Return()
	if len(acc2chain) == 0:
		tgtChain = 'A'
	elif b.Name in acc2chain:	
		tgtChain = acc2chain[b.Name]
	else:
		tgtChain = list(acc2chain.values())[0]
	tgtChain += '_1'    # A chain may have multiple copies; we just return the first copy.
	bsList2 = New.BodyList()
	for b2 in bsList:
		chName = b2.Name.split('.')[2]
		if chName == tgtChain:
			bsList2.Add(b2)
	return bsList2 if bsList2.Count > 0 else bsList

def ShowProteinList(pList, mainChain, includeHA, atName, smtRatio=0, glyphSize=1.0, glyphOpacity=0.75):
	mapStore = NewMapStore(atName, is3D=True, clearStore=True)
	if mapStore != None:
		mapStore.atlas.Description = f'DS:{vv.Dataset.Name}'
		mapStore.atlas.OnItemsSelected = '@vv.SelectedItems = [item.Name for item in pp.SelectedItems]'
	for k, pId in enumerate(pList):
		vv.Title = f'Loading {pId}: {k+1}-th of {len(pList)}'
		chainNames = GetChainName(pId)
		ShowPDB(pId, mainChain=mainChain, chainNames=chainNames, includeHA=includeHA, smtRatio=smtRatio, glyphSize=glyphSize, glyphOpacity=glyphOpacity)
		if mapStore != None:	
			mapStore.AddMaps()
	if mapStore != None:
		ma = mapStore.atlas
		ma.OnItemsSelected = '@vv.SelectedItems = [item.Name for item in pp.SelectedItems]'
		ma.OnAtlasShown = 'ShowSelectedProteins.pyn'
		for item in ma.Items: 
			item.IconWidth = 250
		ma.Show()
		ma.ArrangeItems(False)

def GetChainName(pId):
	ds = vv.Dataset
	chIdx = ds.IndexOfColumn('ChainName')
	if chIdx >= 0:
		rowIdx = ds.BodyIndexForId(pId)
		chName = ds.GetDataAt(rowIdx, chIdx)
		return [ chName ]
	else:
		return None

def UnFoldProteinList(pList, epochs=1000, eps=0.1, mainChain=False, includeHA=False, wholeComplex=False, samplingDist=0, initExag=5.0, ppl=0.1, atName=None, 
		stretch=0, clusterStretch=0.5, expandFactor=1.0, iconWidth=50, glyphSize=2.0, smtRatio=0):

	if wholeComplex:
		# Remove all duplicates.
		selected = set()
		pList2 = []
		for p in pList:
			if p[:4] not in selected:
				pList2.append(p)
				selected.add(p[:4])
		pList = pList2

	if samplingDist > 0:
		pList = ss.FlatSampling(vv.Dataset.BodyListForId(pList), samplingDist)
		pList = [b.Id for b in pList]
		vv.Title = f'Sampled {len(pList)} chains!'
	else:
		vv.Title = 'Sampled all chains'

	if vv.ModifierKeys.ControlPressed:
		vv.SelectedItems = pList
		return
	
	mapStore = NewMapStore(atName, is3D=False, clearStore=True)	
	mds = NewMds(nt=None, epochs=epochs, is3D=False, initExag=initExag, finalExag=1.0, ppl=ppl, 
		repeats=0, metric='EuclideanMetric', glyphSet='36 Clusters||||Colored Balls')
	mds.RefreshFreq = epochs//2
	mds.GlyphSize = 0.75 if atName==None else glyphSize
	mds.GlyphOpacity = 1.0	
	mds.GlyphSet = vv.Map.GlyphSet

	if vv.Dataset.IndexOfColumn('ChainName')>=0:
		mainChain = False
	try:
		for k, pId in enumerate(pList):
			chainNames = None if wholeComplex else GetChainName(pId)
			if mainChain and not includeHA:
				bList = New.BodyList(LoadMainChain(pId))
				localPath, bList2, pdbTitle = '-', None, '-'
			else:
				localPath, bList, bList2, pdbTitle = LoadCifData(pId, mainChain=mainChain, chainNames=chainNames)
			seqLen = bList.Count

			if not wholeComplex:
				bb = vv.Dataset.BodyForId(pId)
				for b in bList:
					b.Type = bb.Type
					b.Hidden = False

			bList = Interporlate(bList, rp=3, eps=eps, smtRatio=smtRatio)			

			if includeHA:
				bList.AddRange(bList2)

			nt = Augment2Table(bList, stretch=stretch, clusterStretch=clusterStretch, expandFactor=expandFactor)

			if nt.Rows < 8:
				continue	

			info = MapInfo()
			info.SF = stretch
			info.CF = expandFactor
			info.pId = pId
			info.pLen = bList.Count
			info.Mtd = 'PDB'
			info.PT = SimplifyTitle(pdbTitle)
			info.DS = f'DS:{vv.Dataset.Name}'
			info.Set('SmR', smtRatio)
			info.Set('HA', includeHA)
			info.Set('Eps', eps)
			info.Set('MC', mainChain)
			if chainNames != None:
				info.Set('CNs', '|'.join(chainNames) )
			mds.SetTrainingData(nt)
			vv.Title = f'Unfolding {pId}/{seqLen:,}: {k+1}-th of {len(pList)}'
			vv.DoEvents()

			# for short sequences (<200) we used fixed the perlexity instead of ratio
			#mds.PerplexityRatio = ppl*1600/nt.Rows if nt.Rows < 1600 else ppl

			RunMds(mds, info=info, repeats=0)

			if mapStore != None:
				mapStore.AddMaps()
			else:
				mds.ShowSnapshot().NormalizeView()
		mds.Close()
	except Exception as e:
		vv.Message(str(e))
	if mapStore != None:
		ma = mapStore.atlas
		MatchProteinMap(ma, iconWidth)
		ma.EventEnabled = True
		ma.OnItemsSelected = "@if vv.EventSource.Form.Name != 'Atlas': pp.ResetView()"
		ma.HiddenItemSize = 3
		ma.Description = info.ToStr()
		ma.Show()
		ma.DataChanged = True # since the Show() clears the DataChanged flag.

def GetTitleString(L, fPDB):
	idx = L.find('\'')
	if idx < 0:
		L = fPDB.readline()
		if L[0] == ';':
			return L[1:].strip()
		elif L[0] == '\'':
			return L.strip().strip('\'')
		else:
			return ''
	return L[idx:].strip().strip('\'')

def SimplifyTitle(title):
	return title.replace(':', '..').replace(';', '.,')


def GetAcc2Chain(fPDB):
	dict = {}
	for L in fPDB:
		if L[0] == '#': break
		if L[0] == '_': continue
		fs = L.split()
		if fs[8] not in dict:
			dict[fs[8]] = fs[3]
	return dict	

def LoadCifData(pId, mainChain=False, chainNames=None):
	localPath = pId if pId.endswith('.cif') else Download3DInfo(pId[:4])
	if chainNames != None:  
		mainChain = False
	bsList = cs.LoadCif(localPath, chainNames)
	if mainChain:
		dic = cs.GetAccession2ChainTable()
		acc2chain = {}
		for key in dic.Keys:
			acc2chain[key] = dic[key]
		bsList = SelectChain(pId, bsList, acc2chain)
	return localPath, bsList, cs.GetHeteroChains(), cs.GetTitle()

def OpenPDBFile(pMap):
	info = MapInfo(pMap.Description)
	OpenCifFile(info.pId)

def OpenCifFile(pId):
	vv.StartProcess("vi", PidToPath(pId))

def Augment2Table(bList, stretch, clusterStretch=1.0, expandFactor=1.0):

	if expandFactor != 1.0:
		bList = New.BodyListClone(bList)
		bList = cs.LocalExpand(bList, expandFactor)
	nt = New.NumberTable(bList,3)

	if stretch == 0 and clusterStretch == 0:
		return nt
	if nt.Rows <= 1:
		return nt	

	if clusterStretch == 0:
		nt.AddColumns(1)
	else:
		nt.AddColumns(4)

	M = nt.Matrix
	rsList = nt.RowSpecList
	# get the number of interpolation points, ipp, which is normally 8
	dx = 0
	for ipp in range(1, min(64, rsList.Count)):		
		if rsList[ipp].Id[0] == 'A':
			dx = 0.1*stretch/ipp
			break
	if dx == 0:
		return nt

	meanV = {}
	meanCnt = {}
	for row, rs in enumerate(rsList):
		if rs.Type not in meanCnt:
			meanCnt[rs.Type] = 0
			meanV[rs.Type] = [0, 0, 0]
		meanCnt[rs.Type] += 1
		V, R = meanV[rs.Type], M[row]
		for dim in range(3):
			V[dim] += R[dim]

	for row, rs in enumerate(rsList):
		if (row==0) or (rs.Type != rsList[row-1].Type): 
			offset = -0.5*meanCnt[rs.Type]*dx
		# hetero atoms don't participate in the unfold stretching
		if rs.Id[0] == 'H': continue
		#if rs.Name[0] == 'r': continue
		M[row][3] += offset
		offset += dx

	if clusterStretch != 0:
		for t in meanCnt:
			n, V = meanCnt[t], meanV[t]
			for dim in range(3):
				V[dim] = clusterStretch * V[dim]/n
		for row, rs in enumerate(rsList):
			V, R = meanV[rs.Type], M[row]
			for dim in range(3):
				R[4+dim] = V[dim]
	return nt

def Download3DInfo(pId):
	from os.path import exists
	#from urllib.request import urlretrieve
	import requests
	localPath = PidToPath(pId)	
	if not exists(localPath):
		remotePath = f'https://files.rcsb.org/download/{pId[:4]}.cif'
		#urlretrieve(remotePath, localPath)
		request = requests.get(remotePath, timeout=30, stream=True)
		with open(localPath, 'wb') as f:
			for chunk in request.iter_content(1024 * 1024):
				f.write(chunk)
	return localPath

def CheckForPDB(pMap):
	info = MapInfo(pMap.Description)
	if info.Mtd != 'PDB':
		vv.Message('The parent map is not created from PDB file')
		vv.Return()

def HideInterpolates():
	for b in pp.BodyList:
		if b.Id.startswith('i'):
			b.Hidden = True
	pp.TheForm.HiddenBodySize = 4
	pp.RedrawAll()

def ShowHelix():
	vv.SelectedItems = [b.Id for b in pp.BodyList if b.Name.endswith('.h')]

def ShowBetaSheet():
	vv.SelectedItems = [b.Id for b in pp.BodyList if b.Name.endswith('.b')]

def LoadMainChain0(pId):
	from os.path import exists
	cacheFile = PidToMainChain(pId)
	bList = New.BodyList()
	if exists(cacheFile):
		bList = csLoad.LoadMainChain(cacheFile)
	else:
		ds = vv.Dataset
		chName = ds.StringAt(pId, 4)
		_, bList, _, pdbTitle = LoadCifData(pId, mainChain=False, chainNames=[chName])
		SaveChain(pId, bList)
	return bList

def LoadMainChain(pId):
	bList = LoadMainChain0(pId)
	return New.NumberTable(bList, 3)

def LoadMainSeq(pId):
	from os.path import exists
	cacheFile = PidToMainChain(pId)
	if exists(cacheFile):
		return csLoad.LoadMainSeq(cacheFile)
	else:
		seq = []
		nt = LoadMainChain(pId)
		for rs in nt.RowSpecList:
			seq.append(rs.Name[0])
		return ''.join(seq)

def Interporlate(bsList, rp, eps, smtRatio=0):
	bs = New.BodyList()
	k0 = 0
	t0 = bsList[k0].Type
	chIdx  = 0
	for k in range(bsList.Count+1):
		if (k == bsList.Count) or (bsList[k].Type != t0):
			D = bsList.GetRange(k0, k-k0)
			if smtRatio != 0:
				cs.LocalSmoothen(D, smtRatio, 8)
			D = cs.Interpolate3D(D, rp, eps, bs.Count, chIdx)
			chIdx+=1
			bs.AddRange(D)
			if k < bsList.Count:
				k0 = k
				t0 = bsList[k0].Type
	return bs

def UnFoldMap(pMap, epochs=1000, ppl=0.1, staged=False, repeats=1, stretch=0, clusterStretch=1.0, expandFactor=1.0, initExag=10.0, finalExag=1.0, is3D=False):
	bList = pMap.BodyListEnabled()
	nt = Augment2Table(bList, stretch=stretch, clusterStretch=clusterStretch, expandFactor=expandFactor)
	mds = NewMds(nt, is3D=is3D, glyphSet=pMap.GlyphSet, initExag=initExag, finalExag=finalExag,
		epochs=epochs, ppl=ppl, staged=staged)
	info = MapInfo(pMap.Description).SetMds(mds)
	info.SF = stretch
	info.CF = expandFactor  # Local expanding factor
	winTitle = pMap.Title
	mds.GlyphSize = 0.5
	RunMds(mds, repeats=repeats, info=info)
	vv.LastView.Title = winTitle
	if repeats != 0:
		mds.Close()

# pId=pList[0]
# Extract chains from PDB complex and store then in current table. Duplicates will be removed.
def LoadChains(pId, aaChains=True, rnaChains=False, dnaChains=False):
	ds = vv.Dataset
	if (ds.Columns != 5) or (ds.ColumnSpecList[4].Id != 'ChainName'):
		vv.Message('Current dataset has invalid format: pid;repeats;seq;len;chainName')
		return None, None, None

	_, bList, _, pdbTitle = LoadCifData(pId, mainChain=False)
	if bList == None:
		print('Failed to load cif file: ', pId)
		return None, None, None
	chList = []
	chType = -1    # current chain type
	chName = ''	  # current chain name.
	seqList = []
	ppType = -1   # polypeptide type: 0: aa-pp, 99: rna-pp, 97: dna-pp
	for b in bList:
		if b.Type == chType:
			pp = b.Name[0] if ppType == 0 else b.Name[2]
			seqList.append(pp)
		else:
			if len(seqList) > 0:
				if (aaChains and ppType==0) or (rnaChains and ppType==1) or (dnaChains and ppType==2):
					pSeq = ''.join(seqList)
					chList.append( (chName, ppType, pSeq, len(pSeq)) )
			chType = b.Type
			fs = b.Name.split('.')
			chName = fs[2]
			if fs[0] == 'r':	
				ppType = 99
			elif fs[0] == 'd':
				ppType = 97
			else:
				ppType = 0
			pp = b.Name[0] if ppType == 0 else b.Name[2]
			seqList = [ pp ]

	if len(seqList) > 0:
		if (aaChains and ppType==0) or (rnaChains and ppType==99) or (dnaChains and ppType==97):
			pSeq = ''.join(seqList)
			chList.append( (chName, ppType, pSeq, len(pSeq)) )

	# merge the repeated sequences:
	chSet = {}
	chInfo = {}
	totalLength = 0
	for (chId, ppType, pSeq, seqLen) in chList:
		totalLength += seqLen
		if pSeq in chSet:
			chSet[pSeq] += 1
		else:
			chSet[pSeq] = 1
			chInfo[pSeq] = (chId, ppType)

	for k, ch in enumerate(chSet):
		repeats = chSet[ch]
		chLen = len(ch)
		chId, ppType = chInfo[ch]
		seq = ch if ppType == 0 else ch.lower()
		b = ds.AddRow(f'{pId}_{k}', None,  ppType, [pId, str(repeats), seq, str(chLen), chId])
		if b == None:
			raise Exception('Failed: '+vv.LastError)
	return len(chList), totalLength, pdbTitle

# Unpack all chains in a PDB directory and store them in current dataset.
# A summary table about each protein will displayed.
def LoadAllChains(pList=None, aaChains=True, rnaChains=False, dnaChains=False):
	import os
	ds = vv.Dataset
	if (ds.Columns != 5) or (ds.ColumnSpecList[4].Id != 'ChainName'):
		vv.Message('Current dataset has invalid format: pid;repeats;seq;len;chainName')
		return

	if pList == None:
		pList = [f[:4] for f in os.listdir('c:/temp/PDBCache') if f.endswith('.cif')]	

	chCount = 0
	pTable = New.FreeTable()
	pTable.AddColumn('Chains', True)
	pTable.AddColumn('Size', True)
	pTable.AddColumn('Title', False)

	for k, pId in enumerate(pList):
		if (k+1)%50 == 0:
			print(k+1, ': ', pId, chCount)
		chCnt, totalLen, title = LoadChains(pId, aaChains=aaChains, rnaChains=rnaChains, dnaChains=dnaChains)
		if chCnt == None:
			continue
		chCount += chCnt
		pTable.AddRow(pId, 0, [str(chCnt), str(totalLen), title])
		vv.DoEvents()
	ds.CommitChanges()
	return pTable

def SaveChain(chId, chain):
	cacheFile = f'c:/temp/MainChain/{chId}.pmc'
	with open(cacheFile, 'w') as outFile:
		for b in chain:
			outFile.write(f'{b.Id}|{b.Name}|{b.Type}|{b.X:.2f}|{b.Y:.2f}|{b.Z:.2f}\n')

def UnpackChains(pList=None):
	import os
	if pList == None:
		pList = [f[:4] for f in os.listdir('c:/temp/PDBCache') if f.endswith('.cif')]	
	chainsCount = 0
	nm2id = {}
	ds = vv.Dataset
	for b in ds.BodyList:
		nm = ds.StringAt(b.Id, 4)
		nm2id[b.Id[:4]+'_'+nm] = b.Id
	for k, pId in enumerate(pList):
		_, bList, _, pdbTitle = LoadCifData(pId, mainChain=False)
		preChName = None
		chain = []
		if k % 50 == 0:
			vv.Title =  f'{k}: {chainsCount}'
		vv.DoEvents()
		for b in bList:
			chNm = b.Name.split('.')[2]
			if chNm == preChName:
				chain.append(b)
			else:
				if preChName != None:
					id_nm = pId + '_' + preChName
					if id_nm in nm2id:
						chainsCount += 1
						SaveChain(nm2id[id_nm], chain)
				# start a new chain with chName and b as first point
				preChName = chNm
				chain = [ b ]
		# The last chain
		if len(chain) > 0:
			id_nm = pId + '_' + preChName
			if id_nm in nm2id:
				SaveChain(nm2id[id_nm], chain)

def PreloadPDB(sList):
	from os.path import exists
	pList = sList.split(',')
	print(f'Preloading {len(pList)} pIds...')
	pList = list(set([p[:4] for p in pList]))
	print(f'Preloading {len(pList)} files...')
	cnt = 0
	for k, pId in enumerate(pList):
		if k%50 == 0: 
			print(k)
		if not exists(PidToPath(pId)):
			try:
				Download3DInfo(pId)
			except Exception as e:
				print(f'EXCEPTION ({k}): ', pId, str(e))
				raise e
			cnt+=1
	print(f'Downloaded {cnt} PDB files')
	return pList

def InitDatabase(dsName, description):
	dsName = vv.Folder.NewDataset(dsName, description).Name
	vv.Folder.OpenDataset(dsName)
	vv.Map.GlyphSet = 'Ordered 64|36 Clusters|Red Green'
	ds = vv.Dataset
	ds.AddColumn('PID', 0, '', 0)
	ds.AddColumn('Repeats', 1, '0', 1)
	ds.AddColumn('ProteinSeq', 0, '', 2)
	ds.AddColumn('SeqLen', 1, '0', 3)
	ds.AddColumn('ChainName', 0, '', 4)
	ds.CommitChanges()

def MergeTableToDataset(tb, dsName):
	oldDsName = vv.Dataset.Name
	ds = vv.Folder.OpenDataset(dsName)
	if ds == None:
		vv.Folder.NewDataset(dsName, '')
		ds = vv.Folder.OpenDataset(dsName)
		ds.AddColumn('Chains', 1, '0', 0)
		ds.AddColumn('Size', 1, '0', 1)
		ds.AddColumn('Title', 0, '', 2)
		ds.CommitChanges()
	for row in range(tb.Rows):
		rowId = tb.RowSpecList[row].Id		
		if ds.IndexOfRow(rowId) < 0:
			ds.AddRow(rowId, '', 0, tb.Matrix[row])	
	ds.CommitChanges()
	vv.Folder.OpenDataset(oldDsName)

# import a protein list into a new dataset table.
def ImportPDBList(sList, dsName, dsDescription=''):
	pList = PreloadPDB(sList)
	InitDatabase(dsName, dsDescription)
	infoTable = LoadAllChains(pList, True, True, True)
	MergeTableToDataset(infoTable, "P-Info")

'''


vv.SelectedItems = vv.FindItems('ProteinSeq', 'RGAFGKPQGTVARVHIGQVIMSIRTKLQ')

aa = 'NLRKNNRQPYAVSELAGHQTSAESWGTGRAVARIPRVRGGGTHRSGQGAFGNMCRGGRMFAPTKTWRRWHRRVNTTQKRYAICSA'[:40]
bb = 'RGAFGKPQGTVARVHIGQVIMSIRTKLQ'[:20]
L = len(aa)//2
a1 = aa[:L]
a2 = aa[L:]
s1 = set(vv.FindItems('ProteinSeq', a1)) 
s2 = set(vv.FindItems('ProteinSeq', a2)) 
s12 = s1.union(s2)
print(len(s1), len(s2), len(s12))


d = cs.NWDistance('MRGAFGKPQGTVARVHG', 'mRGAFGKPQGTVARVHIG')
print(d)

pSet = set(vv.SelectedItems)
vv.SelectedItems = [p for p in vv.AllItems if p[:4] in pSet]

ds = vv.Dataset
for k, b in enumerate(ds.BodyList):
	if b.Type != 0:
		seq = ds.GetValueAt(k, 2)
		ds.SetStringAt(k, 2, seq.lower())

isLarge = set(vv.SelectedItems)
for b in vv.Dataset.BodyList:
	if b.Id[:4] in isLarge:
		b.Disabled = True
vv.Map.Redraw()

Steps to import a list of PDB id into VisuMap:

sList = '6V39_2,6V39_22,6V39_27,6V39_4,6V39_41,6V39_51,6V3A_2,6V3A_22,6V3A_27,6V3A_4,6V3A_41,6V3A_51,6V3B_2,6V3B_22,6V3B_27,6V3B_4,6V3B_41,6V3B_51,6V3D_2,6V3D_22,6V3D_27,6V3D_4,6V3E_11,6YHS_23,6YHS_30,6YPU_14,6YPU_7,6YSI_20,6YSI_31,6YT9_14,6YT9_7,7M4U_11,7M4U_21,7M4V_2,7M4V_22,7M4V_27,7M4V_4,7M4W_2,7M4W_22,7M4W_41,7M4X_2,7M4X_22,7M4Y_2,7M4Y_22,7M4Y_27,7M4Y_41,7M4Y_51,7M4Z_2,7M4Z_22,7M4Z_27,7M4Z_41,7M4Z_51,7P2Y_3,7P3N_3,7P3W_3,7RYF_2,7RYF_22,7RYF_27,7RYF_4,7RYF_41,7RYF_51,7RYG_2,7RYG_22,7RYG_27,7RYG_4,7RYG_41,7RYG_51,7RYH_2,7RYH_22,7RYH_27,7RYH_4,7RYH_41,7RYH_51,7S2I_1,7UVV_2,7UVV_22,7UVV_27,7UVV_4,7UVV_41,7UVV_51,7UVW_2,7UVW_22,7UVW_27,7UVW_4,7UVW_41,7UVW_51,7UVX_2,7UVX_22,7UVX_27,7UVX_4,7UVX_41,7UVX_51,7UVY_2,7UVY_22,7UVY_27,7UVY_4,7UVY_41,7UVY_51,7UVZ_2,7UVZ_22,7UVZ_27,7UVZ_4,7UVZ_41,7UVZ_51,7UW1_2,7UW1_22,7UW1_27,7UW1_4,7UW1_41,7UW1_51'

sList

ImportPDBList(sList, 'Albumin', 'Full Text = "albumin"')

'''
