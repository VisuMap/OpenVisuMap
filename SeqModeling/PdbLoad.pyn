# functions to import and process pdb/cif files.
import time

# get the path for the cached (PDB) CIF file.
def PidToPath(pId):
	if len(pId)<4:
		raise Exception('invalid protein ID')
	return f'c:/temp/PdbCache/{pId[:4]}.cif'

# get cache npy file for the main chain.
def PidToMainChain(pId):
	if len(pId)<4:
		raise Exception('invalid protein ID')
	return f'c:/temp/MainChain/{pId}.pmc'

csLoad = New.CsObject('''
public List<IBody> LoadMainChain(string cacheFile) {
	List<IBody> bList = new List<IBody>();
	using( TextReader tr = new StreamReader(cacheFile) ) {
		while(true) {
			string line = tr.ReadLine();
			if (line == null) break;
			string[] fs = line.Split('|');
			Body b = new Body(fs[0]);
			b.Name = fs[1];
			b.Type = short.Parse(fs[2]);
			b.X = float.Parse(fs[3]);
			b.Y = float.Parse(fs[4]);
			b.Z = float.Parse(fs[5]);
			bList.Add(b);
		}		
	}
	return bList;
}

public string LoadMainSeq(string cacheFile) {
	StringBuilder sb = new StringBuilder();
	using( TextReader tr = new StreamReader(cacheFile) ) {
		while(true) {
			string line = tr.ReadLine();
			if (line == null) 
				break;
			int idx = line.IndexOf('|');
			sb.Append(line[idx+1]);
		}
	}
	return sb.ToString();
}

public void MinimizeView(IForm frm) {
	frm.TheForm.Activate();
	frm.TheForm.WindowState = (System.Windows.Forms.FormWindowState)1;
}
''')

def ShowPDB(pId, rp=3, eps=0.1, mainChain=False, chainNames=None, includeHA=True, smtRatio=0, glyphSize=1.0, glyphOpacity=0.75):
	localPath, bsList, bsList2, pdbTitle = LoadCifData(pId, mainChain=mainChain, chainNames=chainNames)
	bsList = Interporlate(bsList, rp, eps, smtRatio=smtRatio)
	if includeHA:
		bsList.AddRange(bsList2)
	mp = New.Map3DView(bsList)
	info = MapInfo()
	info.pId = pId
	info.pLen = bsList.Count
	info.Mtd = 'PDB'
	info.PT = SimplifyTitle(pdbTitle)
	info.Set('SmR', smtRatio)
	info.Set('HA', includeHA)
	info.Set('Eps', eps)
	info.Set('MC', mainChain)
	mp.Description = info.ToStr()
	mp.Title = f'{pId}: Len:{bsList.Count}'
	mp.GlyphSet = '36 Clusters||||Colored Balls'
	mp.ReadOnly = True
	mp.ShowPerformance = False
	mp.ShowBoundingBox = False
	mp.GlyphSize = glyphSize
	mp.GlyphOpacity = glyphOpacity
	mp.Show()
	mp.NormalizeView()

def SelectChain(pId, bsList, acc2chain):
	b = vv.Dataset.BodyForId(pId)
	if b == None:
		vv.Message(f'Cannot find {pId} protein in current dataset')
		vv.Return()
	if len(acc2chain) == 0:
		tgtChain = 'A'
	elif b.Name in acc2chain:	
		tgtChain = acc2chain[b.Name]
	else:
		tgtChain = list(acc2chain.values())[0]
	tgtChain += '_1'    # A chain may have multiple copies; we just return the first copy.
	bsList2 = New.BodyList()
	for b2 in bsList:
		chName = b2.Name.split('.')[2]
		if chName == tgtChain:
			bsList2.Add(b2)
	return bsList2 if bsList2.Count > 0 else bsList

def ShowProteinList(pList, mainChain, includeHA, atName, smtRatio=0, glyphSize=1.0, glyphOpacity=0.75):
	mapStore = NewMapStore(atName, is3D=True, clearStore=True)
	if mapStore != None:
		mapStore.atlas.Description = f'DS:{vv.Dataset.Name}'
		mapStore.atlas.OnItemsSelected = '@vv.SelectedItems = [item.Name for item in pp.SelectedItems]'
	for k, pId in enumerate(pList):
		vv.Title = f'Loading {pId}: {k+1}-th of {len(pList)}'
		chainNames = GetChainName(pId)
		ShowPDB(pId, mainChain=mainChain, chainNames=chainNames, includeHA=includeHA, smtRatio=smtRatio, glyphSize=glyphSize, glyphOpacity=glyphOpacity)
		if mapStore != None:	
			mapStore.AddMaps()
	if mapStore != None:
		ma = mapStore.atlas
		ma.OnItemsSelected = '@vv.SelectedItems = [item.Name for item in pp.SelectedItems]'
		ma.OnAtlasShown = 'ShowSelectedProteins.pyn'
		for item in ma.Items: 
			item.IconWidth = 250
		ma.Show()
		ma.ArrangeItems(False)

def GetChainName(pId):
	ds = vv.Dataset
	chIdx = ds.IndexOfColumn('ChainName')
	if chIdx >= 0:
		rowIdx = ds.BodyIndexForId(pId)
		chName = ds.GetDataAt(rowIdx, chIdx)
		return [ chName ]
	else:
		return None

def UnFoldProteinList(pList, epochs=1000, eps=0.1, mainChain=False, includeHA=False, atName=None, 
		stretch=0, expandFactor=1.0, iconWidth=50, smtRatio=0):
	mapStore = NewMapStore(atName, is3D=False, clearStore=True)	
	mds = NewMds(nt=None, epochs=epochs, is3D=False, initExag=5.0, finalExag=1.0, ppl=0.1, 
		repeats=0, metric='EuclideanMetric', glyphSet='36 Clusters||||Colored Balls')
	mds.RefreshFreq = epochs
	mds.GlyphSize = 2.0
	mds.GlyphOpacity = 1.0
	mds.ExaggerationSmoothen = False
	if mapStore != None:
		csLoad.MinimizeView(mds)
	if vv.Dataset.IndexOfColumn('ChainName')>=0:
		mainChain = False
	try:
		for k, pId in enumerate(pList):
			chainNames = GetChainName(pId)
			if mainChain and not includeHA:
				bList = New.BodyList(LoadMainChain(pId))
				localPath, bList2, pdbTitle = '-', None, '-'
			else:
				localPath, bList, bList2, pdbTitle = LoadCifData(pId, mainChain=mainChain, chainNames=chainNames)
			seqLen = bList.Count

			bList = Interporlate(bList, rp=3, eps=eps, smtRatio=smtRatio)
			if includeHA:
				bList.AddRange(bList2)

			if expandFactor != 1.0:
				bList = New.BodyListClone(bList)
				bList = cs.LocalExpand(bList, expandFactor)
			nt = New.NumberTable(bList,3)
			nt = AugmentByIndex(nt, stretch=stretch)
			
			info = MapInfo()
			info.SF = stretch
			info.CF = expandFactor
			info.pId = pId
			info.pLen = bList.Count
			info.Mtd = 'PDB'
			info.PT = SimplifyTitle(pdbTitle)
			info.DS = f'DS:{vv.Dataset.Name}'
			info.Set('SmR', smtRatio)
			info.Set('HA', includeHA)
			info.Set('Eps', eps)
			info.Set('MC', mainChain)
			if chainNames != None:
				info.Set('CNs', '|'.join(chainNames) )
			mds.SetTrainingData(nt)
			vv.Title = f'Unfolding {pId}/{seqLen}: {k+1}-th of {len(pList)}'
			vv.DoEvents()
			RunMds(mds, info=info, repeats=0)

			if mapStore != None:
				mapStore.AddMaps()
		if mapStore != None:
			mds.Close()
	except Exception as e:
		vv.Message(str(e))
	if mapStore != None:
		ma = mapStore.atlas
		MatchProteinMap(ma, iconWidth, 0)
		ma.OnItemsSelected = '@vv.SelectedItems = [item.Name for item in pp.SelectedItems]'
		ma.OnAtlasShown = 'ShowSelectedProteins.pyn'
		ma.Description = info.ToStr()
		ma.Show()
		ma.DataChanged = True # since the Show() clears the DataChanged flag.

def GetTitleString(L, fPDB):
	idx = L.find('\'')
	if idx < 0:
		L = fPDB.readline()
		if L[0] == ';':
			return L[1:].strip()
		elif L[0] == '\'':
			return L.strip().strip('\'')
		else:
			return ''
	return L[idx:].strip().strip('\'')

def SimplifyTitle(title):
	return title.replace(':', '..').replace(';', '.,')


def GetAcc2Chain(fPDB):
	dict = {}
	for L in fPDB:
		if L[0] == '#': break
		if L[0] == '_': continue
		fs = L.split()
		if fs[8] not in dict:
			dict[fs[8]] = fs[3]
	return dict	

def LoadCifData(pId, mainChain=False, chainNames=None):
	localPath = pId if pId.endswith('.cif') else Download3DInfo(pId[:4])
	if chainNames != None:  
		mainChain = False
	bsList = cs.LoadCif(localPath, chainNames)
	if mainChain:
		dic = cs.GetAccession2ChainTable()
		acc2chain = {}
		for key in dic.Keys:
			acc2chain[key] = dic[key]
		bsList = SelectChain(pId, bsList, acc2chain)
	return localPath, bsList, cs.GetHeteroChains(), cs.GetTitle()

def OpenPDBFile(pMap):
	info = MapInfo(pMap.Description)
	OpenCifFile(info.pId)

def OpenCifFile(pId):
	vv.StartProcess("vi", PidToPath(pId))

def AugmentByIndex(nt, stretch):
	if stretch == 0: return nt
	nt.AddColumns(4)
	M = nt.Matrix
	rsList = nt.RowSpecList
	# get the number of interpolation points which is normally 8
	for ipp in range(1, 128):  
		if rsList[ipp].Id[0] == 'A':
			break
	dx = 0.1*stretch/ipp

	meanV = {}
	meanCnt = {}
	for row, rs in enumerate(rsList):
		if rs.Type not in meanCnt:
			meanCnt[rs.Type] = 0
			meanV[rs.Type] = [0, 0, 0]
		meanCnt[rs.Type] += 1
		V, R = meanV[rs.Type], M[row]
		for dim in range(3):
			V[dim] += R[dim]

	for row, rs in enumerate(rsList):
		if (row==0) or (rs.Type != rsList[row-1].Type): 
			offset = -0.5*meanCnt[rs.Type]*dx
		# hetero atoms don't participate in the unfold stretching
		if rs.Id[0] == 'H': continue
		M[row][3] += offset
		offset += dx

	for t in meanCnt:
		n, V = meanCnt[t], meanV[t]
		for dim in range(3):
			V[dim] = 1.0 * V[dim]/n
	for row, rs in enumerate(rsList):
		V, R = meanV[rs.Type], M[row]
		for dim in range(3):
			R[4+dim] = V[dim]

	return nt

def Download3DInfo(pId):
	from os.path import exists
	from urllib.request import urlretrieve
	localPath = PidToPath(pId)
	if not exists(localPath):
		urlretrieve(f'https://files.rcsb.org/download/{pId[:4]}.cif', localPath)
	return localPath

class ChainIndex():
	def __init__(self):
		self.chain2Index = {'HOH':(72+3), 'NAG':(72+11)}
		self.headIndex = 0
	def Lookup(self, chName):
		if chName not in self.chain2Index:
			for k in range(self.headIndex, 200, 1):
				if k not in self.chain2Index.values():
					self.chain2Index[chName] = k
					self.headIndex = k+1
					break
			if chName not in self.chain2Index:
				self.chain2Index[chName] = 200
		return self.chain2Index[chName]
	def Contains(self, chName):
		return chName in self.chain2Index

def CheckForPDB(pMap):
	info = MapInfo(pMap.Description)
	if info.Mtd != 'PDB':
		vv.Message('The parent map is not created from PDB file')
		vv.Return()

def HideInterpolates():
	for b in pp.BodyList:
		if b.Id.startswith('i'):
			b.Hidden = True
	pp.TheForm.HiddenBodySize = 4
	pp.RedrawAll()

def ShowHelix():
	vv.SelectedItems = [b.Id for b in pp.BodyList if b.Name.endswith('.h')]

def ShowBetaSheet():
	vv.SelectedItems = [b.Id for b in pp.BodyList if b.Name.endswith('.b')]

def LoadMainChain(pId):
	from os.path import exists
	cacheFile = PidToMainChain(pId)
	bList = New.BodyList()
	if exists(cacheFile):
		bList = csLoad.LoadMainChain(cacheFile)
	else:
		_, bList, _, pdbTitle = LoadCifData(pId, mainChain=True)
		with open(cacheFile, 'w') as outFile:
			for b in bList:
				outFile.write(f'{b.Id}|{b.Name}|{b.Type}|{b.X:.2f}|{b.Y:.2f}|{b.Z:.2f}\n')
	return New.NumberTable(bList, 3)

def LoadMainSeq(pId):
	from os.path import exists
	cacheFile = PidToMainChain(pId)
	if exists(cacheFile):
		return csLoad.LoadMainSeq(cacheFile)
	else:
		seq = []
		nt = LoadMainChain(pId)
		for rs in nt.RowSpecList:
			seq.append(rs.Name[0])
		return ''.join(seq)

def Interporlate(bsList, rp, eps, smtRatio=0):
	bs = New.BodyList()
	k0 = 0
	t0 = bsList[k0].Type
	for k in range(bsList.Count+1):
		if (k == bsList.Count) or (bsList[k].Type != t0):
			D = bsList.GetRange(k0, k-k0)
			if smtRatio != 0:
				cs.LocalSmoothen(D, smtRatio, 8)
			D = cs.Interpolate3D(D, rp, eps, bs.Count)
			bs.AddRange(D)
			if k < bsList.Count:
				k0 = k
				t0 = bsList[k0].Type
	return bs

def UnFoldMap(pMap, epochs=1000, ppl=0.1, repeats=1, stretch=0, expandFactor=1.0, initExag=10.0, finalExag=1.0, is3D=False):
	bList = pMap.BodyListEnabled()
	if expandFactor != 1.0:
		bList = New.BodyListClone(bList)
		bList = cs.LocalExpand(bList, expandFactor)
	nt = New.NumberTable(bList,3)
	AugmentByIndex(nt, stretch=stretch)
	mds = NewMds(nt, is3D=is3D, glyphSet=pMap.GlyphSet, initExag=initExag, finalExag=finalExag,
		epochs=epochs, ppl=ppl)
	info = MapInfo(pMap.Description).SetMds(mds)
	info.SF = stretch
	info.CF = expandFactor  # Local expanding factor
	winTitle = pMap.Title
	mds.GlyphSize = 0.5
	RunMds(mds, repeats=repeats, info=info)
	vv.LastView.Title = winTitle
	if repeats != 0:
		mds.Close()

def LoadChains(pId):
	_, bList, _, pdbTitle = LoadCifData(pId, mainChain=False)
	chList = []
	chType = -1    # current chain type
	chName = ''	  # current chain name.
	seqList = []
	for b in bList:
		if b.Type == chType:
			seqList.append(b.Name[0])
		else:
			if len(seqList) > 0:
				pSeq = ''.join(seqList)		
				chList.append( (chName, pSeq, len(pSeq)) )
			chType = b.Type
			fs = b.Name.split('.')
			chName = fs[2]
			seqList = [ fs[0] ]
	if len(seqList) > 0:
		pSeq = ''.join(seqList)		
		chList.append( (chName, pSeq, len(pSeq)) )

	# remove repeats:
	chSet = {}
	chIdSet = {}
	for (chId, pSeq, seqLen) in chList:
		if pSeq in chSet:
			chSet[pSeq] += 1
		else:
			chSet[pSeq] = 1
			chIdSet[pSeq] = chId
	ds = vv.Dataset
	for k, ch in enumerate(chSet):
		chId = chIdSet[ch]
		repeats = chSet[ch]
		chLen = len(ch)
		ds.AddRow(f'{pId}_{k}', chId,  0, list([pId, str(repeats), ch, str(chLen)]))
	return len(chSet)

def LoadAllChains():
	import os
	pList = [f[:4] for f in os.listdir('c:/temp/PDBCache') if f.endswith('.cif')]	
	chCount = 0
	for k, pId in enumerate(pList):
		if k%50 == 0:
			print(k, ': ', pId, chCount)
		chCount += LoadChains(pId)
		vv.DoEvents()
	vv.Dataset.CommitChanges()

'''

LoadAllChains()
vv.SelectedItems = vv.FindItems('ProteinSeq', 'RGAFGKPQGTVARVHIGQVIMSIRTKLQ')

d = cs.NWDistance('MRGAFGKPQGTVARVHG', 'mRGAFGKPQGTVARVHIG')
print(d)
'''
