# functions to import and process pdb/cif files.
import time
import math

vv.Import('SeqVis.pyn')

# get the path for the cached (PDB) CIF file.
def PidToPath(pId):
	if len(pId)<4:
		raise Exception('invalid protein ID')
	return f'c:/temp/PdbCache/{pId[:4]}.cif'

# get cache npy file for the main chain.
def PidToMainChain(pId):
	if len(pId)<4:
		raise Exception('invalid protein ID')
	return f'c:/temp/MainChain/{pId}.pmc'

csLoad = New.CsObject('''
public List<IBody> LoadMainChain(string cacheFile) {
	string[] lines = File.ReadAllLines(cacheFile);	
	IBody[] bList = new IBody[lines.Length];	
	MT.Loop(0, lines.Length, lineIdx=>{
			string line = lines[lineIdx];
			if (line == null) 
				return;
			string[] fs = line.Split('|');
			Body b = new Body(fs[0]);
			b.Name = fs[1];
			b.Type = short.Parse(fs[2]);
			b.X = float.Parse(fs[3]);
			b.Y = float.Parse(fs[4]);
			b.Z = float.Parse(fs[5]);
			bList[lineIdx] = b;
	});
	return bList.ToList();
}

public string LoadMainSeq(string cacheFile) {
	StringBuilder sb = new StringBuilder();
	using( TextReader tr = new StreamReader(cacheFile) ) {
		while(true) {
			string line = tr.ReadLine();
			if (line == null) 
				break;
			int idx = line.IndexOf('|');
			sb.Append(line[idx+1]);
		}
	}
	return sb.ToString();
}
''')

def ShowPDB(pId, rp=3, eps=0.1, mainChain=False, chainNames=None, includeHA=True, smtRatio=0, glyphSize=1.0, glyphOpacity=0.75):
	localPath, bsList, bsList2, pdbTitle = LoadCifData(pId, mainChain=mainChain, chainNames=chainNames)
	bsList = Interporlate(bsList, rp, eps, smtRatio=smtRatio)
	if includeHA:
		bsList.AddRange(bsList2)
	mp = New.Map3DView(bsList)
	info = MapInfo()
	info.pId = pId
	info.pLen = bsList.Count
	info.Mtd = 'PDB'
	info.PT = SimplifyTitle(pdbTitle)
	info.Set('SmR', smtRatio)
	info.Set('HA', includeHA)
	info.Set('Eps', eps)
	info.Set('MC', mainChain)
	mp.Description = info.ToStr()
	mp.Title = f'{pId}, Len:{bsList.Count}:  {info.PT}'
	mp.GlyphSet = '36 Clusters||||Colored Balls'
	mp.ReadOnly = True
	mp.ShowPerformance = False
	mp.ShowBoundingBox = False
	mp.GlyphSize = glyphSize
	mp.GlyphOpacity = glyphOpacity
	mp.Show()
	mp.HiddenBodySize = 6
	mp.HiddenBodyColor = New.Color('White')
	mp.NormalizeView()
	return mp

def SelectChain(pId, bsList, acc2chain):
	b = vv.Dataset.BodyForId(pId)
	if b == None:
		vv.Message(f'Cannot find {pId} protein in current dataset')
		vv.Return()
	if len(acc2chain) == 0:
		tgtChain = 'A'
	elif b.Name in acc2chain:	
		tgtChain = acc2chain[b.Name]
	else:
		tgtChain = list(acc2chain.values())[0]
	tgtChain += '_1'    # A chain may have multiple copies; we just return the first copy.
	bsList2 = New.BodyList()
	for b2 in bsList:
		chName = b2.Name.split('.')[2]
		if chName == tgtChain:
			bsList2.Add(b2)
	return bsList2 if bsList2.Count > 0 else bsList

def ShowProteinList(pList, mainChain, includeHA, atName, smtRatio=0, glyphSize=1.0, glyphOpacity=0.75):
	mapStore = NewMapStore(atName, is3D=True, clearStore=True)
	if mapStore != None:
		mapStore.atlas.Description = f'DS:{vv.Dataset.Name}'
		mapStore.atlas.OnItemsSelected = '@vv.SelectedItems = [item.Name for item in pp.SelectedItems]'
	for k, pId in enumerate(pList):
		vv.Title = f'Loading {pId}: {k+1}-th of {len(pList)}'
		chainNames = GetChainName(pId)
		ShowPDB(pId, mainChain=mainChain, chainNames=chainNames, includeHA=includeHA, smtRatio=smtRatio, glyphSize=glyphSize, glyphOpacity=glyphOpacity)
		if mapStore != None:	
			mapStore.AddMaps()
	if mapStore != None:
		ma = mapStore.atlas
		ma.OnItemsSelected = '@vv.SelectedItems = [item.Name for item in pp.SelectedItems]'
		ma.OnAtlasShown = 'ShowSelectedProteins.pyn'
		for item in ma.Items: 
			item.IconWidth = 250
		ma.Show()
		ma.ArrangeItems(False)

def GetChainName(pId):
	ds = vv.Dataset
	chIdx = ds.IndexOfColumn('ChainName')
	if chIdx >= 0:
		rowIdx = ds.BodyIndexForId(pId)
		chName = ds.GetDataAt(rowIdx, chIdx)
		return [ chName ]
	else:
		return None

def UnFoldProteinList(pList, epochs=1000, eps=0.1, mainChain=False, includeHA=False, wholeComplex=False, samplingDist=0, initExag=5.0, ppl=0.1, atName=None, 
		stretch=0, clusterStretch=0.5, expandFactor=1.0, iconWidth=50, smtRatio=0):

	if wholeComplex:
		# Remove all duplicates.
		selected = set()
		pList2 = []
		for p in pList:
			if p[:4] not in selected:
				pList2.append(p)
				selected.add(p[:4])
		pList = pList2

	if samplingDist > 0:
		pList = ss.FlatSampling(vv.Dataset.BodyListForId(pList), samplingDist)
		pList = [b.Id for b in pList]
		vv.Title = f'Sampled {len(pList)} chains!'
		if vv.ModifierKeys.ControlPressed:
			vv.SelectedItems = pList
			return

	
	mapStore = NewMapStore(atName, is3D=False, clearStore=True)	
	mds = NewMds(nt=None, epochs=epochs, is3D=False, initExag=initExag, finalExag=1.0, ppl=ppl, 
		repeats=0, metric='EuclideanMetric', glyphSet='36 Clusters||||Colored Balls')
	mds.RefreshFreq = epochs//2
	mds.GlyphSize = 0.75 if atName==None else 2.0
	mds.GlyphOpacity = 1.0	
	mds.GlyphSet = vv.Map.GlyphSet

	if vv.Dataset.IndexOfColumn('ChainName')>=0:
		mainChain = False
	try:
		for k, pId in enumerate(pList):
			chainNames = None if wholeComplex else GetChainName(pId)
			if mainChain and not includeHA:
				bList = New.BodyList(LoadMainChain(pId))
				localPath, bList2, pdbTitle = '-', None, '-'
			else:
				localPath, bList, bList2, pdbTitle = LoadCifData(pId, mainChain=mainChain, chainNames=chainNames)
			seqLen = bList.Count

			if not wholeComplex:
				bb = vv.Dataset.BodyForId(pId)
				for b in bList:
					b.Type = bb.Type
					b.Hidden = False

			bList = Interporlate(bList, rp=3, eps=eps, smtRatio=smtRatio)			

			if includeHA:
				bList.AddRange(bList2)

			nt = Augment2Table(bList, stretch=stretch, clusterStretch=clusterStretch, expandFactor=expandFactor)

			if nt.Rows < 8:
				continue	

			info = MapInfo()
			info.SF = stretch
			info.CF = expandFactor
			info.pId = pId
			info.pLen = bList.Count
			info.Mtd = 'PDB'
			info.PT = SimplifyTitle(pdbTitle)
			info.DS = f'DS:{vv.Dataset.Name}'
			info.Set('SmR', smtRatio)
			info.Set('HA', includeHA)
			info.Set('Eps', eps)
			info.Set('MC', mainChain)
			if chainNames != None:
				info.Set('CNs', '|'.join(chainNames) )
			mds.SetTrainingData(nt)
			vv.Title = f'Unfolding {pId}/{seqLen:,}: {k+1}-th of {len(pList)}'
			vv.DoEvents()

			# for short sequences (<200) we used fixed the perlexity instead of ratio
			#mds.PerplexityRatio = ppl*1600/nt.Rows if nt.Rows < 1600 else ppl

			RunMds(mds, info=info, repeats=0)

			if mapStore != None:
				mapStore.AddMaps()
			else:
				mds.ShowSnapshot().NormalizeView()
		mds.Close()
	except Exception as e:
		vv.Message(str(e))
	if mapStore != None:
		ma = mapStore.atlas
		MatchProteinMap(ma, iconWidth)
		ma.EventEnabled = True
		ma.OnItemsSelected = '@if pp.SelectedItems.Count>4: pp.ResetView()'
		ma.HiddenItemSize = 3
		ma.Description = info.ToStr()
		ma.Show()
		ma.DataChanged = True # since the Show() clears the DataChanged flag.

def GetTitleString(L, fPDB):
	idx = L.find('\'')
	if idx < 0:
		L = fPDB.readline()
		if L[0] == ';':
			return L[1:].strip()
		elif L[0] == '\'':
			return L.strip().strip('\'')
		else:
			return ''
	return L[idx:].strip().strip('\'')

def SimplifyTitle(title):
	return title.replace(':', '..').replace(';', '.,')


def GetAcc2Chain(fPDB):
	dict = {}
	for L in fPDB:
		if L[0] == '#': break
		if L[0] == '_': continue
		fs = L.split()
		if fs[8] not in dict:
			dict[fs[8]] = fs[3]
	return dict	

def LoadCifData(pId, mainChain=False, chainNames=None):
	localPath = pId if pId.endswith('.cif') else Download3DInfo(pId[:4])
	if chainNames != None:  
		mainChain = False
	bsList = cs.LoadCif(localPath, chainNames)
	if mainChain:
		dic = cs.GetAccession2ChainTable()
		acc2chain = {}
		for key in dic.Keys:
			acc2chain[key] = dic[key]
		bsList = SelectChain(pId, bsList, acc2chain)
	return localPath, bsList, cs.GetHeteroChains(), cs.GetTitle()

def OpenPDBFile(pMap):
	info = MapInfo(pMap.Description)
	OpenCifFile(info.pId)

def OpenCifFile(pId):
	vv.StartProcess("vi", PidToPath(pId))

def Augment2Table(bList, stretch, clusterStretch=1.0, expandFactor=1.0):

	if expandFactor != 1.0:
		bList = New.BodyListClone(bList)
		bList = cs.LocalExpand(bList, expandFactor)
	nt = New.NumberTable(bList,3)

	if stretch == 0 and clusterStretch == 0:
		return nt
	if nt.Rows <= 1:
		return nt	

	if clusterStretch == 0:
		nt.AddColumns(1)
	else:
		nt.AddColumns(4)

	M = nt.Matrix
	rsList = nt.RowSpecList
	# get the number of interpolation points, ipp, which is normally 8
	dx = 0
	for ipp in range(1, min(64, rsList.Count)):		
		if rsList[ipp].Id[0] == 'A':
			dx = 0.1*stretch/ipp
			break
	if dx == 0:
		return nt

	meanV = {}
	meanCnt = {}
	for row, rs in enumerate(rsList):
		if rs.Type not in meanCnt:
			meanCnt[rs.Type] = 0
			meanV[rs.Type] = [0, 0, 0]
		meanCnt[rs.Type] += 1
		V, R = meanV[rs.Type], M[row]
		for dim in range(3):
			V[dim] += R[dim]

	for row, rs in enumerate(rsList):
		if (row==0) or (rs.Type != rsList[row-1].Type): 
			offset = -0.5*meanCnt[rs.Type]*dx
		# hetero atoms don't participate in the unfold stretching
		if rs.Id[0] == 'H': continue
		#if rs.Name[0] == 'r': continue
		M[row][3] += offset
		offset += dx

	if clusterStretch != 0:
		for t in meanCnt:
			n, V = meanCnt[t], meanV[t]
			for dim in range(3):
				V[dim] = clusterStretch * V[dim]/n
		for row, rs in enumerate(rsList):
			V, R = meanV[rs.Type], M[row]
			for dim in range(3):
				R[4+dim] = V[dim]
	return nt

def Download3DInfo(pId):
	from os.path import exists
	from urllib.request import urlretrieve
	localPath = PidToPath(pId)
	if not exists(localPath):
		urlretrieve(f'https://files.rcsb.org/download/{pId[:4]}.cif', localPath)
	return localPath

def CheckForPDB(pMap):
	info = MapInfo(pMap.Description)
	if info.Mtd != 'PDB':
		vv.Message('The parent map is not created from PDB file')
		vv.Return()

def HideInterpolates():
	for b in pp.BodyList:
		if b.Id.startswith('i'):
			b.Hidden = True
	pp.TheForm.HiddenBodySize = 4
	pp.RedrawAll()

def ShowHelix():
	vv.SelectedItems = [b.Id for b in pp.BodyList if b.Name.endswith('.h')]

def ShowBetaSheet():
	vv.SelectedItems = [b.Id for b in pp.BodyList if b.Name.endswith('.b')]

def LoadMainChain(pId):
	from os.path import exists
	cacheFile = PidToMainChain(pId)
	bList = New.BodyList()
	if exists(cacheFile):
		bList = csLoad.LoadMainChain(cacheFile)
	else:
		ds = vv.Dataset
		chName = ds.GetDataAt(ds.IndexOfRow(pId), 4)
		_, bList, _, pdbTitle = LoadCifData(pId, mainChain=False, chainNames=[chName])
		SaveChain(pId, bList)
	return New.NumberTable(bList, 3)

def LoadMainSeq(pId):
	from os.path import exists
	cacheFile = PidToMainChain(pId)
	if exists(cacheFile):
		return csLoad.LoadMainSeq(cacheFile)
	else:
		seq = []
		nt = LoadMainChain(pId)
		for rs in nt.RowSpecList:
			seq.append(rs.Name[0])
		return ''.join(seq)

def Interporlate(bsList, rp, eps, smtRatio=0):
	bs = New.BodyList()
	k0 = 0
	t0 = bsList[k0].Type
	chIdx  = 0
	for k in range(bsList.Count+1):
		if (k == bsList.Count) or (bsList[k].Type != t0):
			D = bsList.GetRange(k0, k-k0)
			if smtRatio != 0:
				cs.LocalSmoothen(D, smtRatio, 8)
			D = cs.Interpolate3D(D, rp, eps, bs.Count, chIdx)
			chIdx+=1
			bs.AddRange(D)
			if k < bsList.Count:
				k0 = k
				t0 = bsList[k0].Type
	return bs

def UnFoldMap(pMap, epochs=1000, ppl=0.1, staged=False, repeats=1, stretch=0, clusterStretch=1.0, expandFactor=1.0, initExag=10.0, finalExag=1.0, is3D=False):
	bList = pMap.BodyListEnabled()
	nt = Augment2Table(bList, stretch=stretch, clusterStretch=clusterStretch, expandFactor=expandFactor)
	mds = NewMds(nt, is3D=is3D, glyphSet=pMap.GlyphSet, initExag=initExag, finalExag=finalExag,
		epochs=epochs, ppl=ppl, staged=staged)
	info = MapInfo(pMap.Description).SetMds(mds)
	info.SF = stretch
	info.CF = expandFactor  # Local expanding factor
	winTitle = pMap.Title
	mds.GlyphSize = 0.5
	RunMds(mds, repeats=repeats, info=info)
	vv.LastView.Title = winTitle
	if repeats != 0:
		mds.Close()
# pId=pList[0]
# Extract chains from PDB complex and store then in current table. Duplicates will be removed.
def LoadChains(pId, aaChains=True, rnaChains=False, dnaChains=False):
	ds = vv.Dataset
	if (ds.Columns != 5) or (ds.ColumnSpecList[4].Id != 'ChainName'):
		vv.Message('Current dataset has invalid format: pid;repeats;seq;len;chainName')
		return None, None, None

	_, bList, _, pdbTitle = LoadCifData(pId, mainChain=False)
	if bList == None:
		print('Failed to load cif file: ', pId)
		return None, None, None
	chList = []
	chType = -1    # current chain type
	chName = ''	  # current chain name.
	seqList = []
	ppType = -1   # polypeptide type: 0: aa-pp, 1: rna-pp, 2: dna-pp
	for b in bList:
		if b.Type == chType:
			pp = b.Name[0] if ppType == 0 else b.Name[2]
			seqList.append(pp)
		else:
			if len(seqList) > 0:
				if (aaChains and ppType==0) or (rnaChains and ppType==1) or (dnaChains and ppType==2):
					pSeq = ''.join(seqList)
					chList.append( (chName, ppType, pSeq, len(pSeq)) )
			chType = b.Type
			fs = b.Name.split('.')
			chName = fs[2]
			if fs[0] == 'r':	
				ppType = 1
			elif fs[0] == 'd':
				ppType = 2
			else:
				ppType = 0
			pp = b.Name[0] if ppType == 0 else b.Name[2]
			seqList = [ pp ]

	if len(seqList) > 0:
		if (aaChains and ppType==0) or (rnaChains and ppType==1) or (dnaChains and ppType==2):
			pSeq = ''.join(seqList)
			chList.append( (chName, ppType, pSeq, len(pSeq)) )

	# merge the repeated sequences:
	chSet = {}
	chInfo = {}
	totalLength = 0
	for (chId, ppType, pSeq, seqLen) in chList:
		totalLength += seqLen
		if pSeq in chSet:
			chSet[pSeq] += 1
		else:
			chSet[pSeq] = 1
			chInfo[pSeq] = (chId, ppType)

	for k, ch in enumerate(chSet):
		repeats = chSet[ch]
		chLen = len(ch)
		chId, ppType = chInfo[ch]
		seq = ch if ppType == 0 else ch.lower()
		b = ds.AddRow(f'{pId}_{k}', None,  ppType, [pId, str(repeats), seq, str(chLen), chId])
		if b == None:
			raise Exception('Failed: '+vv.LastError)
	return len(chList), totalLength, pdbTitle

# Unpack all chains in a PDB directory and store them in current dataset.
# A summary table about each protein will displayed.
def LoadAllChains(pList=None, aaChains=True, rnaChains=False, dnaChains=False):
	import os
	ds = vv.Dataset
	if (ds.Columns != 5) or (ds.ColumnSpecList[4].Id != 'ChainName'):
		vv.Message('Current dataset has invalid format: pid;repeats;seq;len;chainName')
		return

	if pList == None:
		pList = [f[:4] for f in os.listdir('c:/temp/PDBCache') if f.endswith('.cif')]	

	chCount = 0
	pTable = New.FreeTable()
	pTable.AddColumn('Chains', True)
	pTable.AddColumn('Size', True)
	pTable.AddColumn('Title', False)

	for k, pId in enumerate(pList):
		if (k+1)%50 == 0:
			print(k+1, ': ', pId, chCount)
		chCnt, totalLen, title = LoadChains(pId, aaChains=aaChains, rnaChains=rnaChains, dnaChains=dnaChains)
		if chCnt == None:
			continue
		chCount += chCnt
		pTable.AddRow(pId, 0, [str(chCnt), str(totalLen), title])
		vv.DoEvents()
	pTable.ShowAsTable()	
	ds.CommitChanges()
	return pTable

def SaveChain(chId, chain):
	cacheFile = f'c:/temp/MainChain/{chId}.pmc'
	with open(cacheFile, 'w') as outFile:
		for b in chain:
			outFile.write(f'{b.Id}|{b.Name}|{b.Type}|{b.X:.2f}|{b.Y:.2f}|{b.Z:.2f}\n')

def UnpackChains():
	import os
	pList = [f[:4] for f in os.listdir('c:/temp/PDBCache') if f.endswith('.cif')]	
	chainsCount = 0
	nm2id = {}
	ds = vv.Dataset
	for b in ds.BodyList:
		nm = ds.GetDataAt(ds.IndexOfRow(b.Id), 4)
		nm2id[b.Id[:4]+'_'+nm] = b.Id
	for k, pId in enumerate(pList):
		_, bList, _, pdbTitle = LoadCifData(pId, mainChain=False)
		preChName = None
		chain = []
		if k % 50 == 0:
			vv.Title =  f'{k}: {chainsCount}'
		vv.DoEvents()
		for b in bList:
			chNm = b.Name.split('.')[2]
			if chNm == preChName:
				chain.append(b)
			else:
				if preChName != None:
					id_nm = pId + '_' + preChName
					if id_nm in nm2id:
						chainsCount += 1
						SaveChain(nm2id[id_nm], chain)
				# start a new chain with chName and b as first point
				preChName = chNm
				chain = [ b ]
		# The last chain
		if len(chain) > 0:
			id_nm = pId + '_' + preChName
			if id_nm in nm2id:
				SaveChain(nm2id[id_nm], chain)

def PreloadPDB(sList):
	from os.path import exists
	pList = sList.split(',')
	pList = list(set([p[:4] for p in pList]))
	print(f'Preloading {len(pList)} files...')
	cnt = 0
	for k, pId in enumerate(pList):
		if k%10 == 0: print(k)
		if not exists(PidToPath(pId)):
			Download3DInfo(pId)
			cnt+=1
	print(f'Downloaded {cnt} PDB files')
	return pList

def InitDatabase(dsName, description):
	dsName = vv.Folder.NewDataset(dsName, description).Name
	vv.Folder.OpenDataset(dsName)
	vv.Map.GlyphSet = 'Ordered 64'
	ds = vv.Dataset
	ds.AddColumn('PID', 0, '', 0)
	ds.AddColumn('Repeats', 0, '', 1)
	ds.AddColumn('ProteinSeq', 0, '', 2)
	ds.AddColumn('SeqLen', 1, '0', 3)
	ds.AddColumn('ChainName', 0, '', 4)
	ds.CommitChanges()

# import a protein list into a new dataset table.
def ImportPDBList(sList, dsName):
	pList = PreloadPDB(sList)
	InitDatabase(dsName, '')
	infoTable = LoadAllChains(pList, True, True, True)
	infoTable.SaveAsDataset(dsName+'Info', '')

'''
UnpackChains()

LoadAllChains(True, True, True)

vv.SelectedItems = vv.FindItems('ProteinSeq', 'RGAFGKPQGTVARVHIGQVIMSIRTKLQ')

aa = 'NLRKNNRQPYAVSELAGHQTSAESWGTGRAVARIPRVRGGGTHRSGQGAFGNMCRGGRMFAPTKTWRRWHRRVNTTQKRYAICSA'[:40]
bb = 'RGAFGKPQGTVARVHIGQVIMSIRTKLQ'[:20]
L = len(aa)//2
a1 = aa[:L]
a2 = aa[L:]
s1 = set(vv.FindItems('ProteinSeq', a1)) 
s2 = set(vv.FindItems('ProteinSeq', a2)) 
s12 = s1.union(s2)
print(len(s1), len(s2), len(s12))


d = cs.NWDistance('MRGAFGKPQGTVARVHG', 'mRGAFGKPQGTVARVHIG')
print(d)

pSet = set(vv.SelectedItems)
vv.SelectedItems = [p for p in vv.AllItems if p[:4] in pSet]

ds = vv.Dataset
for k, b in enumerate(ds.BodyList):
	if b.Type != 0:
		seq = ds.GetValueAt(k, 2)
		ds.SetStringAt(k, 2, seq.lower())

isLarge = set(vv.SelectedItems)
for b in vv.Dataset.BodyList:
	if b.Id[:4] in isLarge:
		b.Disabled = True
vv.Map.Redraw()

Steps to import a list of PDB id into VisuMap:
sList = '1XU0_1,1XYJ_1,2KU4_1,1U5L_1,1XYK_1,1XYW_1,2KFL_1,3O79_1,2K56_1,1U3M_1,1LG4_1,1XYU_1,1Y2S_1,1I17_1,1UW3_1,6FNV_1,1G04_1,2RMV_1,2RMW_1,1M25_1,2MV8_1,1S4T_1,2MV9_1,9DMY_1,2KTM_1,2N53_1,6AXZ_1,6BTK_1,2RNM_1,1TPX_1,1TPX_2,1TPX_3,3FVA_1,7RVF_1,4YXH_1,4YXH_2,4YXH_3,2M1J_1,1TQB_1,1TQB_2,1TQB_3,1TQC_1,1TQC_2,1TQC_3,1Z65_1,7RVH_1,1DX1_1,1DWY_1,1DWZ_1,1DX0_1,1XYQ_1,4YXK_1,4YXK_2,4YXK_3,2LBU_1,2KJ3_1,9DMZ_1,2MUS_1,6EKA_1,4TUT_1,4UBZ_1,2WVO_1,2WVQ_1,2WVN_1,4UBY_1,6HEQ_1,4YX2_1,4YX2_2,4YX2_3,2RQJ_1,6LNI_1,1SKH_1,2OL9_1,2OLX_1,4W71_1,4WBU_1,4WBV_1,2RSK_1,2RSK_2,2RU7_1,2RU7_2,8EFU_1,2FJ3_1,7N2L_1,7TD6_1,4HLS_1,4HMM_1,4HMR_1,2ONX_1,7N2K_1,2JOH_1,1B10_1,7N2H_1,7N2J_1,2JOM_1,7LNA_1,3HER_1,3HJ5_1,7DWV_1,4W5Y_1,4W67_1,6K84_1,7QIG_1,1G6W_1,8A00_1,2LH8_1,4W5M_1,4W5P_1,1XYX_1,3HEQ_1,3HES_1,4W5L_1,1QLX_1,1QLZ_1,1QM0_1,1QM2_1,1QM3_1,1JZR_1,1K0B_1,1FKC_1,1FO7_1,1HJM_1,1HJN_1,1I4M_1,2KU6_1,2HH0_1,2HH0_2,2HH0_3,1AG2_1,1E1G_1,1E1J_1,1E1P_1,1E1S_1,1E1U_1,1E1W_1,2K1D_1,2KU5_1,1G6Y_1,1H0L_1,1QM1_1,1Y15_1,1Y16_1,2K5O_1,2KFM_1,2KFO_1,3HAK_1,3HJX_1,1K0C_1,1K0D_1,2L1D_1,2L1E_1,2L1H_1,2L1K_1,2L39_1,2L40_1,3HAF_1,6HER_1,6HER_2,1CR9_1,1CR9_2,1HQO_1,4YXL_1,4YXL_2,4YXL_3,6HHD_1,6HHD_2,6HHD_3,6HHD_4,4DGI_1,4DGI_2,4DGI_3,2LEJ_1,3NVE_1,2W9E_1,2W9E_2,2W9E_3,2KUN_1,5YJ4_1,5YJ5_1,6SUZ_1,6SUZ_2,6SUZ_3,6SV2_1,6SV2_2,6SV2_3,2LFT_1,2LSB_1,2M8T_1,6DU9_1,6AQ7_1,6AQ7_2,6AQ7_3,4H88_1,4H88_2,4H88_3,5L6R_1,2KKG_1,2LV1_1,7FHQ_1,4KML_1,4KML_2,4MA7_1,4MA7_2,4MA7_3,4MA8_1,4MA8_2,4MA8_3,4N9O_1,4N9O_2,1K0A_1,7RVG_1,7YAT_1,1OEH_1,1OEI_1,1CU4_1,1CU4_2,1CU4_3,2W9D_1,2W9D_2,8WZX_1,7RVI_1,2IV5_1,3NVF_1,7VI4_1,7VI5_1,3MD4_1,2LBG_1,6UUR_1,4O9F_1,3MD5_1,2IV4_1,2IV6_1,3NHC_1,3NHD_1,4O9L_1,5K2G_1,5K2H_1,3NVG_1,3NVH_1,7UMQ_1,7UN5_1,5K2F_1,7RVD_1,6PQ5_1,6PQA_1,7RL4_1,7RVE_1,7RVJ_1,7RVL_1,8DJA_1,4J8R_1,4J8R_2,4J8R_3,4E1I_1,4E1I_2,2OMM_1,5K2E_1,7RVC_1,7RVK_1,4E1H_1,4E1H_2,8OKR_1,8B3A_1,7K06_1,6CLC_1,6CLD_1,6CLE_1,6CLF_1,6CLG_1,6CLH_1,6CLI_1,6CLJ_1,6CLK_1,6CLL_1,6CLM_1,6CLN_1,6CLO_1,6CLP_1,6CLQ_1,6CLR_1,6CLS_1,6CLT_1,2XRI_1,4HSE_1,5LKN_1,2KZC_1,2LL0_1,2MDZ_1,7K07_1,7VKV_1,7K05_1,7LPY_1,7LPZ_1,7LQ0_1,2N2C_1,8T5O_1,8SPA_1,8A6I_1,6ZCF_1,8SYK_1,6ZCH_1,7OVT_1,1YJP_1,2UXO_1,7ZIR_1,3Q5P_1,3Q5P_2,6ZCG_1,2TRT_1,4B3A_1,1YJO_1,2VKE_1,6FPL_1,6FPM_1,6VPS_1,4FE8_1,4FEB_1,4FEC_1,7SNQ_1,7SNQ_2,7ELJ_1,7ELJ_2,7ELJ_3,4FED_1,2HCJ_1,2HCJ_2,7ZJ2_1,2HDN_1,2HDN_2,6ODG_1,7MKF_1,7MKG_1,7MKH_1,3J6C_1,8UKA_1,2XKS_1,2XKU_1,8CF1_1,8CF1_10,8CF1_2,8CF1_3,8CF1_4,8CF1_5,8CF1_6,8CF1_7,8CF1_8,8CF1_9,1HNW_1,1HNW_10,1HNW_11,1HNW_12,1HNW_13,1HNW_14,1HNW_15,1HNW_16,1HNW_17,1HNW_18,1HNW_19,1HNW_2,1HNW_20,1HNW_21,1HNW_22,1HNW_3,1HNW_4,1HNW_5,1HNW_6,1HNW_7,1HNW_8,1HNW_9,1I97_1,1I97_10,1I97_11,1I97_12,1I97_13,1I97_14,1I97_15,1I97_16,1I97_17,1I97_18,1I97_19,1I97_2,1I97_20,1I97_21,1I97_3,1I97_4,1I97_5,1I97_6,1I97_7,1I97_8,1I97_9,8CGJ_1,8CGJ_10,8CGJ_11,8CGJ_12,8CGJ_13,8CGJ_14,8CGJ_15,8CGJ_16,8CGJ_2,8CGJ_3,8CGJ_4,8CGJ_5,8CGJ_6,8CGJ_7,8CGJ_8,8CGJ_9,6S47_1,6S47_10,6S47_11,6S47_12,6S47_13,6S47_14,6S47_15,6S47_16,6S47_17,6S47_18,6S47_19,6S47_2,6S47_20,6S47_21,6S47_22,6S47_23,6S47_24,6S47_25,6S47_26,6S47_27,6S47_28,6S47_29,6S47_3,6S47_30,6S47_31,6S47_32,6S47_33,6S47_34,6S47_35,6S47_36,6S47_37,6S47_38,6S47_39,6S47_4,6S47_40,6S47_41,6S47_42,6S47_43,6S47_44,6S47_45,6S47_46,6S47_47,6S47_48,6S47_49,6S47_5,6S47_50,6S47_51,6S47_52,6S47_53,6S47_54,6S47_55,6S47_56,6S47_57,6S47_58,6S47_59,6S47_6,6S47_60,6S47_61,6S47_62,6S47_63,6S47_64,6S47_65,6S47_66,6S47_67,6S47_68,6S47_69,6S47_7,6S47_70,6S47_71,6S47_72,6S47_73,6S47_74,6S47_75,6S47_76,6S47_77,6S47_78,6S47_79,6S47_8,6S47_9,4V9A_1,4V9A_10,4V9A_11,4V9A_12,4V9A_13,4V9A_14,4V9A_15,4V9A_16,4V9A_17,4V9A_18,4V9A_19,4V9A_2,4V9A_20,4V9A_21,4V9A_22,4V9A_23,4V9A_24,4V9A_25,4V9A_26,4V9A_27,4V9A_28,4V9A_29,4V9A_3,4V9A_30,4V9A_31,4V9A_32,4V9A_33,4V9A_34,4V9A_35,4V9A_36,4V9A_37,4V9A_38,4V9A_39,4V9A_4,4V9A_40,4V9A_41,4V9A_42,4V9A_43,4V9A_44,4V9A_45,4V9A_46,4V9A_47,4V9A_48,4V9A_49,4V9A_5,4V9A_50,4V9A_51,4V9A_52,4V9A_53,4V9A_6,4V9A_7,4V9A_8,4V9A_9,5J5B_1,5J5B_10,5J5B_11,5J5B_12,5J5B_13,5J5B_14,5J5B_15,5J5B_16,5J5B_17,5J5B_18,5J5B_19,5J5B_2,5J5B_20,5J5B_21,5J5B_22,5J5B_23,5J5B_24,5J5B_25,5J5B_26,5J5B_27,5J5B_28,5J5B_29,5J5B_3,5J5B_30,5J5B_31,5J5B_32,5J5B_33,5J5B_34,5J5B_35,5J5B_36,5J5B_37,5J5B_38,5J5B_39,5J5B_4,5J5B_40,5J5B_41,5J5B_42,5J5B_43,5J5B_44,5J5B_45,5J5B_46,5J5B_47,5J5B_48,5J5B_49,5J5B_5,5J5B_50,5J5B_51,5J5B_52,5J5B_53,5J5B_54,5J5B_6,5J5B_7,5J5B_8,5J5B_9,5J7L_1,5J7L_10,5J7L_11,5J7L_12,5J7L_13,5J7L_14,5J7L_15,5J7L_16,5J7L_17,5J7L_18,5J7L_19,5J7L_2,5J7L_20,5J7L_21,5J7L_22,5J7L_23,5J7L_24,5J7L_25,5J7L_26,5J7L_27,5J7L_28,5J7L_29,5J7L_3,5J7L_30,5J7L_31,5J7L_32,5J7L_33,5J7L_34,5J7L_35,5J7L_36,5J7L_37,5J7L_38,5J7L_39,5J7L_4,5J7L_40,5J7L_41,5J7L_42,5J7L_43,5J7L_44,5J7L_45,5J7L_46,5J7L_47,5J7L_48,5J7L_49,5J7L_5,5J7L_50,5J7L_51,5J7L_52,5J7L_53,5J7L_54,5J7L_6,5J7L_7,5J7L_8,5J7L_9'

sList

ImportPDBList(sList, 'Membran')

'''
