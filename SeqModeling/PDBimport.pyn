# Functions to download and import seqeunce files in csv format from site
#   https://www.rcsb.org/search/browse/atc
#
import pandas as pd

ALPHABET = 'ARNDCEQGHILKMFPSTWYV'
P = {ALPHABET[k]:k for k in range(len(ALPHABET))}

def IsOK(pSeq):
	for c in pSeq:
		if c not in P:
			return False
	return True

#Intialize a empty table to import polypipetide data

def InitDatabase(dsName, description):
	dsName = vv.Folder.NewDataset(dsName, description).Name
	vv.Folder.OpenDataset(dsName)
	vv.Map.GlyphSet = PMap_GLYPHSET
	ds = vv.Dataset
	ds.AddColumn('PID', 0, '', 0)
	ds.AddColumn('Accession', 0, '', 1)
	ds.AddColumn('ProteinSeq', 0, '', 2)
	ds.AddColumn('SeqLen', 1, '0', 3)
	ds.AddColumn('Molecular Weight', 1, '0', 4)
	ds.CommitChanges()

# Import one or more cif files download from https://www.rcsb.org/search/browse/atc.
def ImportPDBs():
	fileList = vv.GuiManager.SelectFiles('PDB download', 'PDB seq files|*.csv', 'C:\\Users\\james\\Downloads')
	if fileList == None:
		return
	errs  = 0
	cnt = 0
	imported = set()
	for fn in fileList:
		df = pd.read_csv(fn)
		n, dim = df.shape[0], df.shape[1]
		if dim != 11:
			print('Invalid dimension in ', fn)
			break
		print('Importing ', fn)
		for k in range(1, n):
			R = df.loc[k]
			if str(R[0]) == 'nan':
				continue
			pSeq = R[6]
			pLen = R[7]
			pId = R[0]
			accession = R[5]
			if int(pLen) < 50:
				continue
			if pSeq in imported:
				continue
			if IsOK(pSeq):
				vList = New.StringArray([pId, str(accession), str(pSeq), str(pLen), str(R[9])])
				vv.Dataset.AddRow(pId, str(accession), 0, vList )
				cnt += 1
			else:
				errs += 1
			imported.add(pSeq)
	vv.Dataset.CommitChanges()
	print('Completed! ', cnt, errs)

# Merge multiple local sequence table to a single one.
def MergeDatasets(dstDatasetName, dsList):
	InitDatabase(dstDatasetName, '')
	included = set()
	rows = 0
	for dsName in dsList:
		print(f'Importing: {dsName}')
		ds = vv.Folder.ReadDataset(dsName)
		for k in range(ds.Rows):
			rows += 1
			b = ds.BodyList[k]
			if b.Id in included:
				continue
			sLen = ds.ValueAtAsString(k, 3)
			if sLen == '0':
				continue
			vList = New.StringArray([b.Id, b.Name, ds.ValueAtAsString(k,2), sLen, ds.ValueAtAsString(k, 4)])
			vv.Dataset.AddRow(b.Id, b.Name, 0, vList)
			included.add(b.Id)
	vv.Dataset.CommitChanges()
	print(f'Merged: {rows} into {vv.Dataset.Rows}')

'''
InitDatabase('Ribosome', '')
ImportPDBs()

MergeDatasets('Dataset-18', list(vv.Folder.DatasetNameList)[3:21])
'''
