#SphericalProj.pyn
import math

def GetSphereDataset(cId, interRp=0, contracting=0, normalizing=False):
	bList = LoadChain0(cId)
	if bList.Count < 3:
		return None
	bType = vv.Dataset.BodyForId(cId).Type
	for b in bList: 
		b.Type = bType
	bList = cs.ToSphere(bList, contracting, normalizing)
	if interRp>0:
		bList = Interpolate(bList, interRp)
		for b in bList: 
			b.Hidden = b.Id.startswith('i')
	bList[0].Type = 105
	bList[bList.Count-1].Type = 110
	return bList

def ShowSphere(bList, info=None, hsize=1, gsize=3.0, gopacity=1.0, normalizing=False, showBox=True):
	mp = New.Map3DView(bList)
	mp.ReadOnly = True
	mp.ShowPerformance = False
	mp.ShowBoundingBox = showBox
	mp.MapDepth = 0.5*(mp.Width+mp.Height)
	mp.GlyphSize = gsize
	mp.GlyphOpacity = gopacity
	mp.HiddenBodySize = hsize
	mp.Show()
	mp.CentralizeView()
	if info != None:
		mp.Description = info.ToStr()
	if normalizing: 
		mp.NormalizeView()
	return mp

def ShowSphere2(pId, cf, hsize=4, gsize=4.0, gopacity=1.0, iRp=5):
	info = MapInfo().Set('pId', pId)
	bList = GetSphereDataset(pId, interRp=iRp, contracting=cf, normalizing=False)
	for b in bList:
		if b.Type == 0: 
			b.Type = 5
	mp = ShowSphere(bList, info, hsize, gsize, gopacity, True)
	mp.EditMode = True
	mp.ShowBoundingBox = False
	mp.NormalizeView()
	return mp

def ShowSphere3(pId):
	bList = LoadChain0(pId)
	bList = cs.ToSphere(bList, 0)
	bList = cs.ToSphere(bList, 0.9)
	bList = Interpolate(bList, 5, hidIntp=True)

	for b in bList: b.Type = 5
	bList[0].Type, bList[bList.Count-1].Type = 105, 110
	info = MapInfo('pId:'+pId)
	mp = ShowSphere(bList, info, 2, 3.0, 0.5, True)
	mp.ShowBoundingBox = False
	mp.RedrawAll()

def ShowSphere4(repeats=5, contracting=0.9):
	if pp.Name == 'MainForm':
		pId = pp.SelectedItems[0]
		bList = LoadChain0(pId)
	elif pp.Name == 'Atlas':
		pId = pp.SelectedItems[0].Id
		bList = LoadChain0(pId)
	else:
		pId = MapInfo(pp.Description).pId
		bList = pp.BodyList
	bList = New.BodyListClone([b for b in bList if b.Id.startswith('A')])
	bList = cs.ToSphere(bList, contracting)
	bList = Interpolate(bList, repeats, hidIntp=True)
	for b in bList: 
		b.Mult(1000.0)
		b.Type = 5
	bList[0].Type = 105
	bList[bList.Count - 1].Type = 110
	info = MapInfo('pId:'+pId)
	ShowSphere(bList, info, gsize=2.5, hsize=2, gopacity=0.75,  showBox=False)

def NotExits(vw):
	return (vw == None) or vw.TheForm.IsDisposed

def SphereUnfold(bList, cf):
	global tgtView
	cf = max(0, min(1, cf))
	bList = New.BodyListClone(bList)
	cs.ShrinkSphere(bList, cf)
	bs = New.BodyList()
	bx = New.Body('A999.0')
	bx.Name = bList[0].Name
	bx.Type = 0
	bs.Add(bx.Clone())
	for b in bList:
		bx.Add(b.X, b.Y, b.Z)
		bx.Name = b.Name
		bx.Id = b.Id
		bx.Type = 0
		bs.Add(bx.Clone())
	bs = Interpolate1Chain(bs, rp=5)
	bs[0].Type = 105
	bs[bs.Count-1].Type = 110
	if NotExits(tgtView):
		tgtView = New.Map3DView(New.BodyListClone(bs)).Show()
		tgtView.CentralizeView()
		tgtView.ShowBoundingBox = False
	tgtView.MoveBodiesTo(bs, 5, 50, 0, 0)

def ShrinkSphere(bList, cf):
	global tgtView	
	cf = max(0, min(1, cf))
	bList = New.BodyListClone(bList)
	cs.ShrinkSphere(bList, cf)
	bList = Interpolate1Chain(bList, rp=5)
	if NotExits(tgtView):
		tgtView = New.Map3DView(bList)
		tgtView.ShowBoundingBox = False
		tgtView.Show()
		tgtView.CentralizeView(False)
	tgtView.MoveBodiesTo(bList, 5, 50, 0, 0)


def SphereView(pId, unfolding, gopacity=1.0):
	global tgtView
	tgtView = None
	bList = GetSphereDataset(pId, interRp=0)
	if bList.Count > 1:
		maxSz = 0.75*(bList[0].Length + bList[1].Length)
		bList = New.BodyList([b for b in bList if b.Length<maxSz])
	tstFct = SphereUnfold if unfolding else ShrinkSphere
	cfList = [0.01 * k for k in range(100)]
	cfList = 9*(cfList + cfList[::-1])
	for k, cf in enumerate(cfList):
		tstFct(bList, cf)
		tgtView.Title = f'CF: {k}: {cf}'
		vv.DoEvents()
		if (k%19==0) and tstFct==SphereUnfold: tgtView.CentralizeView(False)
		if vv.ModifierKeys.AltPressed: break	

def TorsionMap(pList):
	for pId in pList:
		info = MapInfo().Set('pId', pId)
		bs = LoadChain0(pId)
		nt = cs.ToTorsionList(bs).Transpose2()
		bb = New.BarBand(nt)
		bb.Description = info.ToStr()
		bb.Vertical = True
		bb.CompactMode = False
		bb.ReadOnly = True
		bb.ShowLabels = False
		bb.Resize(0, 0, min(1800, 10*bs.Count), 400)
		bb.AutoScaling = True
		bb.AttributeMode = True
		bb.BaseLineType = 4
		bb.BaseValueExplicit = 0.0
		bb.FineSelection = True
		bb.Show2()	
	if len(pList)>5 :
		atlas = New.Atlas()
		atlas.Clear()
		atlas.CaptureAllOpenViews(10, 10, "BarBandView")
		for item in atlas.Items: 
			item.Transparent = True
			item.ShowBorder = True
			item.IconHeight = 180
			item.IconWidth = 0
			bb = item.Load()
			item.Id = MapInfo(bb.Description).pId
			item.Name = item.Id
			bb.Close()
		atlas.BackgroundColor = New.Color(255, 0, 0, 64)
		atlas.Show()
		atlas.ArrangeItems(False)

def ProteinS2Map(pList, atlasName, samplingDist, ctrF):
	mds = NewMds(None, epochs=3000, initExag=6.0, finalExag=1.0, ppl=0.1, repeats=0, refreshFreq=200, 
		glyphScale=5.0, glyphSet='Ordered 64|36 Clusters|Red Green', glyphSize=1.0, glyphOpacity=1.0)

	def DoTsne(info, bList):
		RunMds(mds, info=info, repeats=0, nt=New.NumberTable(bList, 3))
		bList = Interpolate(mds.BodyList, rp=5)
		for b in bList:
			b.Hidden = True if b.Id[0] == 'i' else False
		return bList
	info = MapInfo()
		
	if len(pList) < 10:
		for pId in pList:
			info.pId = pId
			bList = GetSphereDataset(pId, interRp=0, contracting=ctrF)
			bList = DoTsne(info, bList)
			mp = New.MapSnapshot(bList).Show()
			mp.HiddenBodySize = 3
			mp.ResetSize().NormalizeView()
			mp.Description = info.ToStr()
	else:
		mds.GlyphSize = 6.0
		mds.RefreshFreq = 0
		atlasName = 'S2.' + atlasName
		mapStore = NewMapStore(atlasName, clearStore=True)			
		info.Mtd = 'S2'
		info.Set('cF', ctrF)
		if samplingDist != 0:
			pList = ss.FlatSampling(pList, samplingDist=samplingDist)
		for k, pId in enumerate(pList):				
			bList = GetSphereDataset(pId, interRp=0, contracting=ctrF)
			if bList == None:
				continue
			info.pId = pId
			info.pLen = bList.Count
			vv.Title = f'Embedding S2 {pId}/{bList.Count:,}: {k+1}-th of {len(pList)}'
			bList = DoTsne(info, bList)
			mapStore.AddRawMap(pId, bList, 1.0)
		MatchProteinMap(mapStore.atlas, 70)
		mapStore.Close()
		New.Atlas(atlasName).Show()
	mds.Close()

'''

'''

